{"version":3,"file":"block-ui.service.d.ts","sources":["block-ui.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BlockUIInstanceService } from './block-ui-instance.service';\nimport { NgBlockUI } from '../models/block-ui.model';\nexport declare class BlockUIService {\n    private blockUIInstance;\n    globalDispatch: NgBlockUI;\n    constructor(blockUIInstance: BlockUIInstanceService);\n    /**\n    * Starts blocking for given BlockUI instance or instances\n    */\n    start(target: string | string[], message?: any): void;\n    /**\n    * Stops blocking for given BlockUI instance or instances\n    */\n    stop(target: string | string[]): void;\n    /**\n    * Reset blocking for given BlockUI instance or instances\n    */\n    reset(target: string | string[]): void;\n    /**\n    * Reset blocking for all BlockUI instances\n    */\n    resetGlobal(): void;\n    /**\n    * Updates message for given BlockUI instance or instances\n    */\n    update(target: string | string[], message: any): void;\n    /**\n    * Unsubscribes for given BlockUI instance or instances\n    */\n    unsubscribe(target: string | string[]): void;\n    /**\n    * Checks if BlockUI is actively blocking\n    */\n    isActive(target?: string | string[]): boolean;\n    private dispatch;\n    private toArray;\n}\n"]}