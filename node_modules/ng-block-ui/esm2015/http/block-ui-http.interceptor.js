import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
let BlockUIInterceptor = class BlockUIInterceptor {
    constructor(blockUIService, blockUIHttpSettings) {
        this.blockUIService = blockUIService;
        this.blockUIHttpSettings = blockUIHttpSettings;
        this.activeHttpRequests = 0;
    }
    intercept(request, next) {
        let active = false;
        if (this.shouldBlock(request)) {
            this.blockUIService.start(BLOCKUI_DEFAULT);
        }
        return next.handle(request)
            .pipe(finalize(() => {
            if (this.shouldBlock(request)) {
                const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;
                const method = blockAllRequestsInProgress ? 'stop' : 'reset';
                this.blockUIService[method](BLOCKUI_DEFAULT);
            }
        }));
    }
    shouldBlock(request) {
        const { method, urlWithParams } = request;
        const { settings } = this.blockUIHttpSettings;
        const requestFilters = settings.requestFilters || [];
        return !requestFilters.some((f) => {
            if (f && f.method && f.url) {
                return f.method.toUpperCase() === method && f.url.test(urlWithParams);
            }
            else if (typeof f === 'function') {
                return f(request);
            }
            return f.test(urlWithParams);
        });
    }
};
BlockUIInterceptor.ctorParameters = () => [
    { type: BlockUIService },
    { type: BlockUIHttpSettings }
];
BlockUIInterceptor = __decorate([
    Injectable()
], BlockUIInterceptor);
export { BlockUIInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaHR0cC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJsb2NrLXVpL2h0dHAvIiwic291cmNlcyI6WyJibG9jay11aS1odHRwLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUd2RSxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQUc3QixZQUNVLGNBQThCLEVBQzlCLG1CQUF3QztRQUR4QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUVoRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjtRQUNwRCxJQUFJLE1BQU0sR0FBWSxLQUFLLENBQUM7UUFFNUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUN4QixJQUFJLENBQ0gsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDN0IsTUFBTSxFQUFFLDBCQUEwQixFQUFFLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQztnQkFDekUsTUFBTSxNQUFNLEdBQVcsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNyRSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQzlDO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBeUI7UUFDbkMsTUFBTSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDMUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUM5QyxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQztRQUVyRCxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtnQkFDMUIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN2RTtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDbEMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbkI7WUFFRCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTs7WUF4QzJCLGNBQWM7WUFDVCxtQkFBbUI7O0FBTHZDLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7R0FDQSxrQkFBa0IsQ0E0QzlCO1NBNUNZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEV2ZW50LFxuICBIdHRwSW50ZXJjZXB0b3Jcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCbG9ja1VJU2VydmljZSwgQkxPQ0tVSV9ERUZBVUxUIH0gZnJvbSAnbmctYmxvY2stdWknO1xuaW1wb3J0IHsgQmxvY2tVSUh0dHBTZXR0aW5ncyB9IGZyb20gJy4vYmxvY2stdWktaHR0cC1zZXR0aW5ncy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgYWN0aXZlSHR0cFJlcXVlc3RzOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBibG9ja1VJU2VydmljZTogQmxvY2tVSVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBibG9ja1VJSHR0cFNldHRpbmdzOiBCbG9ja1VJSHR0cFNldHRpbmdzXG4gICkge1xuICAgIHRoaXMuYWN0aXZlSHR0cFJlcXVlc3RzID0gMDtcbiAgfVxuXG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBsZXQgYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5zaG91bGRCbG9jayhyZXF1ZXN0KSkge1xuICAgICAgdGhpcy5ibG9ja1VJU2VydmljZS5zdGFydChCTE9DS1VJX0RFRkFVTFQpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KVxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5zaG91bGRCbG9jayhyZXF1ZXN0KSkge1xuICAgICAgICAgICAgY29uc3QgeyBibG9ja0FsbFJlcXVlc3RzSW5Qcm9ncmVzcyB9ID0gdGhpcy5ibG9ja1VJSHR0cFNldHRpbmdzLnNldHRpbmdzO1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kOiBzdHJpbmcgPSBibG9ja0FsbFJlcXVlc3RzSW5Qcm9ncmVzcyA/ICdzdG9wJyA6ICdyZXNldCc7XG4gICAgICAgICAgICB0aGlzLmJsb2NrVUlTZXJ2aWNlW21ldGhvZF0oQkxPQ0tVSV9ERUZBVUxUKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgc2hvdWxkQmxvY2socmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgbWV0aG9kLCB1cmxXaXRoUGFyYW1zIH0gPSByZXF1ZXN0O1xuICAgIGNvbnN0IHsgc2V0dGluZ3MgfSA9IHRoaXMuYmxvY2tVSUh0dHBTZXR0aW5ncztcbiAgICBjb25zdCByZXF1ZXN0RmlsdGVycyA9IHNldHRpbmdzLnJlcXVlc3RGaWx0ZXJzIHx8IFtdO1xuXG4gICAgcmV0dXJuICFyZXF1ZXN0RmlsdGVycy5zb21lKChmOiBhbnkpID0+IHtcbiAgICAgIGlmIChmICYmIGYubWV0aG9kICYmIGYudXJsKSB7XG4gICAgICAgIHJldHVybiBmLm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSBtZXRob2QgJiYgZi51cmwudGVzdCh1cmxXaXRoUGFyYW1zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGYocmVxdWVzdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmLnRlc3QodXJsV2l0aFBhcmFtcyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==