var BlockUIHttpModule_1;
import { __decorate } from "tslib";
import { NgModule, InjectionToken } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { BlockUIModule } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
import { BlockUIInterceptor } from './block-ui-http.interceptor';
// Needed for AOT compiling
export const BlockUIHttpModuleSettings = new InjectionToken('BlockUIHttpModuleSettings');
export function provideSettingsInstance(settings) {
    return {
        settings: Object.assign({ blockAllRequestsInProgress: true }, settings)
    };
}
let BlockUIHttpModule = BlockUIHttpModule_1 = class BlockUIHttpModule {
    static forRoot(settings = {}) {
        return {
            ngModule: BlockUIHttpModule_1,
            providers: [
                {
                    provide: BlockUIHttpModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIHttpSettings,
                    useFactory: provideSettingsInstance,
                    deps: [BlockUIHttpModuleSettings]
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BlockUIInterceptor,
                    multi: true
                }
            ]
        };
    }
};
BlockUIHttpModule = BlockUIHttpModule_1 = __decorate([
    NgModule({
        imports: [BlockUIModule]
    })
], BlockUIHttpModule);
export { BlockUIHttpModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1ibG9jay11aS9odHRwLyIsInNvdXJjZXMiOlsiYmxvY2stdWktaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBZ0IsTUFBTSxhQUFhLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHakUsMkJBQTJCO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLElBQUksY0FBYyxDQUFTLDJCQUEyQixDQUFDLENBQUM7QUFFakcsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFFBQXNCO0lBQzVELE9BQU87UUFDTCxRQUFRLGtCQUNOLDBCQUEwQixFQUFFLElBQUksSUFDN0IsUUFBUSxDQUNaO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFLRCxJQUFhLGlCQUFpQix5QkFBOUIsTUFBYSxpQkFBaUI7SUFDNUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUF5QixFQUFFO1FBQ3hDLE9BQU87WUFDTCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsUUFBUTtpQkFDbkI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsVUFBVSxFQUFFLHVCQUF1QjtvQkFDbkMsSUFBSSxFQUFFLENBQUMseUJBQXlCLENBQUM7aUJBQ2xDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUF0QlksaUJBQWlCO0lBSDdCLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQztLQUN6QixDQUFDO0dBQ1csaUJBQWlCLENBc0I3QjtTQXRCWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQmxvY2tVSU1vZHVsZSwgSHR0cFNldHRpbmdzIH0gZnJvbSAnbmctYmxvY2stdWknO1xuaW1wb3J0IHsgQmxvY2tVSUh0dHBTZXR0aW5ncyB9IGZyb20gJy4vYmxvY2stdWktaHR0cC1zZXR0aW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IEJsb2NrVUlJbnRlcmNlcHRvciB9IGZyb20gJy4vYmxvY2stdWktaHR0cC5pbnRlcmNlcHRvcic7XG5cblxuLy8gTmVlZGVkIGZvciBBT1QgY29tcGlsaW5nXG5leHBvcnQgY29uc3QgQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5ncyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlU2V0dGluZ3NJbnN0YW5jZShzZXR0aW5nczogSHR0cFNldHRpbmdzKTogQmxvY2tVSUh0dHBTZXR0aW5ncyB7XG4gIHJldHVybiB7XG4gICAgc2V0dGluZ3M6IHtcbiAgICAgIGJsb2NrQWxsUmVxdWVzdHNJblByb2dyZXNzOiB0cnVlLFxuICAgICAgLi4uc2V0dGluZ3NcbiAgICB9XG4gIH07XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtCbG9ja1VJTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBCbG9ja1VJSHR0cE1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KHNldHRpbmdzOiBIdHRwU2V0dGluZ3MgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QmxvY2tVSUh0dHBNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEJsb2NrVUlIdHRwTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzLFxuICAgICAgICAgIHVzZVZhbHVlOiBzZXR0aW5nc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQmxvY2tVSUh0dHBTZXR0aW5ncyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBwcm92aWRlU2V0dGluZ3NJbnN0YW5jZSxcbiAgICAgICAgICBkZXBzOiBbQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5nc11cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgICAgIHVzZUNsYXNzOiBCbG9ja1VJSW50ZXJjZXB0b3IsXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==