import { __decorate } from "tslib";
import { Directive, Input, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver, ViewContainerRef, TemplateRef, Renderer2, EmbeddedViewRef } from '@angular/core';
import { BlockUIContentComponent } from '../components/block-ui-content/block-ui-content.component';
import { BlockUIInstanceService } from '../services/block-ui-instance.service';
import { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';
import { BlockUIService } from '../services/block-ui.service';
let BlockUIDirective = class BlockUIDirective {
    constructor(blockUIService, blockUIInstanceService, viewRef, templateRef, renderer, componentFactoryResolver) {
        this.blockUIService = blockUIService;
        this.blockUIInstanceService = blockUIInstanceService;
        this.viewRef = viewRef;
        this.templateRef = templateRef;
        this.renderer = renderer;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    set blockUI(name) { this.blockTarget = name; }
    ;
    set blockUIMessage(message) { this.message = message; }
    ;
    set blockUITemplate(template) { this.template = template; }
    ;
    set blockUIDelayStart(delayStart) {
        this.delayStart = delayStart ? Number(delayStart) : null;
    }
    ;
    set blockUIDelayStop(delayStop) {
        this.delayStop = delayStop ? Number(delayStop) : null;
    }
    ;
    ngOnInit() {
        try {
            this.viewRef.createEmbeddedView(this.templateRef);
            const parentElement = this.getParentElement();
            if (parentElement && !this.isComponentInTemplate(parentElement)) {
                this.renderer.addClass(parentElement, 'block-ui__element');
                this.blockUIComponentRef = this.createComponent();
                let blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);
                if (blockUIContent) {
                    const settings = this.blockUIInstanceService.getSettings();
                    parentElement.appendChild(blockUIContent);
                    this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';
                    this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;
                    if (this.message)
                        this.blockUIComponentRef.instance.defaultMessage = this.message;
                    if (this.delayStart)
                        this.blockUIComponentRef.instance.delayStart = this.delayStart;
                    if (this.delayStop)
                        this.blockUIComponentRef.instance.delayStop = this.delayStop;
                    if (this.template || settings.template)
                        this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;
                }
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    }
    isComponentInTemplate(element) {
        // Needed because of https://github.com/microsoft/TypeScript/issues/26235
        const targetElement = element || {};
        let { children } = targetElement;
        children = Array.from(children || []).reverse();
        return children.some((el) => el && el.localName === 'block-ui');
    }
    getParentElement() {
        const embeddedView = this.viewRef.get(0);
        return embeddedView.rootNodes[0];
    }
    // Needed for IE (#17)
    findContentNode(element) {
        const nextSibling = element.nextSibling || {};
        const previousSibling = element.previousSibling || {};
        return [
            nextSibling,
            nextSibling.nextSibling,
            previousSibling,
            previousSibling.previousSibling
        ].find((e) => e && e.localName === 'block-ui-content');
    }
    createComponent() {
        const resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);
        return this.viewRef.createComponent(resolvedBlockUIComponent);
    }
    ngOnDestroy() {
        if (this.blockTarget) {
            this.blockUIService.reset(this.blockTarget);
        }
    }
};
BlockUIDirective.ctorParameters = () => [
    { type: BlockUIService },
    { type: BlockUIInstanceService },
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: Renderer2 },
    { type: ComponentFactoryResolver }
];
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUI", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUIMessage", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUITemplate", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUIDelayStart", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUIDelayStop", null);
BlockUIDirective = __decorate([
    Directive({ selector: '[blockUI]' })
], BlockUIDirective);
export { BlockUIDirective };
//# sourceMappingURL=data:application/json;base64,