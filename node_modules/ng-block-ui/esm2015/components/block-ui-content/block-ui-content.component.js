import { __decorate } from "tslib";
import { Component, OnInit, AfterViewInit, AfterViewChecked, OnDestroy, ViewEncapsulation, Input, ViewChild, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
import { BlockUIActions } from '../../constants/block-ui-actions.constant';
import { BlockUIDefaultName } from '../../constants/block-ui-default-name.constant';
import { styles } from './block-ui-content.component.style';
import { template } from './block-ui-content.component.template';
let BlockUIContentComponent = class BlockUIContentComponent {
    constructor(blockUI, resolver, changeDetectionRef) {
        this.blockUI = blockUI;
        this.resolver = resolver;
        this.changeDetectionRef = changeDetectionRef;
        this.name = BlockUIDefaultName;
        this.defaultBlockState = {
            startTimeouts: [],
            stopTimeouts: [],
            updateTimeouts: [],
            blockCount: 0,
            startCallCount: 0,
            stopCallCount: 0
        };
        this.state = Object.assign({}, this.defaultBlockState);
    }
    ngOnInit() {
        this.settings = this.blockUI.getSettings();
        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());
    }
    ngAfterViewInit() {
        try {
            if (!this.templateCmp) {
                return false;
            }
            if (this.templateCmp instanceof TemplateRef) {
                this.templateOutlet.createEmbeddedView(this.templateCmp);
            }
            else {
                const templateComp = this.resolver.resolveComponentFactory(this.templateCmp);
                this.templateCompRef = this.templateOutlet.createComponent(templateComp);
                this.updateBlockTemplate(this.message);
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    }
    ngAfterViewChecked() {
        this.detectChanges();
    }
    subscribeToBlockUI(blockUI$) {
        return blockUI$.subscribe(event => this.onDispatchedEvent(event));
    }
    onDispatchedEvent(event) {
        switch (event.action) {
            case BlockUIActions.START:
                this.onStart(event);
                break;
            case BlockUIActions.STOP:
                this.onStop(event);
                break;
            case BlockUIActions.UPDATE:
                this.onUpdate(event);
                break;
            case BlockUIActions.RESET:
                this.onReset(event);
                break;
            case BlockUIActions.RESET_GLOBAL:
                this.resetState();
                break;
            case BlockUIActions.UNSUBSCRIBE:
                this.onStop(event);
                this.onUnsubscribe(event.name);
                break;
        }
    }
    onStart({ name, message }) {
        if (name === this.name) {
            const delay = this.delayStart || this.settings.delayStart || 0;
            this.state.startCallCount += 1;
            const startTimeout = setTimeout(() => {
                this.state.blockCount += 1;
                this.showBlock(message);
                this.updateInstanceBlockCount();
            }, delay);
            this.state.startTimeouts.push(startTimeout);
        }
    }
    onStop({ name }) {
        if (name === this.name) {
            const stopCount = this.state.stopCallCount + 1;
            if (this.state.startCallCount - stopCount >= 0) {
                const delay = this.delayStop || this.settings.delayStop || 0;
                this.state.stopCallCount = stopCount;
                const stopTimeout = setTimeout(() => {
                    this.state.blockCount -= 1;
                    this.updateInstanceBlockCount();
                    this.detectChanges();
                }, delay);
                this.state.stopTimeouts.push(stopTimeout);
            }
        }
    }
    onUpdate({ name, message }) {
        if (name === this.name) {
            const delay = this.delayStart || this.settings.delayStart || 0;
            clearTimeout(this.state.updateTimeouts[0]);
            const updateTimeout = setTimeout(() => {
                this.updateMessage(message);
            }, delay);
            this.state.updateTimeouts.push(updateTimeout);
        }
    }
    onReset({ name }) {
        if (name === this.name) {
            this.resetState();
        }
    }
    updateMessage(message) {
        this.showBlock(message);
    }
    showBlock(message) {
        this.message = message || this.defaultMessage || this.settings.message;
        this.updateBlockTemplate(this.message);
        this.detectChanges();
    }
    updateBlockTemplate(msg) {
        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {
            this.templateCompRef.instance.message = msg;
        }
    }
    resetState() {
        [
            ...this.state.startTimeouts,
            ...this.state.stopTimeouts,
            ...this.state.updateTimeouts
        ].forEach(clearTimeout);
        this.state = Object.assign({}, this.defaultBlockState);
        this.updateInstanceBlockCount();
        this.detectChanges();
    }
    onUnsubscribe(name) {
        if (this.blockUISubscription && name === this.name) {
            this.blockUISubscription.unsubscribe();
        }
    }
    updateInstanceBlockCount() {
        if (this.blockUI.blockUIInstances[this.name]) {
            const { blockCount } = this.state;
            this.blockUI.blockUIInstances[this.name].blockCount = blockCount;
        }
    }
    detectChanges() {
        if (!this.changeDetectionRef['destroyed']) {
            this.changeDetectionRef.detectChanges();
        }
    }
    ngOnDestroy() {
        this.resetState();
        this.onUnsubscribe(this.name);
        this.blockUI.clearInstance(this.name);
    }
};
BlockUIContentComponent.ctorParameters = () => [
    { type: BlockUIInstanceService },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], BlockUIContentComponent.prototype, "name", void 0);
__decorate([
    Input()
], BlockUIContentComponent.prototype, "delayStart", void 0);
__decorate([
    Input()
], BlockUIContentComponent.prototype, "delayStop", void 0);
__decorate([
    Input('message')
], BlockUIContentComponent.prototype, "defaultMessage", void 0);
__decorate([
    Input('template')
], BlockUIContentComponent.prototype, "templateCmp", void 0);
__decorate([
    ViewChild('templateOutlet', { read: ViewContainerRef })
], BlockUIContentComponent.prototype, "templateOutlet", void 0);
BlockUIContentComponent = __decorate([
    Component({
        selector: 'block-ui-content',
        template: template,
        encapsulation: ViewEncapsulation.None,
        styles: [styles]
    })
], BlockUIContentComponent);
export { BlockUIContentComponent };
//# sourceMappingURL=data:application/json;base64,