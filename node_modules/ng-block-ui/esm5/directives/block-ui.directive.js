import { __decorate } from "tslib";
import { Directive, Input, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver, ViewContainerRef, TemplateRef, Renderer2, EmbeddedViewRef } from '@angular/core';
import { BlockUIContentComponent } from '../components/block-ui-content/block-ui-content.component';
import { BlockUIInstanceService } from '../services/block-ui-instance.service';
import { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';
import { BlockUIService } from '../services/block-ui.service';
var BlockUIDirective = /** @class */ (function () {
    function BlockUIDirective(blockUIService, blockUIInstanceService, viewRef, templateRef, renderer, componentFactoryResolver) {
        this.blockUIService = blockUIService;
        this.blockUIInstanceService = blockUIInstanceService;
        this.viewRef = viewRef;
        this.templateRef = templateRef;
        this.renderer = renderer;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    Object.defineProperty(BlockUIDirective.prototype, "blockUI", {
        set: function (name) { this.blockTarget = name; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIMessage", {
        set: function (message) { this.message = message; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUITemplate", {
        set: function (template) { this.template = template; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIDelayStart", {
        set: function (delayStart) {
            this.delayStart = delayStart ? Number(delayStart) : null;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIDelayStop", {
        set: function (delayStop) {
            this.delayStop = delayStop ? Number(delayStop) : null;
        },
        enumerable: true,
        configurable: true
    });
    ;
    BlockUIDirective.prototype.ngOnInit = function () {
        try {
            this.viewRef.createEmbeddedView(this.templateRef);
            var parentElement = this.getParentElement();
            if (parentElement && !this.isComponentInTemplate(parentElement)) {
                this.renderer.addClass(parentElement, 'block-ui__element');
                this.blockUIComponentRef = this.createComponent();
                var blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);
                if (blockUIContent) {
                    var settings = this.blockUIInstanceService.getSettings();
                    parentElement.appendChild(blockUIContent);
                    this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';
                    this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;
                    if (this.message)
                        this.blockUIComponentRef.instance.defaultMessage = this.message;
                    if (this.delayStart)
                        this.blockUIComponentRef.instance.delayStart = this.delayStart;
                    if (this.delayStop)
                        this.blockUIComponentRef.instance.delayStop = this.delayStop;
                    if (this.template || settings.template)
                        this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;
                }
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    };
    BlockUIDirective.prototype.isComponentInTemplate = function (element) {
        // Needed because of https://github.com/microsoft/TypeScript/issues/26235
        var targetElement = element || {};
        var children = targetElement.children;
        children = Array.from(children || []).reverse();
        return children.some(function (el) { return el && el.localName === 'block-ui'; });
    };
    BlockUIDirective.prototype.getParentElement = function () {
        var embeddedView = this.viewRef.get(0);
        return embeddedView.rootNodes[0];
    };
    // Needed for IE (#17)
    BlockUIDirective.prototype.findContentNode = function (element) {
        var nextSibling = element.nextSibling || {};
        var previousSibling = element.previousSibling || {};
        return [
            nextSibling,
            nextSibling.nextSibling,
            previousSibling,
            previousSibling.previousSibling
        ].find(function (e) { return e && e.localName === 'block-ui-content'; });
    };
    BlockUIDirective.prototype.createComponent = function () {
        var resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);
        return this.viewRef.createComponent(resolvedBlockUIComponent);
    };
    BlockUIDirective.prototype.ngOnDestroy = function () {
        if (this.blockTarget) {
            this.blockUIService.reset(this.blockTarget);
        }
    };
    BlockUIDirective.ctorParameters = function () { return [
        { type: BlockUIService },
        { type: BlockUIInstanceService },
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: Renderer2 },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUI", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUIMessage", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUITemplate", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUIDelayStart", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUIDelayStop", null);
    BlockUIDirective = __decorate([
        Directive({ selector: '[blockUI]' })
    ], BlockUIDirective);
    return BlockUIDirective;
}());
export { BlockUIDirective };
//# sourceMappingURL=data:application/json;base64,