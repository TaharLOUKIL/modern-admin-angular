import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BlockUIActions } from '../constants/block-ui-actions.constant';
import { BlockUIInstanceService } from './block-ui-instance.service';
var BlockUIService = /** @class */ (function () {
    function BlockUIService(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
        this.globalDispatch = this.blockUIInstance.decorate();
    }
    /**
    * Starts blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.start = function (target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    };
    /**
    * Stops blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.stop = function (target) {
        this.dispatch(target, BlockUIActions.STOP);
    };
    /**
    * Reset blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.reset = function (target) {
        this.dispatch(target, BlockUIActions.RESET);
    };
    /**
    * Reset blocking for all BlockUI instances
    */
    BlockUIService.prototype.resetGlobal = function () {
        this.globalDispatch.resetGlobal();
    };
    /**
    * Updates message for given BlockUI instance or instances
    */
    BlockUIService.prototype.update = function (target, message) {
        this.dispatch(target, BlockUIActions.UPDATE, message);
    };
    /**
    * Unsubscribes for given BlockUI instance or instances
    */
    BlockUIService.prototype.unsubscribe = function (target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    };
    /**
    * Checks if BlockUI is actively blocking
    */
    BlockUIService.prototype.isActive = function (target) {
        if (target === void 0) { target = null; }
        var targets = target ? this.toArray(target) : null;
        var instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some(function (key) {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    };
    BlockUIService.prototype.dispatch = function (target, type, message) {
        var _this = this;
        if (target === void 0) { target = []; }
        var instances = this.toArray(target);
        instances.forEach(function (i) { return _this.blockUIInstance.decorate(i)[type](message); });
    };
    BlockUIService.prototype.toArray = function (target) {
        if (target === void 0) { target = []; }
        return typeof target === 'string' ? [target] : target;
    };
    BlockUIService.ctorParameters = function () { return [
        { type: BlockUIInstanceService }
    ]; };
    BlockUIService = __decorate([
        Injectable()
    ], BlockUIService);
    return BlockUIService;
}());
export { BlockUIService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJsb2NrLXVpLyIsInNvdXJjZXMiOlsic2VydmljZXMvYmxvY2stdWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFLckU7SUFHRSx3QkFDVSxlQUF1QztRQUF2QyxvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUFIakQsbUJBQWMsR0FBYyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBSXhELENBQUM7SUFFTDs7TUFFRTtJQUNGLDhCQUFLLEdBQUwsVUFBTSxNQUF5QixFQUFFLE9BQWE7UUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O01BRUU7SUFDRiw2QkFBSSxHQUFKLFVBQUssTUFBeUI7UUFDNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7TUFFRTtJQUNGLDhCQUFLLEdBQUwsVUFBTSxNQUF5QjtRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOztNQUVFO0lBQ0Ysb0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOztNQUVFO0lBQ0YsK0JBQU0sR0FBTixVQUFPLE1BQXlCLEVBQUUsT0FBWTtRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7TUFFRTtJQUNGLG9DQUFXLEdBQVgsVUFBWSxNQUF5QjtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOztNQUVFO0lBQ0YsaUNBQVEsR0FBUixVQUFTLE1BQWdDO1FBQWhDLHVCQUFBLEVBQUEsYUFBZ0M7UUFDdkMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckQsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUV4RCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBVztZQUM3QyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQzthQUNoQztZQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDOUUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8saUNBQVEsR0FBaEIsVUFBaUIsTUFBOEIsRUFBRSxJQUFZLEVBQUUsT0FBYTtRQUE1RSxpQkFHQztRQUhnQix1QkFBQSxFQUFBLFdBQThCO1FBQzdDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUEvQyxDQUErQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVPLGdDQUFPLEdBQWYsVUFBZ0IsTUFBOEI7UUFBOUIsdUJBQUEsRUFBQSxXQUE4QjtRQUM1QyxPQUFPLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3hELENBQUM7O2dCQXBFMEIsc0JBQXNCOztJQUp0QyxjQUFjO1FBRDFCLFVBQVUsRUFBRTtPQUNBLGNBQWMsQ0F5RTFCO0lBQUQscUJBQUM7Q0FBQSxBQXpFRCxJQXlFQztTQXpFWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmxvY2tVSUFjdGlvbnMgfSBmcm9tICcuLi9jb25zdGFudHMvYmxvY2stdWktYWN0aW9ucy5jb25zdGFudCc7XG5pbXBvcnQgeyBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlIH0gZnJvbSAnLi9ibG9jay11aS1pbnN0YW5jZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5nQmxvY2tVSSB9IGZyb20gJy4uL21vZGVscy9ibG9jay11aS5tb2RlbCc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlTZXJ2aWNlIHtcbiAgZ2xvYmFsRGlzcGF0Y2g6IE5nQmxvY2tVSSA9IHRoaXMuYmxvY2tVSUluc3RhbmNlLmRlY29yYXRlKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBibG9ja1VJSW5zdGFuY2U6IEJsb2NrVUlJbnN0YW5jZVNlcnZpY2VcbiAgKSB7IH1cblxuICAvKipcbiAgKiBTdGFydHMgYmxvY2tpbmcgZm9yIGdpdmVuIEJsb2NrVUkgaW5zdGFuY2Ugb3IgaW5zdGFuY2VzXG4gICovXG4gIHN0YXJ0KHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10sIG1lc3NhZ2U/OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoKHRhcmdldCwgQmxvY2tVSUFjdGlvbnMuU1RBUlQsIG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICogU3RvcHMgYmxvY2tpbmcgZm9yIGdpdmVuIEJsb2NrVUkgaW5zdGFuY2Ugb3IgaW5zdGFuY2VzXG4gICovXG4gIHN0b3AodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2godGFyZ2V0LCBCbG9ja1VJQWN0aW9ucy5TVE9QKTtcbiAgfVxuXG4gIC8qKlxuICAqIFJlc2V0IGJsb2NraW5nIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICByZXNldCh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlJFU0VUKTtcbiAgfVxuXG4gIC8qKlxuICAqIFJlc2V0IGJsb2NraW5nIGZvciBhbGwgQmxvY2tVSSBpbnN0YW5jZXNcbiAgKi9cbiAgcmVzZXRHbG9iYWwoKTogdm9pZCB7XG4gICAgdGhpcy5nbG9iYWxEaXNwYXRjaC5yZXNldEdsb2JhbCgpO1xuICB9XG5cbiAgLyoqXG4gICogVXBkYXRlcyBtZXNzYWdlIGZvciBnaXZlbiBCbG9ja1VJIGluc3RhbmNlIG9yIGluc3RhbmNlc1xuICAqL1xuICB1cGRhdGUodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSwgbWVzc2FnZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5kaXNwYXRjaCh0YXJnZXQsIEJsb2NrVUlBY3Rpb25zLlVQREFURSwgbWVzc2FnZSk7XG4gIH1cblxuICAvKipcbiAgKiBVbnN1YnNjcmliZXMgZm9yIGdpdmVuIEJsb2NrVUkgaW5zdGFuY2Ugb3IgaW5zdGFuY2VzXG4gICovXG4gIHVuc3Vic2NyaWJlKHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10pOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoKHRhcmdldCwgQmxvY2tVSUFjdGlvbnMuVU5TVUJTQ1JJQkUpO1xuICB9XG5cbiAgLyoqXG4gICogQ2hlY2tzIGlmIEJsb2NrVUkgaXMgYWN0aXZlbHkgYmxvY2tpbmdcbiAgKi9cbiAgaXNBY3RpdmUodGFyZ2V0OiBzdHJpbmcgfCBzdHJpbmdbXSA9IG51bGwpOiBib29sZWFuIHtcbiAgICBjb25zdCB0YXJnZXRzID0gdGFyZ2V0ID8gdGhpcy50b0FycmF5KHRhcmdldCkgOiBudWxsO1xuICAgIGNvbnN0IGluc3RhbmNlcyA9IHRoaXMuYmxvY2tVSUluc3RhbmNlLmJsb2NrVUlJbnN0YW5jZXM7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoaW5zdGFuY2VzKS5zb21lKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKCF0YXJnZXRzKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZXNba2V5XS5pc0FjdGl2ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldHMuaW5kZXhPZihpbnN0YW5jZXNba2V5XS5uYW1lKSA+PSAwICYmIGluc3RhbmNlc1trZXldLmlzQWN0aXZlO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaCh0YXJnZXQ6IHN0cmluZyB8IHN0cmluZ1tdID0gW10sIHR5cGU6IHN0cmluZywgbWVzc2FnZT86IGFueSkge1xuICAgIGNvbnN0IGluc3RhbmNlcyA9IHRoaXMudG9BcnJheSh0YXJnZXQpO1xuICAgIGluc3RhbmNlcy5mb3JFYWNoKGkgPT4gdGhpcy5ibG9ja1VJSW5zdGFuY2UuZGVjb3JhdGUoaSlbdHlwZV0obWVzc2FnZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b0FycmF5KHRhcmdldDogc3RyaW5nIHwgc3RyaW5nW10gPSBbXSkge1xuICAgIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IFt0YXJnZXRdIDogdGFyZ2V0O1xuICB9XG59XG4iXX0=