import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
export declare type BlockState = {
    startTimeouts: Array<any>;
    stopTimeouts: Array<any>;
    updateTimeouts: Array<any>;
    blockCount: number;
    startCallCount: number;
    stopCallCount: number;
};
export declare class BlockUIContentComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {
    private blockUI;
    private resolver;
    private changeDetectionRef;
    name: string;
    delayStart: number;
    delayStop: number;
    defaultMessage: string;
    templateCmp: any;
    templateOutlet: ViewContainerRef;
    defaultBlockState: BlockState;
    state: BlockState;
    className: string;
    templateCompRef: ComponentRef<{
        message?: any;
    }> | TemplateRef<{}>;
    message: any;
    private blockUISubscription;
    private settings;
    constructor(blockUI: BlockUIInstanceService, resolver: ComponentFactoryResolver, changeDetectionRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): boolean;
    ngAfterViewChecked(): void;
    private subscribeToBlockUI;
    private onDispatchedEvent;
    private onStart;
    private onStop;
    private onUpdate;
    private onReset;
    private updateMessage;
    private showBlock;
    private updateBlockTemplate;
    private resetState;
    private onUnsubscribe;
    private updateInstanceBlockCount;
    private detectChanges;
    ngOnDestroy(): void;
}
