import { __decorate } from 'tslib';
import { Injectable, Input, Component, ViewEncapsulation, TemplateRef, ComponentRef, ComponentFactoryResolver, ChangeDetectorRef, ViewChild, ViewContainerRef, Renderer2, Directive, InjectionToken, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReplaySubject } from 'rxjs';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["*"];
const _c1 = ["templateOutlet"];
function BlockUIContentComponent_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.message || ctx_r2.defaultMessage, " ");
} }
function BlockUIContentComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "div", 4);
    ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_div_1_div_2_Template, 2, 1, "div", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.message || ctx_r0.defaultMessage);
} }
function BlockUIContentComponent_2_ng_template_0_Template(rf, ctx) { }
function BlockUIContentComponent_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, BlockUIContentComponent_2_ng_template_0_Template, 0, 0, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
} }
const _c2 = function (a0) { return { "active": a0 }; };
class BlockUIActions {
}
BlockUIActions.START = 'start';
BlockUIActions.STOP = 'stop';
BlockUIActions.UPDATE = 'update';
BlockUIActions.RESET = 'reset';
BlockUIActions.RESET_GLOBAL = 'reset_global';
BlockUIActions.UNSUBSCRIBE = 'unsubscribe';

const BlockUIDefaultName = 'block-ui-main';

let BlockUIInstanceService = class BlockUIInstanceService {
    constructor() {
        this.blockUISettings = {};
        this.blockUIInstances = {};
        this.blockUISubject = new ReplaySubject(1);
        this.blockUIObservable = this.blockUISubject.asObservable();
        this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));
    }
    getSettings() {
        return this.blockUISettings;
    }
    updateSettings(settings = {}) {
        this.blockUISettings = Object.assign(Object.assign({}, this.blockUISettings), settings);
    }
    decorate(name = BlockUIDefaultName) {
        const blockUI = {
            name,
            isActive: false,
            blockCount: 0,
            start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),
            update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),
            stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),
            reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),
            resetGlobal: this.dispatch(this.blockUISubject, BlockUIActions.RESET_GLOBAL, name),
            unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)
        };
        this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;
        return blockUI;
    }
    observe() {
        return this.blockUIObservable;
    }
    clearInstance(instanceName) {
        this.dispatch(this.blockUISubject, BlockUIActions.RESET, instanceName);
    }
    blockUIMiddleware({ action, name }) {
        let isActive = null;
        switch (action) {
            case (BlockUIActions.START):
                isActive = true;
                break;
            case (BlockUIActions.STOP):
            case (BlockUIActions.RESET):
                isActive = false;
                break;
        }
        if (isActive !== null) {
            this.blockUIInstances[name].isActive = isActive;
        }
    }
    dispatch(subject, action, name = BlockUIDefaultName) {
        return (message) => {
            subject.next({
                name,
                action,
                message
            });
        };
    }
};
BlockUIInstanceService.ɵfac = function BlockUIInstanceService_Factory(t) { return new (t || BlockUIInstanceService)(); };
BlockUIInstanceService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BlockUIInstanceService, factory: function (t) { return BlockUIInstanceService.ɵfac(t); } });

let BlockUIComponent = class BlockUIComponent {
    constructor(blockUI) {
        this.blockUI = blockUI;
    }
    ngOnInit() {
        this.name = this.name || BlockUIDefaultName;
        this.template = this.template || this.blockUI.blockUISettings.template;
    }
};
BlockUIComponent.ɵfac = function BlockUIComponent_Factory(t) { return new (t || BlockUIComponent)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService)); };
BlockUIComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BlockUIComponent, selectors: [["block-ui"]], inputs: { name: "name", template: "template", message: "message", delayStart: "delayStart", delayStop: "delayStop" }, ngContentSelectors: _c0, decls: 2, vars: 5, consts: [[3, "name", "message", "template", "delayStart", "delayStop"]], template: function BlockUIComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelement(1, "block-ui-content", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("message", ctx.message)("template", ctx.template)("delayStart", ctx.delayStart)("delayStop", ctx.delayStop);
    } }, directives: function () { return [BlockUIContentComponent]; }, encapsulation: 2 });
BlockUIComponent.ctorParameters = () => [
    { type: BlockUIInstanceService }
];
__decorate([
    Input()
], BlockUIComponent.prototype, "name", void 0);
__decorate([
    Input()
], BlockUIComponent.prototype, "message", void 0);
__decorate([
    Input()
], BlockUIComponent.prototype, "delayStart", void 0);
__decorate([
    Input()
], BlockUIComponent.prototype, "delayStop", void 0);
__decorate([
    Input()
], BlockUIComponent.prototype, "template", void 0);

// Spinner style - https://github.com/lukehaas/css-loaders
const styles = `
.block-ui-wrapper {
  display: none;
  position: fixed;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  background: rgba(0, 0, 0, 0.70);
  z-index: 30000;
  cursor: wait;
}

.block-ui-wrapper.block-ui-wrapper--element {
  position: absolute;
}

.block-ui-wrapper.active {
  display: block;
}

.block-ui-wrapper.block-ui-main {
  position: fixed;
}

.block-ui-spinner,
.block-ui-template {
  position: absolute;
  top: 40%;
  margin: 0 auto;
  left: 0;
  right: 0;
  transform: translateY(-50%);
}

.block-ui-spinner > .message {
  font-size: 1.3em;
  text-align: center;
  color: #fff;
}

.block-ui__element {
  position: relative;
}

.loader,
.loader:after {
  border-radius: 50%;
  width: 10em;
  height: 10em;
}
.loader {
  margin: 7px auto;
  font-size: 5px;
  position: relative;
  text-indent: -9999em;
  border-top: 1.1em solid rgba(255, 255, 255, 0.2);
  border-right: 1.1em solid rgba(255, 255, 255, 0.2);
  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
  border-left: 1.1em solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}

@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
`;

const template = `
<div class="block-ui-wrapper {{name}} {{className}}" [ngClass]="{ 'active': state.blockCount > 0 }">
  <div class="block-ui-spinner" *ngIf="!templateCmp">
    <div class="loader"></div>
    <div *ngIf="message || defaultMessage" class="message">
      {{ message || defaultMessage }}
    </div>
  </div>
  <ng-template *ngIf="templateCmp" #templateOutlet></ng-template>
</div>
`;

let BlockUIContentComponent = class BlockUIContentComponent {
    constructor(blockUI, resolver, changeDetectionRef) {
        this.blockUI = blockUI;
        this.resolver = resolver;
        this.changeDetectionRef = changeDetectionRef;
        this.name = BlockUIDefaultName;
        this.defaultBlockState = {
            startTimeouts: [],
            stopTimeouts: [],
            updateTimeouts: [],
            blockCount: 0,
            startCallCount: 0,
            stopCallCount: 0
        };
        this.state = Object.assign({}, this.defaultBlockState);
    }
    ngOnInit() {
        this.settings = this.blockUI.getSettings();
        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());
    }
    ngAfterViewInit() {
        try {
            if (!this.templateCmp) {
                return false;
            }
            if (this.templateCmp instanceof TemplateRef) {
                this.templateOutlet.createEmbeddedView(this.templateCmp);
            }
            else {
                const templateComp = this.resolver.resolveComponentFactory(this.templateCmp);
                this.templateCompRef = this.templateOutlet.createComponent(templateComp);
                this.updateBlockTemplate(this.message);
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    }
    ngAfterViewChecked() {
        this.detectChanges();
    }
    subscribeToBlockUI(blockUI$) {
        return blockUI$.subscribe(event => this.onDispatchedEvent(event));
    }
    onDispatchedEvent(event) {
        switch (event.action) {
            case BlockUIActions.START:
                this.onStart(event);
                break;
            case BlockUIActions.STOP:
                this.onStop(event);
                break;
            case BlockUIActions.UPDATE:
                this.onUpdate(event);
                break;
            case BlockUIActions.RESET:
                this.onReset(event);
                break;
            case BlockUIActions.RESET_GLOBAL:
                this.resetState();
                break;
            case BlockUIActions.UNSUBSCRIBE:
                this.onStop(event);
                this.onUnsubscribe(event.name);
                break;
        }
    }
    onStart({ name, message }) {
        if (name === this.name) {
            const delay = this.delayStart || this.settings.delayStart || 0;
            this.state.startCallCount += 1;
            const startTimeout = setTimeout(() => {
                this.state.blockCount += 1;
                this.showBlock(message);
                this.updateInstanceBlockCount();
            }, delay);
            this.state.startTimeouts.push(startTimeout);
        }
    }
    onStop({ name }) {
        if (name === this.name) {
            const stopCount = this.state.stopCallCount + 1;
            if (this.state.startCallCount - stopCount >= 0) {
                const delay = this.delayStop || this.settings.delayStop || 0;
                this.state.stopCallCount = stopCount;
                const stopTimeout = setTimeout(() => {
                    this.state.blockCount -= 1;
                    this.updateInstanceBlockCount();
                    this.detectChanges();
                }, delay);
                this.state.stopTimeouts.push(stopTimeout);
            }
        }
    }
    onUpdate({ name, message }) {
        if (name === this.name) {
            const delay = this.delayStart || this.settings.delayStart || 0;
            clearTimeout(this.state.updateTimeouts[0]);
            const updateTimeout = setTimeout(() => {
                this.updateMessage(message);
            }, delay);
            this.state.updateTimeouts.push(updateTimeout);
        }
    }
    onReset({ name }) {
        if (name === this.name) {
            this.resetState();
        }
    }
    updateMessage(message) {
        this.showBlock(message);
    }
    showBlock(message) {
        this.message = message || this.defaultMessage || this.settings.message;
        this.updateBlockTemplate(this.message);
        this.detectChanges();
    }
    updateBlockTemplate(msg) {
        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {
            this.templateCompRef.instance.message = msg;
        }
    }
    resetState() {
        [
            ...this.state.startTimeouts,
            ...this.state.stopTimeouts,
            ...this.state.updateTimeouts
        ].forEach(clearTimeout);
        this.state = Object.assign({}, this.defaultBlockState);
        this.updateInstanceBlockCount();
        this.detectChanges();
    }
    onUnsubscribe(name) {
        if (this.blockUISubscription && name === this.name) {
            this.blockUISubscription.unsubscribe();
        }
    }
    updateInstanceBlockCount() {
        if (this.blockUI.blockUIInstances[this.name]) {
            const { blockCount } = this.state;
            this.blockUI.blockUIInstances[this.name].blockCount = blockCount;
        }
    }
    detectChanges() {
        if (!this.changeDetectionRef['destroyed']) {
            this.changeDetectionRef.detectChanges();
        }
    }
    ngOnDestroy() {
        this.resetState();
        this.onUnsubscribe(this.name);
        this.blockUI.clearInstance(this.name);
    }
};
BlockUIContentComponent.ɵfac = function BlockUIContentComponent_Factory(t) { return new (t || BlockUIContentComponent)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
BlockUIContentComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BlockUIContentComponent, selectors: [["block-ui-content"]], viewQuery: function BlockUIContentComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 5, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateOutlet = _t.first);
    } }, inputs: { name: "name", delayStart: "delayStart", delayStop: "delayStop", defaultMessage: ["message", "defaultMessage"], templateCmp: ["template", "templateCmp"] }, decls: 3, vars: 9, consts: [[3, "ngClass"], ["class", "block-ui-spinner", 4, "ngIf"], [4, "ngIf"], [1, "block-ui-spinner"], [1, "loader"], ["class", "message", 4, "ngIf"], [1, "message"], ["templateOutlet", ""]], template: function BlockUIContentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, BlockUIContentComponent_div_1_Template, 3, 1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_2_Template, 2, 0, undefined, 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate2("block-ui-wrapper ", ctx.name, " ", ctx.className, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c2, ctx.state.blockCount > 0));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.templateCmp);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.templateCmp);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf], styles: ["\n.block-ui-wrapper {\n  display: none;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.70);\n  z-index: 30000;\n  cursor: wait;\n}\n\n.block-ui-wrapper.block-ui-wrapper--element {\n  position: absolute;\n}\n\n.block-ui-wrapper.active {\n  display: block;\n}\n\n.block-ui-wrapper.block-ui-main {\n  position: fixed;\n}\n\n.block-ui-spinner,\n.block-ui-template {\n  position: absolute;\n  top: 40%;\n  margin: 0 auto;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n}\n\n.block-ui-spinner > .message {\n  font-size: 1.3em;\n  text-align: center;\n  color: #fff;\n}\n\n.block-ui__element {\n  position: relative;\n}\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 7px auto;\n  font-size: 5px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-left: 1.1em solid #ffffff;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n"], encapsulation: 2 });
BlockUIContentComponent.ctorParameters = () => [
    { type: BlockUIInstanceService },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], BlockUIContentComponent.prototype, "name", void 0);
__decorate([
    Input()
], BlockUIContentComponent.prototype, "delayStart", void 0);
__decorate([
    Input()
], BlockUIContentComponent.prototype, "delayStop", void 0);
__decorate([
    Input('message')
], BlockUIContentComponent.prototype, "defaultMessage", void 0);
__decorate([
    Input('template')
], BlockUIContentComponent.prototype, "templateCmp", void 0);
__decorate([
    ViewChild('templateOutlet', { read: ViewContainerRef })
], BlockUIContentComponent.prototype, "templateOutlet", void 0);

let BlockUIService = class BlockUIService {
    constructor(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
        this.globalDispatch = this.blockUIInstance.decorate();
    }
    /**
    * Starts blocking for given BlockUI instance or instances
    */
    start(target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    }
    /**
    * Stops blocking for given BlockUI instance or instances
    */
    stop(target) {
        this.dispatch(target, BlockUIActions.STOP);
    }
    /**
    * Reset blocking for given BlockUI instance or instances
    */
    reset(target) {
        this.dispatch(target, BlockUIActions.RESET);
    }
    /**
    * Reset blocking for all BlockUI instances
    */
    resetGlobal() {
        this.globalDispatch.resetGlobal();
    }
    /**
    * Updates message for given BlockUI instance or instances
    */
    update(target, message) {
        this.dispatch(target, BlockUIActions.UPDATE, message);
    }
    /**
    * Unsubscribes for given BlockUI instance or instances
    */
    unsubscribe(target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    }
    /**
    * Checks if BlockUI is actively blocking
    */
    isActive(target = null) {
        const targets = target ? this.toArray(target) : null;
        const instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some((key) => {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    }
    dispatch(target = [], type, message) {
        const instances = this.toArray(target);
        instances.forEach(i => this.blockUIInstance.decorate(i)[type](message));
    }
    toArray(target = []) {
        return typeof target === 'string' ? [target] : target;
    }
};
BlockUIService.ɵfac = function BlockUIService_Factory(t) { return new (t || BlockUIService)(ɵngcc0.ɵɵinject(BlockUIInstanceService)); };
BlockUIService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BlockUIService, factory: function (t) { return BlockUIService.ɵfac(t); } });
BlockUIService.ctorParameters = () => [
    { type: BlockUIInstanceService }
];

let BlockUIDirective = class BlockUIDirective {
    constructor(blockUIService, blockUIInstanceService, viewRef, templateRef, renderer, componentFactoryResolver) {
        this.blockUIService = blockUIService;
        this.blockUIInstanceService = blockUIInstanceService;
        this.viewRef = viewRef;
        this.templateRef = templateRef;
        this.renderer = renderer;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    set blockUI(name) { this.blockTarget = name; }
    ;
    set blockUIMessage(message) { this.message = message; }
    ;
    set blockUITemplate(template) { this.template = template; }
    ;
    set blockUIDelayStart(delayStart) {
        this.delayStart = delayStart ? Number(delayStart) : null;
    }
    ;
    set blockUIDelayStop(delayStop) {
        this.delayStop = delayStop ? Number(delayStop) : null;
    }
    ;
    ngOnInit() {
        try {
            this.viewRef.createEmbeddedView(this.templateRef);
            const parentElement = this.getParentElement();
            if (parentElement && !this.isComponentInTemplate(parentElement)) {
                this.renderer.addClass(parentElement, 'block-ui__element');
                this.blockUIComponentRef = this.createComponent();
                let blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);
                if (blockUIContent) {
                    const settings = this.blockUIInstanceService.getSettings();
                    parentElement.appendChild(blockUIContent);
                    this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';
                    this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;
                    if (this.message)
                        this.blockUIComponentRef.instance.defaultMessage = this.message;
                    if (this.delayStart)
                        this.blockUIComponentRef.instance.delayStart = this.delayStart;
                    if (this.delayStop)
                        this.blockUIComponentRef.instance.delayStop = this.delayStop;
                    if (this.template || settings.template)
                        this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;
                }
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    }
    isComponentInTemplate(element) {
        // Needed because of https://github.com/microsoft/TypeScript/issues/26235
        const targetElement = element || {};
        let { children } = targetElement;
        children = Array.from(children || []).reverse();
        return children.some((el) => el && el.localName === 'block-ui');
    }
    getParentElement() {
        const embeddedView = this.viewRef.get(0);
        return embeddedView.rootNodes[0];
    }
    // Needed for IE (#17)
    findContentNode(element) {
        const nextSibling = element.nextSibling || {};
        const previousSibling = element.previousSibling || {};
        return [
            nextSibling,
            nextSibling.nextSibling,
            previousSibling,
            previousSibling.previousSibling
        ].find((e) => e && e.localName === 'block-ui-content');
    }
    createComponent() {
        const resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);
        return this.viewRef.createComponent(resolvedBlockUIComponent);
    }
    ngOnDestroy() {
        if (this.blockTarget) {
            this.blockUIService.reset(this.blockTarget);
        }
    }
};
BlockUIDirective.ɵfac = function BlockUIDirective_Factory(t) { return new (t || BlockUIDirective)(ɵngcc0.ɵɵdirectiveInject(BlockUIService), ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
BlockUIDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BlockUIDirective, selectors: [["", "blockUI", ""]], inputs: { blockUI: "blockUI", blockUIMessage: "blockUIMessage", blockUITemplate: "blockUITemplate", blockUIDelayStart: "blockUIDelayStart", blockUIDelayStop: "blockUIDelayStop" } });
BlockUIDirective.ctorParameters = () => [
    { type: BlockUIService },
    { type: BlockUIInstanceService },
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: Renderer2 },
    { type: ComponentFactoryResolver }
];
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUI", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUIMessage", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUITemplate", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUIDelayStart", null);
__decorate([
    Input()
], BlockUIDirective.prototype, "blockUIDelayStop", null);

var BlockUIModule_1;
const BlockUIServiceInstance = new BlockUIInstanceService();
// Needed for AOT compiling
const BlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');
function provideInstance(settings) {
    BlockUIServiceInstance.updateSettings(settings);
    return BlockUIServiceInstance;
}
let BlockUIModule = BlockUIModule_1 = class BlockUIModule {
    static forRoot(settings = {}) {
        return {
            ngModule: BlockUIModule_1,
            providers: [
                {
                    provide: BlockUIModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIInstanceService,
                    useFactory: provideInstance,
                    deps: [BlockUIModuleSettings]
                },
                BlockUIService
            ]
        };
    }
};
BlockUIModule.ɵfac = function BlockUIModule_Factory(t) { return new (t || BlockUIModule)(); };
BlockUIModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: BlockUIModule });
BlockUIModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIInstanceService, [{
        type: Injectable
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIComponent, [{
        type: Component,
        args: [{
                selector: 'block-ui',
                template: `
    <ng-content></ng-content>
    <block-ui-content
      [name]="name"
      [message]="message"
      [template]="template"
      [delayStart]="delayStart"
      [delayStop]="delayStop"
    >
    </block-ui-content>
  `,
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: BlockUIInstanceService }]; }, { name: [{
            type: Input
        }], template: [{
            type: Input
        }], message: [{
            type: Input
        }], delayStart: [{
            type: Input
        }], delayStop: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIContentComponent, [{
        type: Component,
        args: [{
                selector: 'block-ui-content',
                template: template,
                encapsulation: ViewEncapsulation.None,
                styles: [styles]
            }]
    }], function () { return [{ type: BlockUIInstanceService }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], delayStart: [{
            type: Input
        }], delayStop: [{
            type: Input
        }], defaultMessage: [{
            type: Input,
            args: ['message']
        }], templateCmp: [{
            type: Input,
            args: ['template']
        }], templateOutlet: [{
            type: ViewChild,
            args: ['templateOutlet', { read: ViewContainerRef }]
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIService, [{
        type: Injectable
    }], function () { return [{ type: BlockUIInstanceService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIDirective, [{
        type: Directive,
        args: [{ selector: '[blockUI]' }]
    }], function () { return [{ type: BlockUIService }, { type: BlockUIInstanceService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { blockUI: [{
            type: Input
        }], blockUIMessage: [{
            type: Input
        }], blockUITemplate: [{
            type: Input
        }], blockUIDelayStart: [{
            type: Input
        }], blockUIDelayStop: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                entryComponents: [
                    BlockUIComponent,
                    BlockUIContentComponent
                ],
                declarations: [
                    BlockUIComponent,
                    BlockUIDirective,
                    BlockUIContentComponent
                ],
                exports: [
                    BlockUIComponent,
                    BlockUIDirective,
                    BlockUIContentComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIModule, { declarations: function () { return [BlockUIComponent, BlockUIDirective, BlockUIContentComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [BlockUIComponent, BlockUIDirective, BlockUIContentComponent]; } }); })();

let blockInstanceGuid = 1;
function BlockUI(blockName, settings = {}) {
    if (!settings.scopeToInstance) {
        return function (target, propertyKey) {
            target[propertyKey] = BlockUIServiceInstance.decorate(blockName);
        };
    }
    return function (target, key) {
        const secret = `_${key}-block-ui`;
        Object.defineProperty(target, key, {
            get: function () {
                if (this[secret]) {
                    return this[secret];
                }
                const instanceName = `${blockName}-${blockInstanceGuid++}`;
                this[secret] = BlockUIServiceInstance.decorate(instanceName);
                return this[secret];
            },
            set: function (value) {
                this[secret] = value;
            },
        });
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { BlockUIDefaultName as BLOCKUI_DEFAULT, BlockUI, BlockUIComponent, BlockUIContentComponent, BlockUIModule, BlockUIService, BlockUIModuleSettings as ɵa, provideInstance as ɵb, BlockUIInstanceService as ɵc, template as ɵd, styles as ɵe, BlockUIDirective as ɵf };

//# sourceMappingURL=ng-block-ui.js.map