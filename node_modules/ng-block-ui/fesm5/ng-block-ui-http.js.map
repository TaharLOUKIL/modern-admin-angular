{"version":3,"file":"ng-block-ui-http.js","sources":["ng://ng-block-ui/http/block-ui-http-settings.service.ts","ng://ng-block-ui/http/block-ui-http.interceptor.ts","ng://ng-block-ui/http/block-ui-http.module.ts","ng://ng-block-ui/http/ng-block-ui-http.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private activeHttpRequests: number;\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private blockUIHttpSettings: BlockUIHttpSettings\n  ) {\n    this.activeHttpRequests = 0;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active: boolean = false;\n\n    if (this.shouldBlock(request)) {\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          if (this.shouldBlock(request)) {\n            const { blockAllRequestsInProgress } = this.blockUIHttpSettings.settings;\n            const method: string = blockAllRequestsInProgress ? 'stop' : 'reset';\n            this.blockUIService[method](BLOCKUI_DEFAULT);\n          }\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const { settings } = this.blockUIHttpSettings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return {\n    settings: {\n      blockAllRequestsInProgress: true,\n      ...settings\n    }\n  };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  static forRoot(settings: HttpSettings = {}): ModuleWithProviders<BlockUIHttpModule> {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BlockUIHttpSettings as Éµc} from './block-ui-http-settings.service';\nexport {BlockUIInterceptor as Éµd} from './block-ui-http.interceptor';\nexport {BlockUIHttpModuleSettings as Éµa,provideSettingsInstance as Éµb} from './block-ui-http.module';"],"names":[],"mappings":";;;;;;;IAIA;QACE,aAAQ,GAAiB,EAAE,CAAC;KAC7B;IAFY,mBAAmB;QAD/B,UAAU,EAAE;OACA,mBAAmB,CAE/B;IAAD,0BAAC;CAFD;;;ICYE,4BACU,cAA8B,EAC9B,mBAAwC;QADxC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAqB;QAEhD,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;KAC7B;IAED,sCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAAtD,iBAiBC;QAhBC,IAAI,MAAM,GAAY,KAAK,CAAC;QAE5B,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;YAC7B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;aACxB,IAAI,CACH,QAAQ,CAAC;YACP,IAAI,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;gBACrB,IAAA,0FAA0B,CAAuC;gBACzE,IAAM,MAAM,GAAW,0BAA0B,GAAG,MAAM,GAAG,OAAO,CAAC;gBACrE,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC;aAC9C;SACF,CAAC,CACH,CAAC;KACL;IAED,wCAAW,GAAX,UAAY,OAAyB;QAC3B,IAAA,uBAAM,EAAE,qCAAa,CAAa;QAClC,IAAA,4CAAQ,CAA8B;QAC9C,IAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,IAAI,EAAE,CAAC;QAErD,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,UAAC,CAAM;YACjC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE;gBAC1B,OAAO,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aACvE;iBAAM,IAAI,OAAO,CAAC,KAAK,UAAU,EAAE;gBAClC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;aACnB;YAED,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC9B,CAAC,CAAC;KACJ;;gBAvCyB,cAAc;gBACT,mBAAmB;;IALvC,kBAAkB;QAD9B,UAAU,EAAE;OACA,kBAAkB,CA4C9B;IAAD,yBAAC;CA5CD;;ACNA;IACa,yBAAyB,GAAG,IAAI,cAAc,CAAS,2BAA2B,EAAE;SAEjF,uBAAuB,CAAC,QAAsB;IAC5D,OAAO;QACL,QAAQ,aACN,0BAA0B,EAAE,IAAI,IAC7B,QAAQ,CACZ;KACF,CAAC;AACJ,CAAC;;IAKD;KAsBC;0BAtBY,iBAAiB;IACrB,yBAAO,GAAd,UAAe,QAA2B;QAA3B,yBAAA,EAAA,aAA2B;QACxC,OAAO;YACL,QAAQ,EAAE,mBAAiB;YAC3B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,yBAAyB;oBAClC,QAAQ,EAAE,QAAQ;iBACnB;gBACD;oBACE,OAAO,EAAE,mBAAmB;oBAC5B,UAAU,EAAE,uBAAuB;oBACnC,IAAI,EAAE,CAAC,yBAAyB,CAAC;iBAClC;gBACD;oBACE,OAAO,EAAE,iBAAiB;oBAC1B,QAAQ,EAAE,kBAAkB;oBAC5B,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;KACH;;IArBU,iBAAiB;QAH7B,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,aAAa,CAAC;SACzB,CAAC;OACW,iBAAiB,CAsB7B;IAAD,wBAAC;CAtBD;;ACtBA;;;;;;"}