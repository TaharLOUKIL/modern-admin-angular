import { __assign, __decorate, __spread } from 'tslib';
import { Injectable, Input, Component, ViewEncapsulation, TemplateRef, ComponentRef, ComponentFactoryResolver, ChangeDetectorRef, ViewChild, ViewContainerRef, Renderer2, Directive, InjectionToken, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReplaySubject } from 'rxjs';

var BlockUIActions = /** @class */ (function () {
    function BlockUIActions() {
    }
    BlockUIActions.START = 'start';
    BlockUIActions.STOP = 'stop';
    BlockUIActions.UPDATE = 'update';
    BlockUIActions.RESET = 'reset';
    BlockUIActions.RESET_GLOBAL = 'reset_global';
    BlockUIActions.UNSUBSCRIBE = 'unsubscribe';
    return BlockUIActions;
}());

var BlockUIDefaultName = 'block-ui-main';

var BlockUIInstanceService = /** @class */ (function () {
    function BlockUIInstanceService() {
        this.blockUISettings = {};
        this.blockUIInstances = {};
        this.blockUISubject = new ReplaySubject(1);
        this.blockUIObservable = this.blockUISubject.asObservable();
        this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));
    }
    BlockUIInstanceService.prototype.getSettings = function () {
        return this.blockUISettings;
    };
    BlockUIInstanceService.prototype.updateSettings = function (settings) {
        if (settings === void 0) { settings = {}; }
        this.blockUISettings = __assign(__assign({}, this.blockUISettings), settings);
    };
    BlockUIInstanceService.prototype.decorate = function (name) {
        if (name === void 0) { name = BlockUIDefaultName; }
        var blockUI = {
            name: name,
            isActive: false,
            blockCount: 0,
            start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),
            update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),
            stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),
            reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),
            resetGlobal: this.dispatch(this.blockUISubject, BlockUIActions.RESET_GLOBAL, name),
            unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)
        };
        this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;
        return blockUI;
    };
    BlockUIInstanceService.prototype.observe = function () {
        return this.blockUIObservable;
    };
    BlockUIInstanceService.prototype.clearInstance = function (instanceName) {
        this.dispatch(this.blockUISubject, BlockUIActions.RESET, instanceName);
    };
    BlockUIInstanceService.prototype.blockUIMiddleware = function (_a) {
        var action = _a.action, name = _a.name;
        var isActive = null;
        switch (action) {
            case (BlockUIActions.START):
                isActive = true;
                break;
            case (BlockUIActions.STOP):
            case (BlockUIActions.RESET):
                isActive = false;
                break;
        }
        if (isActive !== null) {
            this.blockUIInstances[name].isActive = isActive;
        }
    };
    BlockUIInstanceService.prototype.dispatch = function (subject, action, name) {
        if (name === void 0) { name = BlockUIDefaultName; }
        return function (message) {
            subject.next({
                name: name,
                action: action,
                message: message
            });
        };
    };
    BlockUIInstanceService = __decorate([
        Injectable()
    ], BlockUIInstanceService);
    return BlockUIInstanceService;
}());

var BlockUIComponent = /** @class */ (function () {
    function BlockUIComponent(blockUI) {
        this.blockUI = blockUI;
    }
    BlockUIComponent.prototype.ngOnInit = function () {
        this.name = this.name || BlockUIDefaultName;
        this.template = this.template || this.blockUI.blockUISettings.template;
    };
    BlockUIComponent.ctorParameters = function () { return [
        { type: BlockUIInstanceService }
    ]; };
    __decorate([
        Input()
    ], BlockUIComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], BlockUIComponent.prototype, "message", void 0);
    __decorate([
        Input()
    ], BlockUIComponent.prototype, "delayStart", void 0);
    __decorate([
        Input()
    ], BlockUIComponent.prototype, "delayStop", void 0);
    __decorate([
        Input()
    ], BlockUIComponent.prototype, "template", void 0);
    BlockUIComponent = __decorate([
        Component({
            selector: 'block-ui',
            template: "\n    <ng-content></ng-content>\n    <block-ui-content\n      [name]=\"name\"\n      [message]=\"message\"\n      [template]=\"template\"\n      [delayStart]=\"delayStart\"\n      [delayStop]=\"delayStop\"\n    >\n    </block-ui-content>\n  ",
            encapsulation: ViewEncapsulation.None
        })
    ], BlockUIComponent);
    return BlockUIComponent;
}());

// Spinner style - https://github.com/lukehaas/css-loaders
var styles = "\n.block-ui-wrapper {\n  display: none;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.70);\n  z-index: 30000;\n  cursor: wait;\n}\n\n.block-ui-wrapper.block-ui-wrapper--element {\n  position: absolute;\n}\n\n.block-ui-wrapper.active {\n  display: block;\n}\n\n.block-ui-wrapper.block-ui-main {\n  position: fixed;\n}\n\n.block-ui-spinner,\n.block-ui-template {\n  position: absolute;\n  top: 40%;\n  margin: 0 auto;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n}\n\n.block-ui-spinner > .message {\n  font-size: 1.3em;\n  text-align: center;\n  color: #fff;\n}\n\n.block-ui__element {\n  position: relative;\n}\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 7px auto;\n  font-size: 5px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-left: 1.1em solid #ffffff;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";

var template = "\n<div class=\"block-ui-wrapper {{name}} {{className}}\" [ngClass]=\"{ 'active': state.blockCount > 0 }\">\n  <div class=\"block-ui-spinner\" *ngIf=\"!templateCmp\">\n    <div class=\"loader\"></div>\n    <div *ngIf=\"message || defaultMessage\" class=\"message\">\n      {{ message || defaultMessage }}\n    </div>\n  </div>\n  <ng-template *ngIf=\"templateCmp\" #templateOutlet></ng-template>\n</div>\n";

var BlockUIContentComponent = /** @class */ (function () {
    function BlockUIContentComponent(blockUI, resolver, changeDetectionRef) {
        this.blockUI = blockUI;
        this.resolver = resolver;
        this.changeDetectionRef = changeDetectionRef;
        this.name = BlockUIDefaultName;
        this.defaultBlockState = {
            startTimeouts: [],
            stopTimeouts: [],
            updateTimeouts: [],
            blockCount: 0,
            startCallCount: 0,
            stopCallCount: 0
        };
        this.state = __assign({}, this.defaultBlockState);
    }
    BlockUIContentComponent.prototype.ngOnInit = function () {
        this.settings = this.blockUI.getSettings();
        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());
    };
    BlockUIContentComponent.prototype.ngAfterViewInit = function () {
        try {
            if (!this.templateCmp) {
                return false;
            }
            if (this.templateCmp instanceof TemplateRef) {
                this.templateOutlet.createEmbeddedView(this.templateCmp);
            }
            else {
                var templateComp = this.resolver.resolveComponentFactory(this.templateCmp);
                this.templateCompRef = this.templateOutlet.createComponent(templateComp);
                this.updateBlockTemplate(this.message);
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    };
    BlockUIContentComponent.prototype.ngAfterViewChecked = function () {
        this.detectChanges();
    };
    BlockUIContentComponent.prototype.subscribeToBlockUI = function (blockUI$) {
        var _this = this;
        return blockUI$.subscribe(function (event) { return _this.onDispatchedEvent(event); });
    };
    BlockUIContentComponent.prototype.onDispatchedEvent = function (event) {
        switch (event.action) {
            case BlockUIActions.START:
                this.onStart(event);
                break;
            case BlockUIActions.STOP:
                this.onStop(event);
                break;
            case BlockUIActions.UPDATE:
                this.onUpdate(event);
                break;
            case BlockUIActions.RESET:
                this.onReset(event);
                break;
            case BlockUIActions.RESET_GLOBAL:
                this.resetState();
                break;
            case BlockUIActions.UNSUBSCRIBE:
                this.onStop(event);
                this.onUnsubscribe(event.name);
                break;
        }
    };
    BlockUIContentComponent.prototype.onStart = function (_a) {
        var _this = this;
        var name = _a.name, message = _a.message;
        if (name === this.name) {
            var delay = this.delayStart || this.settings.delayStart || 0;
            this.state.startCallCount += 1;
            var startTimeout = setTimeout(function () {
                _this.state.blockCount += 1;
                _this.showBlock(message);
                _this.updateInstanceBlockCount();
            }, delay);
            this.state.startTimeouts.push(startTimeout);
        }
    };
    BlockUIContentComponent.prototype.onStop = function (_a) {
        var _this = this;
        var name = _a.name;
        if (name === this.name) {
            var stopCount = this.state.stopCallCount + 1;
            if (this.state.startCallCount - stopCount >= 0) {
                var delay = this.delayStop || this.settings.delayStop || 0;
                this.state.stopCallCount = stopCount;
                var stopTimeout = setTimeout(function () {
                    _this.state.blockCount -= 1;
                    _this.updateInstanceBlockCount();
                    _this.detectChanges();
                }, delay);
                this.state.stopTimeouts.push(stopTimeout);
            }
        }
    };
    BlockUIContentComponent.prototype.onUpdate = function (_a) {
        var _this = this;
        var name = _a.name, message = _a.message;
        if (name === this.name) {
            var delay = this.delayStart || this.settings.delayStart || 0;
            clearTimeout(this.state.updateTimeouts[0]);
            var updateTimeout = setTimeout(function () {
                _this.updateMessage(message);
            }, delay);
            this.state.updateTimeouts.push(updateTimeout);
        }
    };
    BlockUIContentComponent.prototype.onReset = function (_a) {
        var name = _a.name;
        if (name === this.name) {
            this.resetState();
        }
    };
    BlockUIContentComponent.prototype.updateMessage = function (message) {
        this.showBlock(message);
    };
    BlockUIContentComponent.prototype.showBlock = function (message) {
        this.message = message || this.defaultMessage || this.settings.message;
        this.updateBlockTemplate(this.message);
        this.detectChanges();
    };
    BlockUIContentComponent.prototype.updateBlockTemplate = function (msg) {
        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {
            this.templateCompRef.instance.message = msg;
        }
    };
    BlockUIContentComponent.prototype.resetState = function () {
        __spread(this.state.startTimeouts, this.state.stopTimeouts, this.state.updateTimeouts).forEach(clearTimeout);
        this.state = __assign({}, this.defaultBlockState);
        this.updateInstanceBlockCount();
        this.detectChanges();
    };
    BlockUIContentComponent.prototype.onUnsubscribe = function (name) {
        if (this.blockUISubscription && name === this.name) {
            this.blockUISubscription.unsubscribe();
        }
    };
    BlockUIContentComponent.prototype.updateInstanceBlockCount = function () {
        if (this.blockUI.blockUIInstances[this.name]) {
            var blockCount = this.state.blockCount;
            this.blockUI.blockUIInstances[this.name].blockCount = blockCount;
        }
    };
    BlockUIContentComponent.prototype.detectChanges = function () {
        if (!this.changeDetectionRef['destroyed']) {
            this.changeDetectionRef.detectChanges();
        }
    };
    BlockUIContentComponent.prototype.ngOnDestroy = function () {
        this.resetState();
        this.onUnsubscribe(this.name);
        this.blockUI.clearInstance(this.name);
    };
    BlockUIContentComponent.ctorParameters = function () { return [
        { type: BlockUIInstanceService },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], BlockUIContentComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], BlockUIContentComponent.prototype, "delayStart", void 0);
    __decorate([
        Input()
    ], BlockUIContentComponent.prototype, "delayStop", void 0);
    __decorate([
        Input('message')
    ], BlockUIContentComponent.prototype, "defaultMessage", void 0);
    __decorate([
        Input('template')
    ], BlockUIContentComponent.prototype, "templateCmp", void 0);
    __decorate([
        ViewChild('templateOutlet', { read: ViewContainerRef })
    ], BlockUIContentComponent.prototype, "templateOutlet", void 0);
    BlockUIContentComponent = __decorate([
        Component({
            selector: 'block-ui-content',
            template: template,
            encapsulation: ViewEncapsulation.None,
            styles: [styles]
        })
    ], BlockUIContentComponent);
    return BlockUIContentComponent;
}());

var BlockUIService = /** @class */ (function () {
    function BlockUIService(blockUIInstance) {
        this.blockUIInstance = blockUIInstance;
        this.globalDispatch = this.blockUIInstance.decorate();
    }
    /**
    * Starts blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.start = function (target, message) {
        this.dispatch(target, BlockUIActions.START, message);
    };
    /**
    * Stops blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.stop = function (target) {
        this.dispatch(target, BlockUIActions.STOP);
    };
    /**
    * Reset blocking for given BlockUI instance or instances
    */
    BlockUIService.prototype.reset = function (target) {
        this.dispatch(target, BlockUIActions.RESET);
    };
    /**
    * Reset blocking for all BlockUI instances
    */
    BlockUIService.prototype.resetGlobal = function () {
        this.globalDispatch.resetGlobal();
    };
    /**
    * Updates message for given BlockUI instance or instances
    */
    BlockUIService.prototype.update = function (target, message) {
        this.dispatch(target, BlockUIActions.UPDATE, message);
    };
    /**
    * Unsubscribes for given BlockUI instance or instances
    */
    BlockUIService.prototype.unsubscribe = function (target) {
        this.dispatch(target, BlockUIActions.UNSUBSCRIBE);
    };
    /**
    * Checks if BlockUI is actively blocking
    */
    BlockUIService.prototype.isActive = function (target) {
        if (target === void 0) { target = null; }
        var targets = target ? this.toArray(target) : null;
        var instances = this.blockUIInstance.blockUIInstances;
        return Object.keys(instances).some(function (key) {
            if (!targets) {
                return instances[key].isActive;
            }
            return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;
        });
    };
    BlockUIService.prototype.dispatch = function (target, type, message) {
        var _this = this;
        if (target === void 0) { target = []; }
        var instances = this.toArray(target);
        instances.forEach(function (i) { return _this.blockUIInstance.decorate(i)[type](message); });
    };
    BlockUIService.prototype.toArray = function (target) {
        if (target === void 0) { target = []; }
        return typeof target === 'string' ? [target] : target;
    };
    BlockUIService.ctorParameters = function () { return [
        { type: BlockUIInstanceService }
    ]; };
    BlockUIService = __decorate([
        Injectable()
    ], BlockUIService);
    return BlockUIService;
}());

var BlockUIDirective = /** @class */ (function () {
    function BlockUIDirective(blockUIService, blockUIInstanceService, viewRef, templateRef, renderer, componentFactoryResolver) {
        this.blockUIService = blockUIService;
        this.blockUIInstanceService = blockUIInstanceService;
        this.viewRef = viewRef;
        this.templateRef = templateRef;
        this.renderer = renderer;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    Object.defineProperty(BlockUIDirective.prototype, "blockUI", {
        set: function (name) { this.blockTarget = name; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIMessage", {
        set: function (message) { this.message = message; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUITemplate", {
        set: function (template) { this.template = template; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIDelayStart", {
        set: function (delayStart) {
            this.delayStart = delayStart ? Number(delayStart) : null;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BlockUIDirective.prototype, "blockUIDelayStop", {
        set: function (delayStop) {
            this.delayStop = delayStop ? Number(delayStop) : null;
        },
        enumerable: true,
        configurable: true
    });
    ;
    BlockUIDirective.prototype.ngOnInit = function () {
        try {
            this.viewRef.createEmbeddedView(this.templateRef);
            var parentElement = this.getParentElement();
            if (parentElement && !this.isComponentInTemplate(parentElement)) {
                this.renderer.addClass(parentElement, 'block-ui__element');
                this.blockUIComponentRef = this.createComponent();
                var blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);
                if (blockUIContent) {
                    var settings = this.blockUIInstanceService.getSettings();
                    parentElement.appendChild(blockUIContent);
                    this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';
                    this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;
                    if (this.message)
                        this.blockUIComponentRef.instance.defaultMessage = this.message;
                    if (this.delayStart)
                        this.blockUIComponentRef.instance.delayStart = this.delayStart;
                    if (this.delayStop)
                        this.blockUIComponentRef.instance.delayStop = this.delayStop;
                    if (this.template || settings.template)
                        this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;
                }
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    };
    BlockUIDirective.prototype.isComponentInTemplate = function (element) {
        // Needed because of https://github.com/microsoft/TypeScript/issues/26235
        var targetElement = element || {};
        var children = targetElement.children;
        children = Array.from(children || []).reverse();
        return children.some(function (el) { return el && el.localName === 'block-ui'; });
    };
    BlockUIDirective.prototype.getParentElement = function () {
        var embeddedView = this.viewRef.get(0);
        return embeddedView.rootNodes[0];
    };
    // Needed for IE (#17)
    BlockUIDirective.prototype.findContentNode = function (element) {
        var nextSibling = element.nextSibling || {};
        var previousSibling = element.previousSibling || {};
        return [
            nextSibling,
            nextSibling.nextSibling,
            previousSibling,
            previousSibling.previousSibling
        ].find(function (e) { return e && e.localName === 'block-ui-content'; });
    };
    BlockUIDirective.prototype.createComponent = function () {
        var resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);
        return this.viewRef.createComponent(resolvedBlockUIComponent);
    };
    BlockUIDirective.prototype.ngOnDestroy = function () {
        if (this.blockTarget) {
            this.blockUIService.reset(this.blockTarget);
        }
    };
    BlockUIDirective.ctorParameters = function () { return [
        { type: BlockUIService },
        { type: BlockUIInstanceService },
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: Renderer2 },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUI", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUIMessage", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUITemplate", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUIDelayStart", null);
    __decorate([
        Input()
    ], BlockUIDirective.prototype, "blockUIDelayStop", null);
    BlockUIDirective = __decorate([
        Directive({ selector: '[blockUI]' })
    ], BlockUIDirective);
    return BlockUIDirective;
}());

var BlockUIServiceInstance = new BlockUIInstanceService();
// Needed for AOT compiling
var BlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');
function provideInstance(settings) {
    BlockUIServiceInstance.updateSettings(settings);
    return BlockUIServiceInstance;
}
var BlockUIModule = /** @class */ (function () {
    function BlockUIModule() {
    }
    BlockUIModule_1 = BlockUIModule;
    BlockUIModule.forRoot = function (settings) {
        if (settings === void 0) { settings = {}; }
        return {
            ngModule: BlockUIModule_1,
            providers: [
                {
                    provide: BlockUIModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIInstanceService,
                    useFactory: provideInstance,
                    deps: [BlockUIModuleSettings]
                },
                BlockUIService
            ]
        };
    };
    var BlockUIModule_1;
    BlockUIModule = BlockUIModule_1 = __decorate([
        NgModule({
            imports: [
                CommonModule
            ],
            entryComponents: [
                BlockUIComponent,
                BlockUIContentComponent
            ],
            declarations: [
                BlockUIComponent,
                BlockUIDirective,
                BlockUIContentComponent
            ],
            exports: [
                BlockUIComponent,
                BlockUIDirective,
                BlockUIContentComponent
            ]
        })
    ], BlockUIModule);
    return BlockUIModule;
}());

var blockInstanceGuid = 1;
function BlockUI(blockName, settings) {
    if (settings === void 0) { settings = {}; }
    if (!settings.scopeToInstance) {
        return function (target, propertyKey) {
            target[propertyKey] = BlockUIServiceInstance.decorate(blockName);
        };
    }
    return function (target, key) {
        var secret = "_" + key + "-block-ui";
        Object.defineProperty(target, key, {
            get: function () {
                if (this[secret]) {
                    return this[secret];
                }
                var instanceName = blockName + "-" + blockInstanceGuid++;
                this[secret] = BlockUIServiceInstance.decorate(instanceName);
                return this[secret];
            },
            set: function (value) {
                this[secret] = value;
            },
        });
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { BlockUIDefaultName as BLOCKUI_DEFAULT, BlockUI, BlockUIComponent, BlockUIContentComponent, BlockUIModule, BlockUIService, BlockUIModuleSettings as ɵa, provideInstance as ɵb, BlockUIInstanceService as ɵc, template as ɵd, styles as ɵe, BlockUIDirective as ɵf };
//# sourceMappingURL=ng-block-ui.js.map
