import { debounceTime } from 'rxjs/operators';
import { fromEvent } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { Component, Input, Output, EventEmitter, ViewChild, Injectable, TemplateRef, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatatablePagerComponent {
    constructor() {
        this.linage = true;
        this.displayBothEnds = true;
        this.pageNumber = true;
        this.pageJumpTime = 1000;
        this.change = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.maxPage = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this._page = 1;
        // tslint:disable-next-line:member-ordering
        this._count = 0;
        // tslint:disable-next-line:member-ordering
        this._size = 0;
        // tslint:disable-next-line:member-ordering
        this.pageSizeColumn = true;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set size(val) {
        this._size = val;
        this.pages = this.calcPages();
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set count(val) {
        this._count = val;
        this.pages = this.calcPages();
    }
    /**
     * @return {?}
     */
    get count() {
        return this._count;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set page(val) {
        if (val) {
            this._page = val;
            this.pages = this.calcPages();
        }
    }
    /**
     * @return {?}
     */
    get page() {
        return this._page;
    }
    /**
     * @return {?}
     */
    get totalPages() {
        /** @type {?} */
        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
        return Math.max(count || 0, 1);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputEvent = fromEvent(this.customerInput.nativeElement, "input")
            .pipe(debounceTime(this.pageJumpTime))
            .subscribe((event) => {
            /** @type {?} */
            let value;
            if (event.target.value) {
                value = Number(event.target.value);
                if (value < 1) {
                    value = 1;
                    this.customerInput.nativeElement.value = 1;
                }
                else if (value > this.totalPages) {
                    value = this.totalPages;
                    this.customerInput.nativeElement.value = this.totalPages;
                    this.maxPage.emit(this.totalPages);
                }
                this.page = value;
                this.selectPage(Math.round(value));
            }
        });
    }
    /**
     * @return {?}
     */
    canPrevious() {
        return this.page > 1;
    }
    /**
     * @return {?}
     */
    canNext() {
        return this.page < this.totalPages;
    }
    /**
     * @return {?}
     */
    prevPage() {
        this.selectPage(this.page - 1);
    }
    /**
     * @return {?}
     */
    nextPage() {
        this.selectPage(this.page + 1);
    }
    /**
     * @return {?}
     */
    firstPage() {
        if (this.canPrevious()) {
            this.selectPage(1);
        }
    }
    /**
     * @return {?}
     */
    lastPage() {
        if (this.canNext()) {
            this.selectPage(this.totalPages);
        }
    }
    /**
     * @param {?} page
     * @param {?=} changePageSize
     * @return {?}
     */
    selectPage(page, changePageSize) {
        if (changePageSize) {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.currentOffset = page;
                this.change.emit({ page });
            }
        }
        else {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.currentOffset = page;
                this.change.emit({ page });
            }
        }
    }
    /**
     * @param {?=} page
     * @return {?}
     */
    calcPages(page) {
        /** @type {?} */
        const pages = [];
        /** @type {?} */
        let startPage = 1;
        /** @type {?} */
        let endPage = this.totalPages;
        /** @type {?} */
        const maxSize = 5;
        /** @type {?} */
        const isMaxSized = maxSize < this.totalPages;
        page = page || this.page;
        if (isMaxSized) {
            startPage = (Math.ceil(page / maxSize) - 1) * maxSize + 1;
            endPage = Math.min(startPage + maxSize - 1, this.totalPages);
        }
        for (let num = startPage; num <= endPage; num++) {
            pages.push({ number: num, text: num });
        }
        return pages;
    }
    /**
     * @return {?}
     */
    blurHandel() {
        this.customerInput.nativeElement.value = this.page;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    changePageSize(pageSize) {
        this.datatable.limit = pageSize;
        this.selectPage(1, "changePageSize");
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyDownHandel(event) {
        if (this.customerInput.nativeElement.value) {
            this.prveOffset = Number(this.customerInput.nativeElement.value);
        }
        if ((event.keyCode < 48 && event.keyCode !== 8) ||
            (event.keyCode > 57 && event.keyCode < 96) ||
            event.keyCode > 105) {
            return false;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.inputEvent.unsubscribe();
    }
}
DatatablePagerComponent.decorators = [
    { type: Component, args: [{
                selector: "app-datatable-pager",
                template: ` <ul class="pager">
    <li
      class="page-size-continer"
      *ngIf="linage"
      (click)="pageSizeColumn = !pageSizeColumn"
      (mouseleave)="pageSizeColumn = true"
    >
      <span>{{ size }} {{ labels.line }}/{{ labels.page }}</span>
      <span
        class="fa"
        [ngClass]="{
          'fa-angle-up': pageSizeColumn,
          'fa-angle-down': !pageSizeColumn
        }"
      ></span>
      <ul [hidden]="pageSizeColumn" class="page-size-content">
        <li
          *ngFor="let ps of pageSizes"
          (click)="changePageSize(ps)"
          [ngClass]="{ 'page-size-column-active': size === ps }"
        >
          {{ ps }} {{ labels.line }}/{{ labels.page }}
        </li>
      </ul>
    </li>
    <li *ngIf="displayBothEnds" [class.disabled]="!canPrevious()">
      <a (click)="firstPage()">
        <i class="{{ pagerPreviousIcon }}"></i>
      </a>
    </li>
    <li [class.disabled]="!canPrevious()">
      <a (click)="prevPage()">
        <i class="{{ pagerLeftArrowIcon }}"></i>
      </a>
    </li>
    <li
      class="pages"
      *ngFor="let pg of pages"
      [class.active]="pg.number === page"
    >
      <a *ngIf="pageNumber" (click)="selectPage(pg.number)">
        {{ pg.text }}
      </a>
    </li>
    <li [class.disabled]="!canNext()">
      <a (click)="nextPage()">
        <i class="{{ pagerRightArrowIcon }}"></i>
      </a>
    </li>
    <li *ngIf="displayBothEnds" [class.disabled]="!canNext()">
      <a (click)="lastPage()">
        <i class="{{ pagerNextIcon }}"></i>
      </a>
    </li>
    <li [ngStyle]="{ position: 'relative' }">
      <span>{{ labels.jumpTo }}</span>
      <input
        #customerInput
        class="lz-jump-page"
        type="number"
        title=" "
        rows="2"
        [min]="1"
        [ngModel]="page"
        (keydown)="keyDownHandel($event)"
        (blur)="blurHandel()"
      />{{ labels.page }}
    </li>
  </ul>`,
                styles: [`
      .page-size-continer {
        position: relative;
        min-width: 80px;
        height: 26px;
        line-height: 26px;
        text-align: center;
        border-radius: 2px;
        cursor: pointer;
        padding: 0 10px !important;
      }
      .page-size-continer:hover {
        background-color: rgba(158, 158, 158, 0.2);
      }
      .page-size-continer .page-size-content {
        position: absolute;
        bottom: 24px;
        left: 0;
        padding: 0;
        background: #fff;
        border-radius: 4px;
        box-shadow: 0 0 15px 1px rgba(113, 106, 202, 0.2);
        z-index: 11;
      }
      .page-size-continer .page-size-content li {
        width: 100%;
        padding: 4px 0;
      }
      .page-size-continer .page-size-content li:hover {
        background-color: rgba(158, 158, 158, 0.2);
      }
      .page-size-continer .page-size-content .page-size-column-active {
        color: #409eff;
      }
      input[type="number"]::-webkit-inner-spin-button,
      input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
      }
      .lz-jump-page {
        display: inline-block;
        width: 50px;
        border-radius: 2px;
        margin-right: 6px;
        padding-left: 4px;
        border: solid 1px #ebedf2;
      }
      input[type="number"] {
        -moz-appearance: textfield;
      }
    `]
            }] }
];
DatatablePagerComponent.propDecorators = {
    pagerLeftArrowIcon: [{ type: Input }],
    pagerRightArrowIcon: [{ type: Input }],
    pagerPreviousIcon: [{ type: Input }],
    pagerNextIcon: [{ type: Input }],
    pageSizes: [{ type: Input }],
    datatable: [{ type: Input }],
    linage: [{ type: Input }],
    displayBothEnds: [{ type: Input }],
    pageNumber: [{ type: Input }],
    pageJumpTime: [{ type: Input }],
    labels: [{ type: Input }],
    size: [{ type: Input }],
    count: [{ type: Input }],
    page: [{ type: Input }],
    change: [{ type: Output }],
    pageChange: [{ type: Output }],
    maxPage: [{ type: Output }],
    customerInput: [{ type: ViewChild, args: ["customerInput",] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterConfigurationService {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
        this.defaultLabels = {
            current: '当前 ',
            line: '行',
            page: '页',
            jumpTo: '跳转到',
        };
        this.update();
        this.translate.onLangChange.subscribe((lang) => {
            setTimeout(() => {
                this.update();
            }, 0);
        });
    }
    /**
     * @return {?}
     */
    update() {
        this._language = localStorage.getItem("lang");
        if (this._language === "zh-CN" || !this._language) {
            this.labels = this.defaultLabels;
            // this.labels = Object.assign({}, this.labels, options.labels);
        }
        else {
            if (this._language) {
                if (this._language) {
                    this.translate.get("ngxFooterSettings.labels").subscribe((translations) => {
                        this.labels = translations;
                    });
                }
            }
        }
    }
}
FooterConfigurationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FooterConfigurationService.ctorParameters = () => [
    { type: TranslateService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatatableFooterComponent {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.pagerLeftArrowIcon = 'fa fa-angle-left';
        this.pagerRightArrowIcon = 'fa fa-angle-right';
        this.pagerPreviousIcon = 'fa fa-step-backward';
        this.pagerNextIcon = 'fa fa-step-forward';
        this.pageSizes = [10, 20, 30, 40, 50];
        this.totalNumber = true;
        this.linage = true;
        this.displayBothEnds = true;
        this.pageNumber = true;
        this.pageJumpTime = 1000;
        this.pageChange = new EventEmitter();
        this.maxPage = new EventEmitter();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set template(val) {
        this._template = val;
        this.update();
    }
    /**
     * @return {?}
     */
    get template() {
        return this._template;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set datatable(val) {
        this._datatable = val;
        this.update();
    }
    /**
     * @return {?}
     */
    get datatable() {
        return this._datatable;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    update() {
        if (this._datatable &&
            this._template &&
            (!this._datatable.footer || !this._datatable.footer.template)) {
            if (this._datatable.footer) {
                this._datatable.footer.template = this._template;
            }
            else {
                this._datatable.footer = {
                    footerHeight: this._datatable.footerHeight,
                    totalMessage: this._datatable.messages.totalMessage,
                    selectedMessage: this._datatable.messages.selectedMessage,
                    pagerLeftArrowIcon: '',
                    pagerRightArrowIcon: '',
                    pagerPreviousIcon: '',
                    pagerNextIcon: '',
                    template: this._template
                };
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFooterPage(event) {
        if (typeof event.page === 'number') {
            this.datatable.onFooterPage(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    emitPage(event) {
        if (typeof event.page === 'number') {
            this.pageChange.emit(event);
        }
    }
    /**
     * @param {?} page
     * @return {?}
     */
    emitMaxPage(page) {
        this.maxPage.emit(page);
    }
}
DatatableFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datatable-footer',
                template: ` <ng-template
    ngx-datatable-footer-template
    let-rowCount="rowCount"
    let-pageSize="pageSize"
    let-selectedCount="selectedCount"
    let-curPage="curPage"
    let-offset="offset"
  >
    <div
      class="page-count"
      *ngIf="rowCount > 0 && totalNumber"
      [innerHTML]="
        config.labels.current +
        ((offset || 0) * pageSize + 1) +
        ' - ' +
        ((offset + 1) * pageSize > rowCount
          ? rowCount
          : (offset + 1 || 1) * pageSize) +
        ' / ' +
        rowCount +
        config.labels.line
      "
    ></div>
    <app-datatable-pager
      *ngIf="rowCount > 0"
      [linage]="linage"
      [displayBothEnds]="displayBothEnds"
      [pageNumber]="pageNumber"
      [pageSizes]="pageSizes"
      [pagerPreviousIcon]="pagerPreviousIcon"
      [pagerNextIcon]="pagerNextIcon"
      [pagerLeftArrowIcon]="pagerLeftArrowIcon"
      [pagerRightArrowIcon]="pagerRightArrowIcon"
      [page]="curPage"
      [size]="pageSize"
      [pageJumpTime]="pageJumpTime"
      [datatable]="datatable"
      [count]="rowCount"
      [labels]="config.labels"
      (change)="onFooterPage($event); emitPage($event)"
      (pageChange)="emitPage($event)"
      (maxPage)="emitMaxPage($event)"
      class="datatable-pager"
    >
    </app-datatable-pager>
  </ng-template>`
            }] }
];
/** @nocollapse */
DatatableFooterComponent.ctorParameters = () => [
    { type: FooterConfigurationService }
];
DatatableFooterComponent.propDecorators = {
    template: [{ type: ViewChild, args: [TemplateRef,] }],
    datatable: [{ type: Input }],
    pagerLeftArrowIcon: [{ type: Input }],
    pagerRightArrowIcon: [{ type: Input }],
    pagerPreviousIcon: [{ type: Input }],
    pagerNextIcon: [{ type: Input }],
    pageSizes: [{ type: Input }],
    totalNumber: [{ type: Input }],
    linage: [{ type: Input }],
    displayBothEnds: [{ type: Input }],
    pageNumber: [{ type: Input }],
    page: [{ type: Input }],
    pageJumpTime: [{ type: Input }],
    pageChange: [{ type: Output }],
    maxPage: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxDatatableFooterModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxDatatableFooterModule,
        };
    }
}
NgxDatatableFooterModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    DatatablePagerComponent,
                    DatatableFooterComponent
                ],
                exports: [
                    DatatablePagerComponent,
                    DatatableFooterComponent
                ],
                providers: [
                    FooterConfigurationService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DatatablePagerComponent, DatatableFooterComponent, NgxDatatableFooterModule, FooterConfigurationService as ɵa };

//# sourceMappingURL=ngx-datatable-footer.js.map