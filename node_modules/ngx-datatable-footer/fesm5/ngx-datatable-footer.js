import { debounceTime } from 'rxjs/operators';
import { fromEvent } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { Component, Input, Output, EventEmitter, ViewChild, Injectable, TemplateRef, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatatablePagerComponent = /** @class */ (function () {
    function DatatablePagerComponent() {
        this.linage = true;
        this.displayBothEnds = true;
        this.pageNumber = true;
        this.pageJumpTime = 1000;
        this.change = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.maxPage = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this._page = 1;
        // tslint:disable-next-line:member-ordering
        this._count = 0;
        // tslint:disable-next-line:member-ordering
        this._size = 0;
        // tslint:disable-next-line:member-ordering
        this.pageSizeColumn = true;
    }
    Object.defineProperty(DatatablePagerComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._size = val;
            this.pages = this.calcPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablePagerComponent.prototype, "count", {
        get: /**
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._count = val;
            this.pages = this.calcPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablePagerComponent.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this._page;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._page = val;
                this.pages = this.calcPages();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablePagerComponent.prototype, "totalPages", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
            return Math.max(count || 0, 1);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inputEvent = fromEvent(this.customerInput.nativeElement, "input")
            .pipe(debounceTime(this.pageJumpTime))
            .subscribe(function (event) {
            /** @type {?} */
            var value;
            if (event.target.value) {
                value = Number(event.target.value);
                if (value < 1) {
                    value = 1;
                    _this.customerInput.nativeElement.value = 1;
                }
                else if (value > _this.totalPages) {
                    value = _this.totalPages;
                    _this.customerInput.nativeElement.value = _this.totalPages;
                    _this.maxPage.emit(_this.totalPages);
                }
                _this.page = value;
                _this.selectPage(Math.round(value));
            }
        });
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.canPrevious = /**
     * @return {?}
     */
    function () {
        return this.page > 1;
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.canNext = /**
     * @return {?}
     */
    function () {
        return this.page < this.totalPages;
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.prevPage = /**
     * @return {?}
     */
    function () {
        this.selectPage(this.page - 1);
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        this.selectPage(this.page + 1);
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.firstPage = /**
     * @return {?}
     */
    function () {
        if (this.canPrevious()) {
            this.selectPage(1);
        }
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.lastPage = /**
     * @return {?}
     */
    function () {
        if (this.canNext()) {
            this.selectPage(this.totalPages);
        }
    };
    /**
     * @param {?} page
     * @param {?=} changePageSize
     * @return {?}
     */
    DatatablePagerComponent.prototype.selectPage = /**
     * @param {?} page
     * @param {?=} changePageSize
     * @return {?}
     */
    function (page, changePageSize) {
        if (changePageSize) {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.currentOffset = page;
                this.change.emit({ page: page });
            }
        }
        else {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.currentOffset = page;
                this.change.emit({ page: page });
            }
        }
    };
    /**
     * @param {?=} page
     * @return {?}
     */
    DatatablePagerComponent.prototype.calcPages = /**
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        /** @type {?} */
        var pages = [];
        /** @type {?} */
        var startPage = 1;
        /** @type {?} */
        var endPage = this.totalPages;
        /** @type {?} */
        var maxSize = 5;
        /** @type {?} */
        var isMaxSized = maxSize < this.totalPages;
        page = page || this.page;
        if (isMaxSized) {
            startPage = (Math.ceil(page / maxSize) - 1) * maxSize + 1;
            endPage = Math.min(startPage + maxSize - 1, this.totalPages);
        }
        for (var num = startPage; num <= endPage; num++) {
            pages.push({ number: num, text: num });
        }
        return pages;
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.blurHandel = /**
     * @return {?}
     */
    function () {
        this.customerInput.nativeElement.value = this.page;
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    DatatablePagerComponent.prototype.changePageSize = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        this.datatable.limit = pageSize;
        this.selectPage(1, "changePageSize");
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatatablePagerComponent.prototype.keyDownHandel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.customerInput.nativeElement.value) {
            this.prveOffset = Number(this.customerInput.nativeElement.value);
        }
        if ((event.keyCode < 48 && event.keyCode !== 8) ||
            (event.keyCode > 57 && event.keyCode < 96) ||
            event.keyCode > 105) {
            return false;
        }
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.inputEvent.unsubscribe();
    };
    DatatablePagerComponent.decorators = [
        { type: Component, args: [{
                    selector: "app-datatable-pager",
                    template: " <ul class=\"pager\">\n    <li\n      class=\"page-size-continer\"\n      *ngIf=\"linage\"\n      (click)=\"pageSizeColumn = !pageSizeColumn\"\n      (mouseleave)=\"pageSizeColumn = true\"\n    >\n      <span>{{ size }} {{ labels.line }}/{{ labels.page }}</span>\n      <span\n        class=\"fa\"\n        [ngClass]=\"{\n          'fa-angle-up': pageSizeColumn,\n          'fa-angle-down': !pageSizeColumn\n        }\"\n      ></span>\n      <ul [hidden]=\"pageSizeColumn\" class=\"page-size-content\">\n        <li\n          *ngFor=\"let ps of pageSizes\"\n          (click)=\"changePageSize(ps)\"\n          [ngClass]=\"{ 'page-size-column-active': size === ps }\"\n        >\n          {{ ps }} {{ labels.line }}/{{ labels.page }}\n        </li>\n      </ul>\n    </li>\n    <li *ngIf=\"displayBothEnds\" [class.disabled]=\"!canPrevious()\">\n      <a (click)=\"firstPage()\">\n        <i class=\"{{ pagerPreviousIcon }}\"></i>\n      </a>\n    </li>\n    <li [class.disabled]=\"!canPrevious()\">\n      <a (click)=\"prevPage()\">\n        <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n      </a>\n    </li>\n    <li\n      class=\"pages\"\n      *ngFor=\"let pg of pages\"\n      [class.active]=\"pg.number === page\"\n    >\n      <a *ngIf=\"pageNumber\" (click)=\"selectPage(pg.number)\">\n        {{ pg.text }}\n      </a>\n    </li>\n    <li [class.disabled]=\"!canNext()\">\n      <a (click)=\"nextPage()\">\n        <i class=\"{{ pagerRightArrowIcon }}\"></i>\n      </a>\n    </li>\n    <li *ngIf=\"displayBothEnds\" [class.disabled]=\"!canNext()\">\n      <a (click)=\"lastPage()\">\n        <i class=\"{{ pagerNextIcon }}\"></i>\n      </a>\n    </li>\n    <li [ngStyle]=\"{ position: 'relative' }\">\n      <span>{{ labels.jumpTo }}</span>\n      <input\n        #customerInput\n        class=\"lz-jump-page\"\n        type=\"number\"\n        title=\" \"\n        rows=\"2\"\n        [min]=\"1\"\n        [ngModel]=\"page\"\n        (keydown)=\"keyDownHandel($event)\"\n        (blur)=\"blurHandel()\"\n      />{{ labels.page }}\n    </li>\n  </ul>",
                    styles: ["\n      .page-size-continer {\n        position: relative;\n        min-width: 80px;\n        height: 26px;\n        line-height: 26px;\n        text-align: center;\n        border-radius: 2px;\n        cursor: pointer;\n        padding: 0 10px !important;\n      }\n      .page-size-continer:hover {\n        background-color: rgba(158, 158, 158, 0.2);\n      }\n      .page-size-continer .page-size-content {\n        position: absolute;\n        bottom: 24px;\n        left: 0;\n        padding: 0;\n        background: #fff;\n        border-radius: 4px;\n        box-shadow: 0 0 15px 1px rgba(113, 106, 202, 0.2);\n        z-index: 11;\n      }\n      .page-size-continer .page-size-content li {\n        width: 100%;\n        padding: 4px 0;\n      }\n      .page-size-continer .page-size-content li:hover {\n        background-color: rgba(158, 158, 158, 0.2);\n      }\n      .page-size-continer .page-size-content .page-size-column-active {\n        color: #409eff;\n      }\n      input[type=\"number\"]::-webkit-inner-spin-button,\n      input[type=\"number\"]::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n      }\n      .lz-jump-page {\n        display: inline-block;\n        width: 50px;\n        border-radius: 2px;\n        margin-right: 6px;\n        padding-left: 4px;\n        border: solid 1px #ebedf2;\n      }\n      input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n    "]
                }] }
    ];
    DatatablePagerComponent.propDecorators = {
        pagerLeftArrowIcon: [{ type: Input }],
        pagerRightArrowIcon: [{ type: Input }],
        pagerPreviousIcon: [{ type: Input }],
        pagerNextIcon: [{ type: Input }],
        pageSizes: [{ type: Input }],
        datatable: [{ type: Input }],
        linage: [{ type: Input }],
        displayBothEnds: [{ type: Input }],
        pageNumber: [{ type: Input }],
        pageJumpTime: [{ type: Input }],
        labels: [{ type: Input }],
        size: [{ type: Input }],
        count: [{ type: Input }],
        page: [{ type: Input }],
        change: [{ type: Output }],
        pageChange: [{ type: Output }],
        maxPage: [{ type: Output }],
        customerInput: [{ type: ViewChild, args: ["customerInput",] }]
    };
    return DatatablePagerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FooterConfigurationService = /** @class */ (function () {
    function FooterConfigurationService(translate) {
        var _this = this;
        this.translate = translate;
        this.defaultLabels = {
            current: '当前 ',
            line: '行',
            page: '页',
            jumpTo: '跳转到',
        };
        this.update();
        this.translate.onLangChange.subscribe(function (lang) {
            setTimeout(function () {
                _this.update();
            }, 0);
        });
    }
    /**
     * @return {?}
     */
    FooterConfigurationService.prototype.update = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._language = localStorage.getItem("lang");
        if (this._language === "zh-CN" || !this._language) {
            this.labels = this.defaultLabels;
            // this.labels = Object.assign({}, this.labels, options.labels);
        }
        else {
            if (this._language) {
                if (this._language) {
                    this.translate.get("ngxFooterSettings.labels").subscribe(function (translations) {
                        _this.labels = translations;
                    });
                }
            }
        }
    };
    FooterConfigurationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FooterConfigurationService.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return FooterConfigurationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatatableFooterComponent = /** @class */ (function () {
    function DatatableFooterComponent(config) {
        this.config = config;
        this.pagerLeftArrowIcon = 'fa fa-angle-left';
        this.pagerRightArrowIcon = 'fa fa-angle-right';
        this.pagerPreviousIcon = 'fa fa-step-backward';
        this.pagerNextIcon = 'fa fa-step-forward';
        this.pageSizes = [10, 20, 30, 40, 50];
        this.totalNumber = true;
        this.linage = true;
        this.displayBothEnds = true;
        this.pageNumber = true;
        this.pageJumpTime = 1000;
        this.pageChange = new EventEmitter();
        this.maxPage = new EventEmitter();
    }
    Object.defineProperty(DatatableFooterComponent.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            return this._template;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._template = val;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatableFooterComponent.prototype, "datatable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._datatable;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._datatable = val;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatatableFooterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    DatatableFooterComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        if (this._datatable &&
            this._template &&
            (!this._datatable.footer || !this._datatable.footer.template)) {
            if (this._datatable.footer) {
                this._datatable.footer.template = this._template;
            }
            else {
                this._datatable.footer = {
                    footerHeight: this._datatable.footerHeight,
                    totalMessage: this._datatable.messages.totalMessage,
                    selectedMessage: this._datatable.messages.selectedMessage,
                    pagerLeftArrowIcon: '',
                    pagerRightArrowIcon: '',
                    pagerPreviousIcon: '',
                    pagerNextIcon: '',
                    template: this._template
                };
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatatableFooterComponent.prototype.onFooterPage = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (typeof event.page === 'number') {
            this.datatable.onFooterPage(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatatableFooterComponent.prototype.emitPage = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (typeof event.page === 'number') {
            this.pageChange.emit(event);
        }
    };
    /**
     * @param {?} page
     * @return {?}
     */
    DatatableFooterComponent.prototype.emitMaxPage = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        this.maxPage.emit(page);
    };
    DatatableFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-datatable-footer',
                    template: " <ng-template\n    ngx-datatable-footer-template\n    let-rowCount=\"rowCount\"\n    let-pageSize=\"pageSize\"\n    let-selectedCount=\"selectedCount\"\n    let-curPage=\"curPage\"\n    let-offset=\"offset\"\n  >\n    <div\n      class=\"page-count\"\n      *ngIf=\"rowCount > 0 && totalNumber\"\n      [innerHTML]=\"\n        config.labels.current +\n        ((offset || 0) * pageSize + 1) +\n        ' - ' +\n        ((offset + 1) * pageSize > rowCount\n          ? rowCount\n          : (offset + 1 || 1) * pageSize) +\n        ' / ' +\n        rowCount +\n        config.labels.line\n      \"\n    ></div>\n    <app-datatable-pager\n      *ngIf=\"rowCount > 0\"\n      [linage]=\"linage\"\n      [displayBothEnds]=\"displayBothEnds\"\n      [pageNumber]=\"pageNumber\"\n      [pageSizes]=\"pageSizes\"\n      [pagerPreviousIcon]=\"pagerPreviousIcon\"\n      [pagerNextIcon]=\"pagerNextIcon\"\n      [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n      [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n      [page]=\"curPage\"\n      [size]=\"pageSize\"\n      [pageJumpTime]=\"pageJumpTime\"\n      [datatable]=\"datatable\"\n      [count]=\"rowCount\"\n      [labels]=\"config.labels\"\n      (change)=\"onFooterPage($event); emitPage($event)\"\n      (pageChange)=\"emitPage($event)\"\n      (maxPage)=\"emitMaxPage($event)\"\n      class=\"datatable-pager\"\n    >\n    </app-datatable-pager>\n  </ng-template>"
                }] }
    ];
    /** @nocollapse */
    DatatableFooterComponent.ctorParameters = function () { return [
        { type: FooterConfigurationService }
    ]; };
    DatatableFooterComponent.propDecorators = {
        template: [{ type: ViewChild, args: [TemplateRef,] }],
        datatable: [{ type: Input }],
        pagerLeftArrowIcon: [{ type: Input }],
        pagerRightArrowIcon: [{ type: Input }],
        pagerPreviousIcon: [{ type: Input }],
        pagerNextIcon: [{ type: Input }],
        pageSizes: [{ type: Input }],
        totalNumber: [{ type: Input }],
        linage: [{ type: Input }],
        displayBothEnds: [{ type: Input }],
        pageNumber: [{ type: Input }],
        page: [{ type: Input }],
        pageJumpTime: [{ type: Input }],
        pageChange: [{ type: Output }],
        maxPage: [{ type: Output }]
    };
    return DatatableFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxDatatableFooterModule = /** @class */ (function () {
    function NgxDatatableFooterModule() {
    }
    /**
     * @return {?}
     */
    NgxDatatableFooterModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxDatatableFooterModule,
        };
    };
    NgxDatatableFooterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    declarations: [
                        DatatablePagerComponent,
                        DatatableFooterComponent
                    ],
                    exports: [
                        DatatablePagerComponent,
                        DatatableFooterComponent
                    ],
                    providers: [
                        FooterConfigurationService
                    ]
                },] }
    ];
    return NgxDatatableFooterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DatatablePagerComponent, DatatableFooterComponent, NgxDatatableFooterModule, FooterConfigurationService as ɵa };

//# sourceMappingURL=ngx-datatable-footer.js.map