/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
export class FooterConfigurationService {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
        this.defaultLabels = {
            current: '当前 ',
            line: '行',
            page: '页',
            jumpTo: '跳转到',
        };
        this.update();
        this.translate.onLangChange.subscribe((lang) => {
            setTimeout(() => {
                this.update();
            }, 0);
        });
    }
    /**
     * @return {?}
     */
    update() {
        this._language = localStorage.getItem("lang");
        if (this._language === "zh-CN" || !this._language) {
            this.labels = this.defaultLabels;
            // this.labels = Object.assign({}, this.labels, options.labels);
        }
        else {
            if (this._language) {
                if (this._language) {
                    this.translate.get("ngxFooterSettings.labels").subscribe((translations) => {
                        this.labels = translations;
                    });
                }
            }
        }
    }
}
FooterConfigurationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FooterConfigurationService.ctorParameters = () => [
    { type: TranslateService }
];
if (false) {
    /** @type {?} */
    FooterConfigurationService.prototype.labels;
    /** @type {?} */
    FooterConfigurationService.prototype.defaultLabels;
    /**
     * @type {?}
     * @private
     */
    FooterConfigurationService.prototype._language;
    /**
     * @type {?}
     * @private
     */
    FooterConfigurationService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWRhdGF0YWJsZS1mb290ZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3ZELE1BQU0sT0FBTywwQkFBMEI7Ozs7SUFVckMsWUFDVSxTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQVRyQyxrQkFBYSxHQUFRO1lBQ25CLE9BQU8sRUFBRSxLQUFLO1lBQ2QsSUFBSSxFQUFFLEdBQUc7WUFDVCxJQUFJLEVBQUUsR0FBRztZQUNULE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQTtRQU1DLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ3JELFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNSLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDakQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2pDLGdFQUFnRTtTQUNqRTthQUFNO1lBQ0wsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7d0JBQ3hFLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDO29CQUM3QixDQUFDLENBQUMsQ0FBQztpQkFDSjthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7WUFwQ0YsVUFBVTs7OztZQUZGLGdCQUFnQjs7OztJQUl2Qiw0Q0FBWTs7SUFDWixtREFLQzs7Ozs7SUFDRCwrQ0FBMEI7Ozs7O0lBR3hCLCtDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGb290ZXJDb25maWd1cmF0aW9uU2VydmljZSB7XHJcbiAgbGFiZWxzOiBhbnk7XHJcbiAgZGVmYXVsdExhYmVsczogYW55ID0ge1xyXG4gICAgY3VycmVudDogJ+W9k+WJjSAnLFxyXG4gICAgbGluZTogJ+ihjCcsXHJcbiAgICBwYWdlOiAn6aG1JyxcclxuICAgIGp1bXBUbzogJ+i3s+i9rOWIsCcsXHJcbiAgfVxyXG4gIHByaXZhdGUgX2xhbmd1YWdlOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB0aGlzLnRyYW5zbGF0ZS5vbkxhbmdDaGFuZ2Uuc3Vic2NyaWJlKChsYW5nOiBzdHJpbmcpID0+IHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgfSwgMCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2xhbmd1YWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsYW5nXCIpO1xyXG4gICAgaWYgKHRoaXMuX2xhbmd1YWdlID09PSBcInpoLUNOXCIgfHwgIXRoaXMuX2xhbmd1YWdlKSB7XHJcbiAgICAgIHRoaXMubGFiZWxzID0gdGhpcy5kZWZhdWx0TGFiZWxzO1xyXG4gICAgICAvLyB0aGlzLmxhYmVscyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubGFiZWxzLCBvcHRpb25zLmxhYmVscyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodGhpcy5fbGFuZ3VhZ2UpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGFuZ3VhZ2UpIHtcclxuICAgICAgICAgIHRoaXMudHJhbnNsYXRlLmdldChcIm5neEZvb3RlclNldHRpbmdzLmxhYmVsc1wiKS5zdWJzY3JpYmUoKHRyYW5zbGF0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxhYmVscyA9IHRyYW5zbGF0aW9ucztcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=