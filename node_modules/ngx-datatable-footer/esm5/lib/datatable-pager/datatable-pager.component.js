/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, } from "@angular/core";
import { debounceTime } from "rxjs/operators";
import { fromEvent } from "rxjs";
var DatatablePagerComponent = /** @class */ (function () {
    function DatatablePagerComponent() {
        this.linage = true;
        this.displayBothEnds = true;
        this.pageNumber = true;
        this.pageJumpTime = 1000;
        this.change = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.maxPage = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this._page = 1;
        // tslint:disable-next-line:member-ordering
        this._count = 0;
        // tslint:disable-next-line:member-ordering
        this._size = 0;
        // tslint:disable-next-line:member-ordering
        this.pageSizeColumn = true;
    }
    Object.defineProperty(DatatablePagerComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._size = val;
            this.pages = this.calcPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablePagerComponent.prototype, "count", {
        get: /**
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._count = val;
            this.pages = this.calcPages();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablePagerComponent.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this._page;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._page = val;
                this.pages = this.calcPages();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatatablePagerComponent.prototype, "totalPages", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
            return Math.max(count || 0, 1);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inputEvent = fromEvent(this.customerInput.nativeElement, "input")
            .pipe(debounceTime(this.pageJumpTime))
            .subscribe(function (event) {
            /** @type {?} */
            var value;
            if (event.target.value) {
                value = Number(event.target.value);
                if (value < 1) {
                    value = 1;
                    _this.customerInput.nativeElement.value = 1;
                }
                else if (value > _this.totalPages) {
                    value = _this.totalPages;
                    _this.customerInput.nativeElement.value = _this.totalPages;
                    _this.maxPage.emit(_this.totalPages);
                }
                _this.page = value;
                _this.selectPage(Math.round(value));
            }
        });
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.canPrevious = /**
     * @return {?}
     */
    function () {
        return this.page > 1;
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.canNext = /**
     * @return {?}
     */
    function () {
        return this.page < this.totalPages;
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.prevPage = /**
     * @return {?}
     */
    function () {
        this.selectPage(this.page - 1);
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        this.selectPage(this.page + 1);
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.firstPage = /**
     * @return {?}
     */
    function () {
        if (this.canPrevious()) {
            this.selectPage(1);
        }
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.lastPage = /**
     * @return {?}
     */
    function () {
        if (this.canNext()) {
            this.selectPage(this.totalPages);
        }
    };
    /**
     * @param {?} page
     * @param {?=} changePageSize
     * @return {?}
     */
    DatatablePagerComponent.prototype.selectPage = /**
     * @param {?} page
     * @param {?=} changePageSize
     * @return {?}
     */
    function (page, changePageSize) {
        if (changePageSize) {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.currentOffset = page;
                this.change.emit({ page: page });
            }
        }
        else {
            if (page > 0 && page <= this.totalPages) {
                this.page = page;
                this.currentOffset = page;
                this.change.emit({ page: page });
            }
        }
    };
    /**
     * @param {?=} page
     * @return {?}
     */
    DatatablePagerComponent.prototype.calcPages = /**
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        /** @type {?} */
        var pages = [];
        /** @type {?} */
        var startPage = 1;
        /** @type {?} */
        var endPage = this.totalPages;
        /** @type {?} */
        var maxSize = 5;
        /** @type {?} */
        var isMaxSized = maxSize < this.totalPages;
        page = page || this.page;
        if (isMaxSized) {
            startPage = (Math.ceil(page / maxSize) - 1) * maxSize + 1;
            endPage = Math.min(startPage + maxSize - 1, this.totalPages);
        }
        for (var num = startPage; num <= endPage; num++) {
            pages.push({ number: num, text: num });
        }
        return pages;
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.blurHandel = /**
     * @return {?}
     */
    function () {
        this.customerInput.nativeElement.value = this.page;
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    DatatablePagerComponent.prototype.changePageSize = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        this.datatable.limit = pageSize;
        this.selectPage(1, "changePageSize");
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatatablePagerComponent.prototype.keyDownHandel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.customerInput.nativeElement.value) {
            this.prveOffset = Number(this.customerInput.nativeElement.value);
        }
        if ((event.keyCode < 48 && event.keyCode !== 8) ||
            (event.keyCode > 57 && event.keyCode < 96) ||
            event.keyCode > 105) {
            return false;
        }
    };
    /**
     * @return {?}
     */
    DatatablePagerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.inputEvent.unsubscribe();
    };
    DatatablePagerComponent.decorators = [
        { type: Component, args: [{
                    selector: "app-datatable-pager",
                    template: " <ul class=\"pager\">\n    <li\n      class=\"page-size-continer\"\n      *ngIf=\"linage\"\n      (click)=\"pageSizeColumn = !pageSizeColumn\"\n      (mouseleave)=\"pageSizeColumn = true\"\n    >\n      <span>{{ size }} {{ labels.line }}/{{ labels.page }}</span>\n      <span\n        class=\"fa\"\n        [ngClass]=\"{\n          'fa-angle-up': pageSizeColumn,\n          'fa-angle-down': !pageSizeColumn\n        }\"\n      ></span>\n      <ul [hidden]=\"pageSizeColumn\" class=\"page-size-content\">\n        <li\n          *ngFor=\"let ps of pageSizes\"\n          (click)=\"changePageSize(ps)\"\n          [ngClass]=\"{ 'page-size-column-active': size === ps }\"\n        >\n          {{ ps }} {{ labels.line }}/{{ labels.page }}\n        </li>\n      </ul>\n    </li>\n    <li *ngIf=\"displayBothEnds\" [class.disabled]=\"!canPrevious()\">\n      <a (click)=\"firstPage()\">\n        <i class=\"{{ pagerPreviousIcon }}\"></i>\n      </a>\n    </li>\n    <li [class.disabled]=\"!canPrevious()\">\n      <a (click)=\"prevPage()\">\n        <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n      </a>\n    </li>\n    <li\n      class=\"pages\"\n      *ngFor=\"let pg of pages\"\n      [class.active]=\"pg.number === page\"\n    >\n      <a *ngIf=\"pageNumber\" (click)=\"selectPage(pg.number)\">\n        {{ pg.text }}\n      </a>\n    </li>\n    <li [class.disabled]=\"!canNext()\">\n      <a (click)=\"nextPage()\">\n        <i class=\"{{ pagerRightArrowIcon }}\"></i>\n      </a>\n    </li>\n    <li *ngIf=\"displayBothEnds\" [class.disabled]=\"!canNext()\">\n      <a (click)=\"lastPage()\">\n        <i class=\"{{ pagerNextIcon }}\"></i>\n      </a>\n    </li>\n    <li [ngStyle]=\"{ position: 'relative' }\">\n      <span>{{ labels.jumpTo }}</span>\n      <input\n        #customerInput\n        class=\"lz-jump-page\"\n        type=\"number\"\n        title=\" \"\n        rows=\"2\"\n        [min]=\"1\"\n        [ngModel]=\"page\"\n        (keydown)=\"keyDownHandel($event)\"\n        (blur)=\"blurHandel()\"\n      />{{ labels.page }}\n    </li>\n  </ul>",
                    styles: ["\n      .page-size-continer {\n        position: relative;\n        min-width: 80px;\n        height: 26px;\n        line-height: 26px;\n        text-align: center;\n        border-radius: 2px;\n        cursor: pointer;\n        padding: 0 10px !important;\n      }\n      .page-size-continer:hover {\n        background-color: rgba(158, 158, 158, 0.2);\n      }\n      .page-size-continer .page-size-content {\n        position: absolute;\n        bottom: 24px;\n        left: 0;\n        padding: 0;\n        background: #fff;\n        border-radius: 4px;\n        box-shadow: 0 0 15px 1px rgba(113, 106, 202, 0.2);\n        z-index: 11;\n      }\n      .page-size-continer .page-size-content li {\n        width: 100%;\n        padding: 4px 0;\n      }\n      .page-size-continer .page-size-content li:hover {\n        background-color: rgba(158, 158, 158, 0.2);\n      }\n      .page-size-continer .page-size-content .page-size-column-active {\n        color: #409eff;\n      }\n      input[type=\"number\"]::-webkit-inner-spin-button,\n      input[type=\"number\"]::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n      }\n      .lz-jump-page {\n        display: inline-block;\n        width: 50px;\n        border-radius: 2px;\n        margin-right: 6px;\n        padding-left: 4px;\n        border: solid 1px #ebedf2;\n      }\n      input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n    "]
                }] }
    ];
    DatatablePagerComponent.propDecorators = {
        pagerLeftArrowIcon: [{ type: Input }],
        pagerRightArrowIcon: [{ type: Input }],
        pagerPreviousIcon: [{ type: Input }],
        pagerNextIcon: [{ type: Input }],
        pageSizes: [{ type: Input }],
        datatable: [{ type: Input }],
        linage: [{ type: Input }],
        displayBothEnds: [{ type: Input }],
        pageNumber: [{ type: Input }],
        pageJumpTime: [{ type: Input }],
        labels: [{ type: Input }],
        size: [{ type: Input }],
        count: [{ type: Input }],
        page: [{ type: Input }],
        change: [{ type: Output }],
        pageChange: [{ type: Output }],
        maxPage: [{ type: Output }],
        customerInput: [{ type: ViewChild, args: ["customerInput",] }]
    };
    return DatatablePagerComponent;
}());
export { DatatablePagerComponent };
if (false) {
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerLeftArrowIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerRightArrowIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerPreviousIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pagerNextIcon;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageSizes;
    /** @type {?} */
    DatatablePagerComponent.prototype.datatable;
    /** @type {?} */
    DatatablePagerComponent.prototype.linage;
    /** @type {?} */
    DatatablePagerComponent.prototype.displayBothEnds;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageNumber;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageJumpTime;
    /** @type {?} */
    DatatablePagerComponent.prototype.labels;
    /** @type {?} */
    DatatablePagerComponent.prototype.change;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageChange;
    /** @type {?} */
    DatatablePagerComponent.prototype.maxPage;
    /** @type {?} */
    DatatablePagerComponent.prototype.currentOffset;
    /** @type {?} */
    DatatablePagerComponent.prototype.prveOffset;
    /** @type {?} */
    DatatablePagerComponent.prototype.inputEvent;
    /** @type {?} */
    DatatablePagerComponent.prototype.customerInput;
    /** @type {?} */
    DatatablePagerComponent.prototype._page;
    /** @type {?} */
    DatatablePagerComponent.prototype._count;
    /** @type {?} */
    DatatablePagerComponent.prototype._size;
    /** @type {?} */
    DatatablePagerComponent.prototype.pages;
    /** @type {?} */
    DatatablePagerComponent.prototype.pageSizeColumn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLXBhZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1kYXRhdGFibGUtZm9vdGVyLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS1wYWdlci9kYXRhdGFibGUtcGFnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUVaLFNBQVMsRUFDVCxVQUFVLEdBRVgsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBRS9DO0lBQUE7UUFvSVcsV0FBTSxHQUFhLElBQUksQ0FBQztRQUN4QixvQkFBZSxHQUFhLElBQUksQ0FBQztRQUNqQyxlQUFVLEdBQWEsSUFBSSxDQUFDO1FBQzVCLGlCQUFZLEdBQVksSUFBSSxDQUFDO1FBb0M1QixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0MsZUFBVSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25ELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7UUFpQzFELFVBQUssR0FBRyxDQUFDLENBQUM7O1FBRVYsV0FBTSxHQUFHLENBQUMsQ0FBQzs7UUFFWCxVQUFLLEdBQUcsQ0FBQyxDQUFDOztRQUlWLG1CQUFjLEdBQVksSUFBSSxDQUFDO0lBNkZqQyxDQUFDO0lBektDLHNCQUNJLHlDQUFJOzs7O1FBSVI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzs7Ozs7UUFQRCxVQUNTLEdBQVc7WUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFL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QUFXOztJQUVYLGlEQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIE9uSW5pdCxcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgVmlld0NoaWxkLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgT25EZXN0cm95LFxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6IFwiYXBwLWRhdGF0YWJsZS1wYWdlclwiLFxyXG4gIHRlbXBsYXRlOiBgIDx1bCBjbGFzcz1cInBhZ2VyXCI+XHJcbiAgICA8bGlcclxuICAgICAgY2xhc3M9XCJwYWdlLXNpemUtY29udGluZXJcIlxyXG4gICAgICAqbmdJZj1cImxpbmFnZVwiXHJcbiAgICAgIChjbGljayk9XCJwYWdlU2l6ZUNvbHVtbiA9ICFwYWdlU2l6ZUNvbHVtblwiXHJcbiAgICAgIChtb3VzZWxlYXZlKT1cInBhZ2VTaXplQ29sdW1uID0gdHJ1ZVwiXHJcbiAgICA+XHJcbiAgICAgIDxzcGFuPnt7IHNpemUgfX0ge3sgbGFiZWxzLmxpbmUgfX0ve3sgbGFiZWxzLnBhZ2UgfX08L3NwYW4+XHJcbiAgICAgIDxzcGFuXHJcbiAgICAgICAgY2xhc3M9XCJmYVwiXHJcbiAgICAgICAgW25nQ2xhc3NdPVwie1xyXG4gICAgICAgICAgJ2ZhLWFuZ2xlLXVwJzogcGFnZVNpemVDb2x1bW4sXHJcbiAgICAgICAgICAnZmEtYW5nbGUtZG93bic6ICFwYWdlU2l6ZUNvbHVtblxyXG4gICAgICAgIH1cIlxyXG4gICAgICA+PC9zcGFuPlxyXG4gICAgICA8dWwgW2hpZGRlbl09XCJwYWdlU2l6ZUNvbHVtblwiIGNsYXNzPVwicGFnZS1zaXplLWNvbnRlbnRcIj5cclxuICAgICAgICA8bGlcclxuICAgICAgICAgICpuZ0Zvcj1cImxldCBwcyBvZiBwYWdlU2l6ZXNcIlxyXG4gICAgICAgICAgKGNsaWNrKT1cImNoYW5nZVBhZ2VTaXplKHBzKVwiXHJcbiAgICAgICAgICBbbmdDbGFzc109XCJ7ICdwYWdlLXNpemUtY29sdW1uLWFjdGl2ZSc6IHNpemUgPT09IHBzIH1cIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIHt7IHBzIH19IHt7IGxhYmVscy5saW5lIH19L3t7IGxhYmVscy5wYWdlIH19XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvbGk+XHJcbiAgICA8bGkgKm5nSWY9XCJkaXNwbGF5Qm90aEVuZHNcIiBbY2xhc3MuZGlzYWJsZWRdPVwiIWNhblByZXZpb3VzKClcIj5cclxuICAgICAgPGEgKGNsaWNrKT1cImZpcnN0UGFnZSgpXCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJ7eyBwYWdlclByZXZpb3VzSWNvbiB9fVwiPjwvaT5cclxuICAgICAgPC9hPlxyXG4gICAgPC9saT5cclxuICAgIDxsaSBbY2xhc3MuZGlzYWJsZWRdPVwiIWNhblByZXZpb3VzKClcIj5cclxuICAgICAgPGEgKGNsaWNrKT1cInByZXZQYWdlKClcIj5cclxuICAgICAgICA8aSBjbGFzcz1cInt7IHBhZ2VyTGVmdEFycm93SWNvbiB9fVwiPjwvaT5cclxuICAgICAgPC9hPlxyXG4gICAgPC9saT5cclxuICAgIDxsaVxyXG4gICAgICBjbGFzcz1cInBhZ2VzXCJcclxuICAgICAgKm5nRm9yPVwibGV0IHBnIG9mIHBhZ2VzXCJcclxuICAgICAgW2NsYXNzLmFjdGl2ZV09XCJwZy5udW1iZXIgPT09IHBhZ2VcIlxyXG4gICAgPlxyXG4gICAgICA8YSAqbmdJZj1cInBhZ2VOdW1iZXJcIiAoY2xpY2spPVwic2VsZWN0UGFnZShwZy5udW1iZXIpXCI+XHJcbiAgICAgICAge3sgcGcudGV4dCB9fVxyXG4gICAgICA8L2E+XHJcbiAgICA8L2xpPlxyXG4gICAgPGxpIFtjbGFzcy5kaXNhYmxlZF09XCIhY2FuTmV4dCgpXCI+XHJcbiAgICAgIDxhIChjbGljayk9XCJuZXh0UGFnZSgpXCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJ7eyBwYWdlclJpZ2h0QXJyb3dJY29uIH19XCI+PC9pPlxyXG4gICAgICA8L2E+XHJcbiAgICA8L2xpPlxyXG4gICAgPGxpICpuZ0lmPVwiZGlzcGxheUJvdGhFbmRzXCIgW2NsYXNzLmRpc2FibGVkXT1cIiFjYW5OZXh0KClcIj5cclxuICAgICAgPGEgKGNsaWNrKT1cImxhc3RQYWdlKClcIj5cclxuICAgICAgICA8aSBjbGFzcz1cInt7IHBhZ2VyTmV4dEljb24gfX1cIj48L2k+XHJcbiAgICAgIDwvYT5cclxuICAgIDwvbGk+XHJcbiAgICA8bGkgW25nU3R5bGVdPVwieyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9XCI+XHJcbiAgICAgIDxzcGFuPnt7IGxhYmVscy5qdW1wVG8gfX08L3NwYW4+XHJcbiAgICAgIDxpbnB1dFxyXG4gICAgICAgICNjdXN0b21lcklucHV0XHJcbiAgICAgICAgY2xhc3M9XCJsei1qdW1wLXBhZ2VcIlxyXG4gICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgIHRpdGxlPVwiIFwiXHJcbiAgICAgICAgcm93cz1cIjJcIlxyXG4gICAgICAgIFttaW5dPVwiMVwiXHJcbiAgICAgICAgW25nTW9kZWxdPVwicGFnZVwiXHJcbiAgICAgICAgKGtleWRvd24pPVwia2V5RG93bkhhbmRlbCgkZXZlbnQpXCJcclxuICAgICAgICAoYmx1cik9XCJibHVySGFuZGVsKClcIlxyXG4gICAgICAvPnt7IGxhYmVscy5wYWdlIH19XHJcbiAgICA8L2xpPlxyXG4gIDwvdWw+YCxcclxuICBzdHlsZXM6IFtcclxuICAgIGBcclxuICAgICAgLnBhZ2Utc2l6ZS1jb250aW5lciB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIG1pbi13aWR0aDogODBweDtcclxuICAgICAgICBoZWlnaHQ6IDI2cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI2cHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgcGFkZGluZzogMCAxMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICAgIH1cclxuICAgICAgLnBhZ2Utc2l6ZS1jb250aW5lcjpob3ZlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNTgsIDE1OCwgMTU4LCAwLjIpO1xyXG4gICAgICB9XHJcbiAgICAgIC5wYWdlLXNpemUtY29udGluZXIgLnBhZ2Utc2l6ZS1jb250ZW50IHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgYm90dG9tOiAyNHB4O1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICBib3gtc2hhZG93OiAwIDAgMTVweCAxcHggcmdiYSgxMTMsIDEwNiwgMjAyLCAwLjIpO1xyXG4gICAgICAgIHotaW5kZXg6IDExO1xyXG4gICAgICB9XHJcbiAgICAgIC5wYWdlLXNpemUtY29udGluZXIgLnBhZ2Utc2l6ZS1jb250ZW50IGxpIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBwYWRkaW5nOiA0cHggMDtcclxuICAgICAgfVxyXG4gICAgICAucGFnZS1zaXplLWNvbnRpbmVyIC5wYWdlLXNpemUtY29udGVudCBsaTpob3ZlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNTgsIDE1OCwgMTU4LCAwLjIpO1xyXG4gICAgICB9XHJcbiAgICAgIC5wYWdlLXNpemUtY29udGluZXIgLnBhZ2Utc2l6ZS1jb250ZW50IC5wYWdlLXNpemUtY29sdW1uLWFjdGl2ZSB7XHJcbiAgICAgICAgY29sb3I6ICM0MDllZmY7XHJcbiAgICAgIH1cclxuICAgICAgaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcclxuICAgICAgaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XHJcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgIC5sei1qdW1wLXBhZ2Uge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICB3aWR0aDogNTBweDtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA2cHg7XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XHJcbiAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2ViZWRmMjtcclxuICAgICAgfVxyXG4gICAgICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdIHtcclxuICAgICAgICAtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcclxuICAgICAgfVxyXG4gICAgYCxcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YXRhYmxlUGFnZXJDb21wb25lbnRcclxuICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICBASW5wdXQoKSBwYWdlckxlZnRBcnJvd0ljb246IHN0cmluZztcclxuICBASW5wdXQoKSBwYWdlclJpZ2h0QXJyb3dJY29uOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcGFnZXJQcmV2aW91c0ljb246IHN0cmluZztcclxuICBASW5wdXQoKSBwYWdlck5leHRJY29uOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcGFnZVNpemVzOiBhbnlbXTtcclxuICBASW5wdXQoKSBkYXRhdGFibGU6IGFueTtcclxuICBASW5wdXQoKSBsaW5hZ2U/OiBCb29sZWFuID0gdHJ1ZTtcclxuICBASW5wdXQoKSBkaXNwbGF5Qm90aEVuZHM/OiBCb29sZWFuID0gdHJ1ZTtcclxuICBASW5wdXQoKSBwYWdlTnVtYmVyPzogQm9vbGVhbiA9IHRydWU7XHJcbiAgQElucHV0KCkgcGFnZUp1bXBUaW1lPzogbnVtYmVyID0gMTAwMDtcclxuICBASW5wdXQoKSBsYWJlbHM6IGFueTtcclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgc2l6ZSh2YWw6IG51bWJlcikge1xyXG4gICAgdGhpcy5fc2l6ZSA9IHZhbDtcclxuICAgIHRoaXMucGFnZXMgPSB0aGlzLmNhbGNQYWdlcygpO1xyXG4gIH1cclxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBjb3VudCh2YWw6IG51bWJlcikge1xyXG4gICAgdGhpcy5fY291bnQgPSB2YWw7XHJcbiAgICB0aGlzLnBhZ2VzID0gdGhpcy5jYWxjUGFnZXMoKTtcclxuICB9XHJcbiAgZ2V0IGNvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fY291bnQ7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBwYWdlKHZhbDogbnVtYmVyKSB7XHJcbiAgICBpZiAodmFsKSB7XHJcbiAgICAgIHRoaXMuX3BhZ2UgPSB2YWw7XHJcbiAgICAgIHRoaXMucGFnZXMgPSB0aGlzLmNhbGNQYWdlcygpO1xyXG4gICAgfVxyXG4gIH1cclxuICBnZXQgcGFnZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3BhZ2U7XHJcbiAgfVxyXG4gIGdldCB0b3RhbFBhZ2VzKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBjb3VudCA9IHRoaXMuc2l6ZSA8IDEgPyAxIDogTWF0aC5jZWlsKHRoaXMuY291bnQgLyB0aGlzLnNpemUpO1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KGNvdW50IHx8IDAsIDEpO1xyXG4gIH1cclxuXHJcbiAgQE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBtYXhQYWdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY3VycmVudE9mZnNldDogbnVtYmVyO1xyXG4gIHBydmVPZmZzZXQ6IG51bWJlcjtcclxuICBpbnB1dEV2ZW50OiBTdWJzY3JpcHRpb247XHJcblxyXG4gIEBWaWV3Q2hpbGQoXCJjdXN0b21lcklucHV0XCIpXHJcbiAgY3VzdG9tZXJJbnB1dDogRWxlbWVudFJlZjtcclxuXHJcbiAgbmdPbkluaXQoKSB7fVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmlucHV0RXZlbnQgPSBmcm9tRXZlbnQodGhpcy5jdXN0b21lcklucHV0Lm5hdGl2ZUVsZW1lbnQsIFwiaW5wdXRcIilcclxuICAgICAgLnBpcGUoZGVib3VuY2VUaW1lKHRoaXMucGFnZUp1bXBUaW1lKSlcclxuICAgICAgLnN1YnNjcmliZSgoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGxldCB2YWx1ZTogbnVtYmVyO1xyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQudmFsdWUpIHtcclxuICAgICAgICAgIHZhbHVlID0gTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICBpZiAodmFsdWUgPCAxKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21lcklucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAxO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IHRoaXMudG90YWxQYWdlcykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMudG90YWxQYWdlcztcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21lcklucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLnRvdGFsUGFnZXM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4UGFnZS5lbWl0KHRoaXMudG90YWxQYWdlcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnBhZ2UgPSB2YWx1ZTtcclxuICAgICAgICAgIHRoaXMuc2VsZWN0UGFnZShNYXRoLnJvdW5kKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZW1iZXItb3JkZXJpbmdcclxuICBfcGFnZSA9IDE7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1lbWJlci1vcmRlcmluZ1xyXG4gIF9jb3VudCA9IDA7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1lbWJlci1vcmRlcmluZ1xyXG4gIF9zaXplID0gMDtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWVtYmVyLW9yZGVyaW5nXHJcbiAgcGFnZXM6IGFueTtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWVtYmVyLW9yZGVyaW5nXHJcbiAgcGFnZVNpemVDb2x1bW46IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICBjYW5QcmV2aW91cygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2UgPiAxO1xyXG4gIH1cclxuXHJcbiAgY2FuTmV4dCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2UgPCB0aGlzLnRvdGFsUGFnZXM7XHJcbiAgfVxyXG5cclxuICBwcmV2UGFnZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2VsZWN0UGFnZSh0aGlzLnBhZ2UgLSAxKTtcclxuICB9XHJcblxyXG4gIG5leHRQYWdlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zZWxlY3RQYWdlKHRoaXMucGFnZSArIDEpO1xyXG4gIH1cclxuXHJcbiAgZmlyc3RQYWdlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY2FuUHJldmlvdXMoKSkge1xyXG4gICAgICB0aGlzLnNlbGVjdFBhZ2UoMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsYXN0UGFnZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmNhbk5leHQoKSkge1xyXG4gICAgICB0aGlzLnNlbGVjdFBhZ2UodGhpcy50b3RhbFBhZ2VzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlbGVjdFBhZ2UocGFnZTogbnVtYmVyLCBjaGFuZ2VQYWdlU2l6ZT86IGFueSk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZVBhZ2VTaXplKSB7XHJcbiAgICAgIGlmIChwYWdlID4gMCAmJiBwYWdlIDw9IHRoaXMudG90YWxQYWdlcykge1xyXG4gICAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50T2Zmc2V0ID0gcGFnZTtcclxuICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KHsgcGFnZSB9KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHBhZ2UgPiAwICYmIHBhZ2UgPD0gdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRPZmZzZXQgPSBwYWdlO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoeyBwYWdlIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjUGFnZXMocGFnZT86IG51bWJlcik6IGFueVtdIHtcclxuICAgIGNvbnN0IHBhZ2VzID0gW107XHJcbiAgICBsZXQgc3RhcnRQYWdlID0gMTtcclxuICAgIGxldCBlbmRQYWdlID0gdGhpcy50b3RhbFBhZ2VzO1xyXG4gICAgY29uc3QgbWF4U2l6ZSA9IDU7XHJcbiAgICBjb25zdCBpc01heFNpemVkID0gbWF4U2l6ZSA8IHRoaXMudG90YWxQYWdlcztcclxuXHJcbiAgICBwYWdlID0gcGFnZSB8fCB0aGlzLnBhZ2U7XHJcblxyXG4gICAgaWYgKGlzTWF4U2l6ZWQpIHtcclxuICAgICAgc3RhcnRQYWdlID0gKE1hdGguY2VpbChwYWdlIC8gbWF4U2l6ZSkgLSAxKSAqIG1heFNpemUgKyAxO1xyXG4gICAgICBlbmRQYWdlID0gTWF0aC5taW4oc3RhcnRQYWdlICsgbWF4U2l6ZSAtIDEsIHRoaXMudG90YWxQYWdlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgbnVtID0gc3RhcnRQYWdlOyBudW0gPD0gZW5kUGFnZTsgbnVtKyspIHtcclxuICAgICAgcGFnZXMucHVzaCh7IG51bWJlcjogbnVtLCB0ZXh0OiBudW0gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhZ2VzO1xyXG4gIH1cclxuXHJcbiAgYmx1ckhhbmRlbCgpIHtcclxuICAgIHRoaXMuY3VzdG9tZXJJbnB1dC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy5wYWdlO1xyXG4gIH1cclxuXHJcbiAgY2hhbmdlUGFnZVNpemUocGFnZVNpemU6IG51bWJlcikge1xyXG4gICAgdGhpcy5kYXRhdGFibGUubGltaXQgPSBwYWdlU2l6ZTtcclxuICAgIHRoaXMuc2VsZWN0UGFnZSgxLCBcImNoYW5nZVBhZ2VTaXplXCIpO1xyXG4gIH1cclxuXHJcbiAga2V5RG93bkhhbmRlbChldmVudDogYW55KSB7XHJcbiAgICBpZiAodGhpcy5jdXN0b21lcklucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUpIHtcclxuICAgICAgdGhpcy5wcnZlT2Zmc2V0ID0gTnVtYmVyKHRoaXMuY3VzdG9tZXJJbnB1dC5uYXRpdmVFbGVtZW50LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIChldmVudC5rZXlDb2RlIDwgNDggJiYgZXZlbnQua2V5Q29kZSAhPT0gOCkgfHxcclxuICAgICAgKGV2ZW50LmtleUNvZGUgPiA1NyAmJiBldmVudC5rZXlDb2RlIDwgOTYpIHx8XHJcbiAgICAgIGV2ZW50LmtleUNvZGUgPiAxMDVcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuaW5wdXRFdmVudC51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=