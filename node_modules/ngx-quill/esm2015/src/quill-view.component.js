import * as tslib_1 from "tslib";
import { isPlatformServer } from '@angular/common';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { Component, ElementRef, Inject, Input, PLATFORM_ID, Renderer2, ViewEncapsulation } from '@angular/core';
import { defaultModules } from './quill-defaults';
// tslint:disable-next-line:variable-name
let Quill = null;
const getFormat = (format, configFormat) => {
    const passedFormat = format || configFormat;
    return passedFormat || 'html';
};
const ɵ0 = getFormat;
let QuillViewComponent = class QuillViewComponent {
    constructor(
    // tslint:disable-next-line:ban-types
    platformId, config, renderer, elementRef) {
        this.platformId = platformId;
        this.config = config;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.strict = true;
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = (quillEditor, value) => {
            const format = getFormat(this.format, this.config.format);
            let content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    ngOnChanges(changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        if (!Quill) {
            Quill = require('quill');
        }
        const modules = this.modules || (this.config.modules || defaultModules);
        modules.toolbar = false;
        this.customOptions.forEach((customOption) => {
            const newCustomOption = Quill.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            Quill.register(newCustomOption, true);
        });
        let debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        let formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats || this.config.formats === null ? this.config.formats : undefined;
        }
        const theme = this.theme || (this.config.theme ? this.config.theme : 'snow');
        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
        this.quillEditor = new Quill(this.editorElem, {
            debug,
            formats,
            modules,
            readOnly: true,
            strict: this.strict,
            theme
        });
        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
        if (this.content) {
            this.valueSetter(this.quillEditor, this.content);
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], QuillViewComponent.prototype, "format", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], QuillViewComponent.prototype, "theme", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], QuillViewComponent.prototype, "modules", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], QuillViewComponent.prototype, "debug", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], QuillViewComponent.prototype, "formats", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], QuillViewComponent.prototype, "strict", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], QuillViewComponent.prototype, "content", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], QuillViewComponent.prototype, "customOptions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], QuillViewComponent.prototype, "preserveWhitespace", void 0);
QuillViewComponent = tslib_1.__decorate([
    Component({
        encapsulation: ViewEncapsulation.None,
        selector: 'quill-view',
        template: `
`,
        styles: [`
.ql-container.ngx-quill-view {
  border: 0;
}
`]
    }),
    tslib_1.__param(0, Inject(PLATFORM_ID)),
    tslib_1.__param(1, Inject(QUILL_CONFIG_TOKEN)),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Renderer2,
        ElementRef])
], QuillViewComponent);
export { QuillViewComponent };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,