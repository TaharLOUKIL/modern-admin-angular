{
  "version": "experimental",
  "tags": [
    {
      "name": "cds-accordion-content",
      "path": "./accordion/accordion-content.element.d.ts",
      "description": "Web component accordion content to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--background"
        }
      ]
    },
    {
      "name": "cds-accordion-header",
      "path": "./accordion/accordion-header.element.d.ts",
      "description": "Web component accordion to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--background"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--icon-transform"
        }
      ]
    },
    {
      "name": "cds-accordion-panel",
      "path": "./accordion/accordion-panel.element.d.ts",
      "description": "Web component accordion panel to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "properties": [
        {
          "name": "cdsMotion",
          "type": "string"
        },
        {
          "name": "cdsMotionChange"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "expanded",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "expandedChange",
          "description": "notify when the user has clicked the panel header"
        }
      ],
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-accordion-header"
        },
        {
          "name": "cds-accordion-content"
        }
      ],
      "cssProperties": [
        {
          "name": "--animation-duration"
        },
        {
          "name": "--animation-easing"
        }
      ]
    },
    {
      "name": "cds-accordion",
      "path": "./accordion/accordion.element.d.ts",
      "description": "Web component accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the accordion"
        }
      ],
      "cssProperties": [
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-accordion",
      "path": "./accordion/register.d.ts",
      "description": "Web component accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the accordion"
        }
      ],
      "cssProperties": [
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-accordion-panel",
      "path": "./accordion/register.d.ts",
      "description": "Web component accordion panel to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "properties": [
        {
          "name": "cdsMotion",
          "type": "string"
        },
        {
          "name": "cdsMotionChange"
        },
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "expanded",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "expandedChange",
          "description": "notify when the user has clicked the panel header"
        }
      ],
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-accordion-header"
        },
        {
          "name": "cds-accordion-content"
        }
      ],
      "cssProperties": [
        {
          "name": "--animation-duration"
        },
        {
          "name": "--animation-easing"
        }
      ]
    },
    {
      "name": "cds-accordion-content",
      "path": "./accordion/register.d.ts",
      "description": "Web component accordion content to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--background"
        }
      ]
    },
    {
      "name": "cds-accordion-header",
      "path": "./accordion/register.d.ts",
      "description": "Web component accordion to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n   <cds-accordion-panel expanded>\n     <cds-accordion-header>Item 1</cds-accordion-header>\n     <cds-accordion-content>Content 1</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel>\n     <cds-accordion-header>Item 2</cds-accordion-header>\n     <cds-accordion-content>Content 2</cds-accordion-content>\n   </cds-accordion-panel>\n   <cds-accordion-panel disabled>\n     <cds-accordion-header>Item 3</cds-accordion-header>\n     <cds-accordion-content>Content 3</cds-accordion-content>\n   </cds-accordion-panel>\n</cds-accordion>\n```",
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--background"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--icon-transform"
        }
      ]
    },
    {
      "name": "cds-alert-actions",
      "path": "./alert/alert-actions.element.d.ts",
      "description": "Web component alert actions to be used inside default and banner alerts.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n<cds-alert>\n   Lorem ipsum dolor sit amet\n   <cds-alert-actions>\n     <cds-button>Fix</cds-button>\n   </cds-alert-actions>\n</cds-alert>\n```",
      "slots": [
        {
          "name": ""
        }
      ],
      "cssProperties": [
        {
          "name": "--action-text-color"
        },
        {
          "name": "--action-hover-text-color"
        },
        {
          "name": "--action-font-size"
        }
      ]
    },
    {
      "name": "cds-alert-group",
      "path": "./alert/alert-group.element.d.ts",
      "description": "Alert groups are containers for a set of alerts. Alert groups can hold one or many alerts\ninside of them with the expectation that all alerts will be of the same type. The exception\nto this rule is the `loading` alert type, which will be displayed regardless of the type\nof alert group containing it.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n   <cds-alert-group type=\"danger\">\n     <cds-alert closable=\"true\">\n       Single alert\n       <cds-alert-actions>\n         buttons, links\n       </cds-alert-actions>\n     </cds-alert>\n     <cds-alert type=\"loading\">\n       Single Alert\n     </cds-alert>\n     <cds-alert closable=\"true\">\n       Another alert\n       <cds-alert-actions>\n         buttons, links\n       </cds-alert-actions>\n     </cds-alert>\n   </cds-alert-group>\n```",
      "properties": [
        {
          "name": "size",
          "type": "default | sm"
        },
        {
          "name": "type",
          "type": "default | banner | light"
        },
        {
          "name": "role",
          "description": "Autosets the alert groups aria role to 'region'",
          "type": "string"
        },
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger | alt | loading"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for the alerts"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--icon-size"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-alert",
      "path": "./alert/alert.element.d.ts",
      "description": "Alerts are banners that communicate a message with a severity attached to it.\nThey grab the user’s attention to provide critical information needed in context.\n\nAlerts outside of a cds-alert-group or cds-app-alert-group component will be\ndisplayed as a \"lightweight alert\". Lightweight alerts, by default, provide no\nclose button component and they inherit no status (a.k.a. success, danger, etc.).\n\nAlerts inside a cds-alert-group component inherit their status from the containing\nalert group.\n\nAlerts inside a cds-app-alert-group component inherit their status as a default from\nthe containing app-alert group, although it can be overridden on individual alerts.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n   <cds-alert>\n     Single Alert\n     <cds-alert-actions>\n       buttons, links\n     </cds-alert-actions>\n   </cds-alert>\n```",
      "properties": [
        {
          "name": "size",
          "type": "default | sm"
        },
        {
          "name": "closable",
          "description": "If false, the alert will not render the close button.\n\nLightweight alerts do not display close buttons",
          "type": "boolean"
        },
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger | alt | loading"
        },
        {
          "name": "i18n",
          "type": "{ closeButtonAriaLabel: string; loading: string; info: string; success: string; warning: string; danger: string; }"
        }
      ],
      "events": [
        {
          "name": "closeChange",
          "description": "notify when the user has clicked the dismiss button"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the alert"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--close-icon-color"
        },
        {
          "name": "--close-icon-color-hover"
        }
      ]
    },
    {
      "name": "cds-alert",
      "path": "./alert/register.d.ts",
      "description": "Alerts are banners that communicate a message with a severity attached to it.\nThey grab the user’s attention to provide critical information needed in context.\n\nAlerts outside of a cds-alert-group or cds-app-alert-group component will be\ndisplayed as a \"lightweight alert\". Lightweight alerts, by default, provide no\nclose button component and they inherit no status (a.k.a. success, danger, etc.).\n\nAlerts inside a cds-alert-group component inherit their status from the containing\nalert group.\n\nAlerts inside a cds-app-alert-group component inherit their status as a default from\nthe containing app-alert group, although it can be overridden on individual alerts.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n   <cds-alert>\n     Single Alert\n     <cds-alert-actions>\n       buttons, links\n     </cds-alert-actions>\n   </cds-alert>\n```",
      "properties": [
        {
          "name": "size",
          "type": "default | sm"
        },
        {
          "name": "closable",
          "description": "If false, the alert will not render the close button.\n\nLightweight alerts do not display close buttons",
          "type": "boolean"
        },
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger | alt | loading"
        },
        {
          "name": "i18n",
          "type": "{ closeButtonAriaLabel: string; loading: string; info: string; success: string; warning: string; danger: string; }"
        }
      ],
      "events": [
        {
          "name": "closeChange",
          "description": "notify when the user has clicked the dismiss button"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the alert"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--close-icon-color"
        },
        {
          "name": "--close-icon-color-hover"
        }
      ]
    },
    {
      "name": "cds-alert-actions",
      "path": "./alert/register.d.ts",
      "description": "Web component alert actions to be used inside default and banner alerts.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n<cds-alert>\n   Lorem ipsum dolor sit amet\n   <cds-alert-actions>\n     <cds-button>Fix</cds-button>\n   </cds-alert-actions>\n</cds-alert>\n```",
      "slots": [
        {
          "name": ""
        }
      ],
      "cssProperties": [
        {
          "name": "--action-text-color"
        },
        {
          "name": "--action-hover-text-color"
        },
        {
          "name": "--action-font-size"
        }
      ]
    },
    {
      "name": "cds-alert-group",
      "path": "./alert/register.d.ts",
      "description": "Alert groups are containers for a set of alerts. Alert groups can hold one or many alerts\ninside of them with the expectation that all alerts will be of the same type. The exception\nto this rule is the `loading` alert type, which will be displayed regardless of the type\nof alert group containing it.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n   <cds-alert-group type=\"danger\">\n     <cds-alert closable=\"true\">\n       Single alert\n       <cds-alert-actions>\n         buttons, links\n       </cds-alert-actions>\n     </cds-alert>\n     <cds-alert type=\"loading\">\n       Single Alert\n     </cds-alert>\n     <cds-alert closable=\"true\">\n       Another alert\n       <cds-alert-actions>\n         buttons, links\n       </cds-alert-actions>\n     </cds-alert>\n   </cds-alert-group>\n```",
      "properties": [
        {
          "name": "size",
          "type": "default | sm"
        },
        {
          "name": "type",
          "type": "default | banner | light"
        },
        {
          "name": "role",
          "description": "Autosets the alert groups aria role to 'region'",
          "type": "string"
        },
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger | alt | loading"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for the alerts"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--icon-color"
        },
        {
          "name": "--icon-size"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-badge",
      "path": "./badge/badge.element.d.ts",
      "description": "Badges provide a method to highlight a count of an element either next to it\nor inside the element itself.\n\n```typescript\nimport '@cds/core/badge/register.js';\n```\n\n```html\n<cds-badge status=\"info\">2<span cds-layout=\"display:screen-reader-only\"> items. Item text for screen-readers should be added to badges in elements that will only be read in a screen-reader.</span></cds-badge>\n```",
      "properties": [
        {
          "name": "color",
          "description": "Sets the color of the badge",
          "type": "\"default\" | \"gray\" | \"purple\" | \"blue\" | \"orange\" | \"light-blue\" | null"
        },
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the badge"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--size"
        }
      ]
    },
    {
      "name": "cds-badge",
      "path": "./badge/register.d.ts",
      "description": "Badges provide a method to highlight a count of an element either next to it\nor inside the element itself.\n\n```typescript\nimport '@cds/core/badge/register.js';\n```\n\n```html\n<cds-badge status=\"info\">2<span cds-layout=\"display:screen-reader-only\"> items. Item text for screen-readers should be added to badges in elements that will only be read in a screen-reader.</span></cds-badge>\n```",
      "properties": [
        {
          "name": "color",
          "description": "Sets the color of the badge",
          "type": "\"default\" | \"gray\" | \"purple\" | \"blue\" | \"orange\" | \"light-blue\" | null"
        },
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the badge"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--size"
        }
      ]
    },
    {
      "name": "cds-breadcrumb",
      "path": "./breadcrumb/breadcrumb.element.d.ts",
      "description": "```typescript\nimport '@cds/core/breadcrumb/register.js';\n```\n\n```html\n<cds-breadcrumb aria-label=\"breadcrumb\">\n   <a href=\"/home\" cds-text=\"link\">Home</a>\n   <a href=\"/parent\" cds-text=\"link\">Parent page</a>\n   <span aria-current=\"page\">Current page</span>\n</cds-breadcrumb>\n```",
      "cssProperties": [
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--color"
        }
      ]
    },
    {
      "name": "cds-breadcrumb",
      "path": "./breadcrumb/register.d.ts",
      "description": "```typescript\nimport '@cds/core/breadcrumb/register.js';\n```\n\n```html\n<cds-breadcrumb aria-label=\"breadcrumb\">\n   <a href=\"/home\" cds-text=\"link\">Home</a>\n   <a href=\"/parent\" cds-text=\"link\">Parent page</a>\n   <span aria-current=\"page\">Current page</span>\n</cds-breadcrumb>\n```",
      "cssProperties": [
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--color"
        }
      ]
    },
    {
      "name": "cds-button",
      "path": "./button/button.element.d.ts",
      "description": "Buttons allow an application to communicate action and direct user intent.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-button>submit</cds-button>\n```",
      "properties": [
        {
          "name": "action",
          "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.",
          "type": "\"solid\" | \"outline\" | \"flat\" | \"flat-inline\""
        },
        {
          "name": "status",
          "description": "Sets the color of the button to match the following string statuses",
          "type": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"neutral\" | \"inverse\""
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the button based on the following string values:",
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "block",
          "description": "Sets if the button should be full width with display block",
          "type": "boolean"
        },
        {
          "name": "privateHost",
          "type": "HTMLElement"
        },
        {
          "name": "loadingState",
          "type": "default | loading | success | error"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup[]"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--box-shadow-color"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-family"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--height"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--min-width"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--text-decoration"
        },
        {
          "name": "--text-transform"
        }
      ]
    },
    {
      "name": "cds-icon-button",
      "path": "./button/icon-button.element.d.ts",
      "description": "Icon buttons give applications a compact alternative to communicate action and direct user intent.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-icon-button><cds-icon shape=\"download\"></cds-icon></cds-icon-button>\n```",
      "properties": [
        {
          "name": "ariaLabel",
          "description": "The aria-label attribute is required for accessibility. The cds-icon-button\nwill warn if used without the aria-label being set.\n\nIdeally, the aria-label will be specific to the button's purpose. Avoid sharing\ngeneric labels across multiple icon buttons on a page.",
          "type": "string"
        },
        {
          "name": "action",
          "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.",
          "type": "\"solid\" | \"outline\" | \"flat\" | \"flat-inline\""
        },
        {
          "name": "status",
          "description": "Sets the color of the button to match the following string statuses",
          "type": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"neutral\" | \"inverse\""
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the button based on the following string values:",
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "block",
          "description": "Sets if the button should be full width with display block",
          "type": "boolean"
        },
        {
          "name": "privateHost",
          "type": "HTMLElement"
        },
        {
          "name": "loadingState",
          "type": "default | loading | success | error"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup[]"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--box-shadow-color"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--height"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-family"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--min-width"
        },
        {
          "name": "--text-decoration"
        },
        {
          "name": "--text-transform"
        }
      ]
    },
    {
      "name": "cds-inline-button",
      "path": "./button/inline-button.element.d.ts",
      "description": "Inline buttons are used inside and alongside textual content within Clarity components.\nThey give action buttons a less prominent, yet familiar, visual presence.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-inline-button>Button text goes here</cds-inline-button>\n```",
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--text-decoration"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--letter-spacing"
        }
      ]
    },
    {
      "name": "cds-button",
      "path": "./button/register.d.ts",
      "description": "Buttons allow an application to communicate action and direct user intent.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-button>submit</cds-button>\n```",
      "properties": [
        {
          "name": "action",
          "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.",
          "type": "\"solid\" | \"outline\" | \"flat\" | \"flat-inline\""
        },
        {
          "name": "status",
          "description": "Sets the color of the button to match the following string statuses",
          "type": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"neutral\" | \"inverse\""
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the button based on the following string values:",
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "block",
          "description": "Sets if the button should be full width with display block",
          "type": "boolean"
        },
        {
          "name": "privateHost",
          "type": "HTMLElement"
        },
        {
          "name": "loadingState",
          "type": "default | loading | success | error"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup[]"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--box-shadow-color"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-family"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--height"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--min-width"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--text-decoration"
        },
        {
          "name": "--text-transform"
        }
      ]
    },
    {
      "name": "cds-icon-button",
      "path": "./button/register.d.ts",
      "description": "Icon buttons give applications a compact alternative to communicate action and direct user intent.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-icon-button><cds-icon shape=\"download\"></cds-icon></cds-icon-button>\n```",
      "properties": [
        {
          "name": "ariaLabel",
          "description": "The aria-label attribute is required for accessibility. The cds-icon-button\nwill warn if used without the aria-label being set.\n\nIdeally, the aria-label will be specific to the button's purpose. Avoid sharing\ngeneric labels across multiple icon buttons on a page.",
          "type": "string"
        },
        {
          "name": "action",
          "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.",
          "type": "\"solid\" | \"outline\" | \"flat\" | \"flat-inline\""
        },
        {
          "name": "status",
          "description": "Sets the color of the button to match the following string statuses",
          "type": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"neutral\" | \"inverse\""
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the button based on the following string values:",
          "type": "\"sm\" | \"md\""
        },
        {
          "name": "block",
          "description": "Sets if the button should be full width with display block",
          "type": "boolean"
        },
        {
          "name": "privateHost",
          "type": "HTMLElement"
        },
        {
          "name": "loadingState",
          "type": "default | loading | success | error"
        },
        {
          "name": "styles",
          "type": "CSSResultGroup[]"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--box-shadow-color"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--height"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-family"
        },
        {
          "name": "--font-weight"
        },
        {
          "name": "--letter-spacing"
        },
        {
          "name": "--min-width"
        },
        {
          "name": "--text-decoration"
        },
        {
          "name": "--text-transform"
        }
      ]
    },
    {
      "name": "cds-inline-button",
      "path": "./button/register.d.ts",
      "description": "Inline buttons are used inside and alongside textual content within Clarity components.\nThey give action buttons a less prominent, yet familiar, visual presence.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-inline-button>Button text goes here</cds-inline-button>\n```",
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the button"
        }
      ],
      "cssProperties": [
        {
          "name": "--text-decoration"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--letter-spacing"
        }
      ]
    },
    {
      "name": "cds-card",
      "path": "./card/card.element.d.ts",
      "description": "Web component card.\n\n```typescript\nimport '@cds/core/card/register.js';\n```\n\n```html\n<cds-card aria-labelledby=\"{label your card}\">\n  <div cds-layout=\"vertical gap:md\">\n    <h2 id=\"{label your card}\" cds-text=\"section\" cds-layout=\"p-y:sm\">\n      <!-- Card title -->\n    </h2>\n\n    <cds-divider cds-card-remove-margin></cds-divider>\n\n    <div cds-text=\"body\" cds-layout=\"p-y:md\">\n      <!-- Card content -->\n    </div>\n\n    <cds-divider cds-card-remove-margin></cds-divider>\n\n    <div cds-layout=\"horizontal gap:sm p-y:sm align:vertical-center\">\n      <cds-button action=\"flat-inline\">View</cds-button>\n    </div>\n  </div>\n</cds-card>\n```",
      "properties": [
        {
          "name": "role",
          "type": "string"
        },
        {
          "name": "globalStyles",
          "type": "CSSResultGroup"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting card content"
        }
      ],
      "cssProperties": [
        {
          "name": "--width"
        },
        {
          "name": "--height"
        },
        {
          "name": "--color"
        },
        {
          "name": "--overflow"
        },
        {
          "name": "--overflow-x"
        },
        {
          "name": "--overflow-y"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--box-shadow"
        },
        {
          "name": "--cds-card-remove-margin"
        }
      ]
    },
    {
      "name": "cds-card",
      "path": "./card/register.d.ts",
      "description": "Web component card.\n\n```typescript\nimport '@cds/core/card/register.js';\n```\n\n```html\n<cds-card aria-labelledby=\"{label your card}\">\n  <div cds-layout=\"vertical gap:md\">\n    <h2 id=\"{label your card}\" cds-text=\"section\" cds-layout=\"p-y:sm\">\n      <!-- Card title -->\n    </h2>\n\n    <cds-divider cds-card-remove-margin></cds-divider>\n\n    <div cds-text=\"body\" cds-layout=\"p-y:md\">\n      <!-- Card content -->\n    </div>\n\n    <cds-divider cds-card-remove-margin></cds-divider>\n\n    <div cds-layout=\"horizontal gap:sm p-y:sm align:vertical-center\">\n      <cds-button action=\"flat-inline\">View</cds-button>\n    </div>\n  </div>\n</cds-card>\n```",
      "properties": [
        {
          "name": "role",
          "type": "string"
        },
        {
          "name": "globalStyles",
          "type": "CSSResultGroup"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting card content"
        }
      ],
      "cssProperties": [
        {
          "name": "--width"
        },
        {
          "name": "--height"
        },
        {
          "name": "--color"
        },
        {
          "name": "--overflow"
        },
        {
          "name": "--overflow-x"
        },
        {
          "name": "--overflow-y"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--box-shadow"
        },
        {
          "name": "--cds-card-remove-margin"
        }
      ]
    },
    {
      "name": "cds-checkbox-group",
      "path": "./checkbox/checkbox-group.element.d.ts",
      "description": "Checkbox Group\n\n```typescript\nimport '@cds/core/checkbox';\n```\n\n```html\n<cds-checkbox-group>\n   <label>Select an item</label>\n   <cds-checkbox>\n     <label>Test</label>\n     <input type=\"checkbox\" />\n   </cds-checkbox>\n\n   <cds-checkbox>\n     <label>Test</label>\n     <input type=\"checkbox\" />\n   </cds-checkbox>\n</cds-checkbox-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting checkbox controls"
        }
      ]
    },
    {
      "name": "cds-checkbox",
      "path": "./checkbox/checkbox.element.d.ts",
      "description": "Checkbox\n\n```typescript\nimport '@cds/core/checkbox/register.js';\n```\n\n```html\n<cds-checkbox>\n   <label>checkbox</label>\n   <input type=\"checkbox\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-checkbox>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting checkbox"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--check-color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-checkbox",
      "path": "./checkbox/register.d.ts",
      "description": "Checkbox\n\n```typescript\nimport '@cds/core/checkbox/register.js';\n```\n\n```html\n<cds-checkbox>\n   <label>checkbox</label>\n   <input type=\"checkbox\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-checkbox>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting checkbox"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--check-color"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-checkbox-group",
      "path": "./checkbox/register.d.ts",
      "description": "Checkbox Group\n\n```typescript\nimport '@cds/core/checkbox';\n```\n\n```html\n<cds-checkbox-group>\n   <label>Select an item</label>\n   <cds-checkbox>\n     <label>Test</label>\n     <input type=\"checkbox\" />\n   </cds-checkbox>\n\n   <cds-checkbox>\n     <label>Test</label>\n     <input type=\"checkbox\" />\n   </cds-checkbox>\n</cds-checkbox-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting checkbox controls"
        }
      ]
    },
    {
      "name": "cds-datalist",
      "path": "./datalist/datalist.element.d.ts",
      "description": "Datalist\n\n```typescript\nimport '@cds/core/datalist/register.js';\n```\n\n```html\n<cds-datalist>\n   <label>datalist</label>\n   <input type=\"text\" />\n   <datalist>\n     <option value=\"item 1\"></option>\n     <option value=\"item 2\"></option>\n     <option value=\"item 3\"></option>\n   </datalist>\n   <cds-control-message>message text</cds-control-message>\n</cds-datalist>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting input, datalist and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-datalist",
      "path": "./datalist/register.d.ts",
      "description": "Datalist\n\n```typescript\nimport '@cds/core/datalist/register.js';\n```\n\n```html\n<cds-datalist>\n   <label>datalist</label>\n   <input type=\"text\" />\n   <datalist>\n     <option value=\"item 1\"></option>\n     <option value=\"item 2\"></option>\n     <option value=\"item 3\"></option>\n   </datalist>\n   <cds-control-message>message text</cds-control-message>\n</cds-datalist>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting input, datalist and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-date",
      "path": "./date/date.element.d.ts",
      "description": "Date\n\n```typescript\nimport '@cds/core/date/register.js';\n```\n\n```html\n<cds-date>\n   <label>Date</label>\n   <input type=\"date\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-date>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting date input and label"
        }
      ]
    },
    {
      "name": "cds-date",
      "path": "./date/register.d.ts",
      "description": "Date\n\n```typescript\nimport '@cds/core/date/register.js';\n```\n\n```html\n<cds-date>\n   <label>Date</label>\n   <input type=\"date\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-date>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting date input and label"
        }
      ]
    },
    {
      "name": "cds-divider",
      "path": "./divider/divider.element.d.ts",
      "description": "Dividers are a convenient way to place lined dividers or \"rules\"\nbetween blocks of content.\n\n```typescript\nimport '@cds/core/divider/register.js';\n```\n\n```html\n<cds-divider></cds-divider>\n```",
      "properties": [
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\""
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--size"
        }
      ]
    },
    {
      "name": "cds-divider",
      "path": "./divider/register.d.ts",
      "description": "Dividers are a convenient way to place lined dividers or \"rules\"\nbetween blocks of content.\n\n```typescript\nimport '@cds/core/divider/register.js';\n```\n\n```html\n<cds-divider></cds-divider>\n```",
      "properties": [
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\""
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--size"
        }
      ]
    },
    {
      "name": "cds-file",
      "path": "./file/file.element.d.ts",
      "description": "Time Input\n\n```typescript\nimport '@cds/core/file/register.js';\n```\n\n```html\n<cds-file>\n   <label>file</label>\n   <input type=\"file\" />\n</cds-file>\n```",
      "properties": [
        {
          "name": "i18n",
          "type": "{ browse: string; files: string; removeFile: string; }"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting file input and label"
        }
      ]
    },
    {
      "name": "cds-file",
      "path": "./file/register.d.ts",
      "description": "Time Input\n\n```typescript\nimport '@cds/core/file/register.js';\n```\n\n```html\n<cds-file>\n   <label>file</label>\n   <input type=\"file\" />\n</cds-file>\n```",
      "properties": [
        {
          "name": "i18n",
          "type": "{ browse: string; files: string; removeFile: string; }"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting file input and label"
        }
      ]
    },
    {
      "name": "cds-control-action",
      "path": "./forms/control-action/control-action.element.d.ts",
      "description": "Control Action\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-control-action>\n\n</cds-control-action>\n```",
      "properties": [
        {
          "name": "action",
          "description": "Set the action type placement within the supporting input control",
          "type": "\"label\" | \"prefix\" | \"suffix\""
        },
        {
          "name": "readonly",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting text content or cds-icon"
        }
      ]
    },
    {
      "name": "cds-internal-control-group",
      "path": "./forms/control-group/control-group.element.d.ts",
      "description": "Internal Control Group\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-internal-control-group>\n   <label>...</label>\n   <cds-control>\n     <label></label>\n     <input ... />\n   </cds-control>\n   <cds-control>\n     <label></label>\n     <input ... />\n   </cds-control>\n</cds-internal-control-group>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "layout",
          "type": "horizontal | horizontal  -inline | vertical | vertical-inline | compact"
        },
        {
          "name": "controlAlign",
          "description": "Align the labels of controls within group left or right",
          "type": "\"left\" | \"right\""
        },
        {
          "name": "disabled",
          "description": "Disable all controls within a control group or omit and disable controls individually",
          "type": "boolean"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "layoutStable",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting control group"
        }
      ]
    },
    {
      "name": "cds-internal-control-label",
      "path": "./forms/control-label/control-label.element.d.ts",
      "description": "Label\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-internal-control-label status=\"primary | secondary\">\n   <label>...</label>\n</cds-internal-control-label>\n```",
      "properties": [
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "action",
          "type": "\"primary\" | \"secondary\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting label text"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-control-message",
      "path": "./forms/control-message/control-message.element.d.ts",
      "description": "Control Message\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-control>\n   <label>Test</label>\n   <input type=\"text\" />\n   <cds-control-message>helper text</cds-control-message>\n</cds-control>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "error",
          "description": "Defines the HTML5 ValidityState message of given control\nhttps://developer.mozilla.org/en-US/docs/Web/API/ValidityState",
          "type": "ValidityStateKey"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting helper message text"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        }
      ]
    },
    {
      "name": "cds-control",
      "path": "./forms/control/control.element.d.ts",
      "description": "Generic Control\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-control>\n   <label>control</label>\n   <input type=\"text\" />\n</cds-control>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "validate",
          "description": "Set the validate attribute to sync with HTML5 native validation\nhttps://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
          "type": "boolean"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "layout",
          "type": "vertical | horizontal | compact"
        },
        {
          "name": "layoutChange"
        },
        {
          "name": "layoutStable",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-form-group",
      "path": "./forms/form-group/form-group.element.d.ts",
      "description": "Form\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-form-group layout=\"horizontal\">\n   <cds-input>\n     <label>Test</label>\n     <input type=\"text\" />\n   </cds-input>\n\n   <cds-input>\n     <label>Test</label>\n     <input type=\"text\" />\n   </cds-input>\n</cds-form-group>\n```",
      "properties": [
        {
          "name": "layout",
          "type": "horizontal | horizontal  -inline | vertical | vertical-inline | compact"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "validate",
          "description": "Set the validate attribute to sync with HTML5 native validation\nhttps://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting input controls"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-control",
      "path": "./forms/register.d.ts",
      "description": "Generic Control\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-control>\n   <label>control</label>\n   <input type=\"text\" />\n</cds-control>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "validate",
          "description": "Set the validate attribute to sync with HTML5 native validation\nhttps://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
          "type": "boolean"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "layout",
          "type": "vertical | horizontal | compact"
        },
        {
          "name": "layoutChange"
        },
        {
          "name": "layoutStable",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-control-action",
      "path": "./forms/register.d.ts",
      "description": "Control Action\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-control-action>\n\n</cds-control-action>\n```",
      "properties": [
        {
          "name": "action",
          "description": "Set the action type placement within the supporting input control",
          "type": "\"label\" | \"prefix\" | \"suffix\""
        },
        {
          "name": "readonly",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting text content or cds-icon"
        }
      ]
    },
    {
      "name": "cds-internal-control-group",
      "path": "./forms/register.d.ts",
      "description": "Internal Control Group\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-internal-control-group>\n   <label>...</label>\n   <cds-control>\n     <label></label>\n     <input ... />\n   </cds-control>\n   <cds-control>\n     <label></label>\n     <input ... />\n   </cds-control>\n</cds-internal-control-group>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "layout",
          "type": "horizontal | horizontal  -inline | vertical | vertical-inline | compact"
        },
        {
          "name": "controlAlign",
          "description": "Align the labels of controls within group left or right",
          "type": "\"left\" | \"right\""
        },
        {
          "name": "disabled",
          "description": "Disable all controls within a control group or omit and disable controls individually",
          "type": "boolean"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "layoutStable",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting control group"
        }
      ]
    },
    {
      "name": "cds-internal-control-inline",
      "path": "./forms/register.d.ts",
      "description": "Internal Control Inline\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-internal-control-inline>\n   <label>inline</label>\n   <input type=\"radio\" />\n</ds-internal-control-inline>\n```",
      "properties": [
        {
          "name": "controlAlign",
          "description": "Align the labels of controls within group left or right",
          "type": "\"left\" | \"right\""
        },
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "validate",
          "description": "Set the validate attribute to sync with HTML5 native validation\nhttps://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
          "type": "boolean"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "layout",
          "type": "vertical | horizontal | compact"
        },
        {
          "name": "layoutChange"
        },
        {
          "name": "layoutStable",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting inline input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-internal-control-label",
      "path": "./forms/register.d.ts",
      "description": "Label\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-internal-control-label status=\"primary | secondary\">\n   <label>...</label>\n</cds-internal-control-label>\n```",
      "properties": [
        {
          "name": "disabled",
          "type": "boolean"
        },
        {
          "name": "action",
          "type": "\"primary\" | \"secondary\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting label text"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-control-message",
      "path": "./forms/register.d.ts",
      "description": "Control Message\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-control>\n   <label>Test</label>\n   <input type=\"text\" />\n   <cds-control-message>helper text</cds-control-message>\n</cds-control>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | error | success"
        },
        {
          "name": "error",
          "description": "Defines the HTML5 ValidityState message of given control\nhttps://developer.mozilla.org/en-US/docs/Web/API/ValidityState",
          "type": "ValidityStateKey"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting helper message text"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--font-weight"
        }
      ]
    },
    {
      "name": "cds-form-group",
      "path": "./forms/register.d.ts",
      "description": "Form\n\n```typescript\nimport '@cds/core/forms/register.js';\n```\n\n```html\n<cds-form-group layout=\"horizontal\">\n   <cds-input>\n     <label>Test</label>\n     <input type=\"text\" />\n   </cds-input>\n\n   <cds-input>\n     <label>Test</label>\n     <input type=\"text\" />\n   </cds-input>\n</cds-form-group>\n```",
      "properties": [
        {
          "name": "layout",
          "type": "horizontal | horizontal  -inline | vertical | vertical-inline | compact"
        },
        {
          "name": "controlWidth",
          "type": "stretch | shrink"
        },
        {
          "name": "responsive",
          "description": "By default forms will collapse to layout that prevents overflow.\nIf disabled control layout may break or overflow in unexpected ways.",
          "type": "boolean"
        },
        {
          "name": "validate",
          "description": "Set the validate attribute to sync with HTML5 native validation\nhttps://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting input controls"
        }
      ],
      "cssProperties": [
        {
          "name": "--label-width"
        }
      ]
    },
    {
      "name": "cds-icon",
      "path": "./icon/icon.element.d.ts",
      "description": "Icon component that renders svg shapes that can be customized.\nTo load an icon, import the icon with the icon service.\n\n```typescript\nimport '@cds/core/icon/register.js';\nimport { ClarityIcons, userIcon } from '@cds/core/icon';\n\nClarityIcons.addIcons(userIcon);\n```\n\n```html\n<cds-icon shape=\"user\"></cds-icon>\n```",
      "properties": [
        {
          "name": "shape",
          "description": "Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\nthe specified icon cannot be found in the icon registry.",
          "type": "string"
        },
        {
          "name": "size",
          "type": "string | xs | sm | md | lg | xl | xxl"
        },
        {
          "name": "direction",
          "type": "up | down | left | right"
        },
        {
          "name": "flip",
          "type": "horizontal | vertical"
        },
        {
          "name": "solid",
          "description": "Displays most icons in their \"filled\" version if set to `true`.",
          "type": "boolean"
        },
        {
          "name": "status",
          "type": "info | success | warning | danger"
        },
        {
          "name": "inverse",
          "description": "Inverts color of icon fills and outlines if `true`.\nUseful for displaying icons on a dark background.",
          "type": "boolean"
        },
        {
          "name": "badge",
          "type": "info | success | warning | danger | inherit | warning  -triangle | inherit-triangle"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--badge-color"
        }
      ]
    },
    {
      "name": "cds-icon",
      "path": "./icon/register.d.ts",
      "description": "Icon component that renders svg shapes that can be customized.\nTo load an icon, import the icon with the icon service.\n\n```typescript\nimport '@cds/core/icon/register.js';\nimport { ClarityIcons, userIcon } from '@cds/core/icon';\n\nClarityIcons.addIcons(userIcon);\n```\n\n```html\n<cds-icon shape=\"user\"></cds-icon>\n```",
      "properties": [
        {
          "name": "shape",
          "description": "Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\nthe specified icon cannot be found in the icon registry.",
          "type": "string"
        },
        {
          "name": "size",
          "type": "string | xs | sm | md | lg | xl | xxl"
        },
        {
          "name": "direction",
          "type": "up | down | left | right"
        },
        {
          "name": "flip",
          "type": "horizontal | vertical"
        },
        {
          "name": "solid",
          "description": "Displays most icons in their \"filled\" version if set to `true`.",
          "type": "boolean"
        },
        {
          "name": "status",
          "type": "info | success | warning | danger"
        },
        {
          "name": "inverse",
          "description": "Inverts color of icon fills and outlines if `true`.\nUseful for displaying icons on a dark background.",
          "type": "boolean"
        },
        {
          "name": "badge",
          "type": "info | success | warning | danger | inherit | warning  -triangle | inherit-triangle"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--badge-color"
        }
      ]
    },
    {
      "name": "cds-demo",
      "path": "./index.d.ts"
    },
    {
      "name": "cds-placeholder",
      "path": "./index.d.ts"
    },
    {
      "name": "cds-input-group",
      "path": "./input/input-group.element.d.ts",
      "description": "Input Group\n\n```typescript\nimport '@cds/core/input/register.js';\n```\n\n```html\n<cds-input-group>\n   <label>Host URL</label>\n   <cds-select cds-layout=\"align:shrink\">\n     <label>URL Protocol</label>\n     <select>\n       <option>https://</option>\n       <option>http://</option>\n     </select>\n   </cds-select>\n   <cds-input>\n     <label>Host URL</label>\n     <input placeholder=\"example.com\" type=\"url\" />\n   </cds-input>\n   <cds-control-message>Host ID: 123456</cds-control-message>\n</cds-input-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting inputs"
        }
      ]
    },
    {
      "name": "cds-input",
      "path": "./input/input.element.d.ts",
      "description": "Input\n\n```typescript\nimport '@cds/core/input/register.js';\n```\n\n```html\n<cds-input>\n   <label>input</label>\n   <input type=\"text\" />\n</cds-input>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-input",
      "path": "./input/register.d.ts",
      "description": "Input\n\n```typescript\nimport '@cds/core/input/register.js';\n```\n\n```html\n<cds-input>\n   <label>input</label>\n   <input type=\"text\" />\n</cds-input>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-input-group",
      "path": "./input/register.d.ts",
      "description": "Input Group\n\n```typescript\nimport '@cds/core/input/register.js';\n```\n\n```html\n<cds-input-group>\n   <label>Host URL</label>\n   <cds-select cds-layout=\"align:shrink\">\n     <label>URL Protocol</label>\n     <select>\n       <option>https://</option>\n       <option>http://</option>\n     </select>\n   </cds-select>\n   <cds-input>\n     <label>Host URL</label>\n     <input placeholder=\"example.com\" type=\"url\" />\n   </cds-input>\n   <cds-control-message>Host ID: 123456</cds-control-message>\n</cds-input-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting inputs"
        }
      ]
    },
    {
      "name": "cds-internal-close-button",
      "path": "./internal-components/close-button/close-button.element.d.ts",
      "description": "Standard close button for Clarity Components\n\n```typescript\nimport '@cds/core/internal-components/close-button/register.js';\n```\n\n```html\n<cds-internal-close-button></cds-internal-close-button>\n```",
      "properties": [
        {
          "name": "iconSize",
          "type": "string"
        },
        {
          "name": "iconShape",
          "type": "string"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--color"
        },
        {
          "name": "--opacity"
        },
        {
          "name": "--padding"
        }
      ]
    },
    {
      "name": "cds-internal-close-button",
      "path": "./internal-components/close-button/register.d.ts",
      "description": "Standard close button for Clarity Components\n\n```typescript\nimport '@cds/core/internal-components/close-button/register.js';\n```\n\n```html\n<cds-internal-close-button></cds-internal-close-button>\n```",
      "properties": [
        {
          "name": "iconSize",
          "type": "string"
        },
        {
          "name": "iconShape",
          "type": "string"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--color"
        },
        {
          "name": "--opacity"
        },
        {
          "name": "--padding"
        }
      ]
    },
    {
      "name": "cds-internal-overlay",
      "path": "./internal-components/overlay/overlay.element.d.ts",
      "description": "```typescript\nimport '@cds/core/internal-components/overlay/register.js';\n```\n\n```html\n<cds-internal-overlay>\n  <section cds-layout=\"vertical align:horizontal-stretch\">\n    <div cds-layout=\"vertical pad:md gap:md\">\n      <h2 cds-text=\"display\">A Title</h2>\n      <div>\n        <p cds-text=\"body\">\n          Content inside a generic overlay.\n        </p>\n      </div>\n    </div>\n  </section>\n</cds-internal-overlay>\n```",
      "properties": [
        {
          "name": "cdsMotion",
          "type": "string"
        },
        {
          "name": "cdsMotionChange"
        },
        {
          "name": "ariaModal",
          "type": "string"
        },
        {
          "name": "role",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "closeChange",
          "description": "Notify user when close event has occurred"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for the content inside the overlay's panel"
        }
      ],
      "cssProperties": [
        {
          "name": "--backdrop-background"
        },
        {
          "name": "--layered-backdrop-background"
        },
        {
          "name": "--animation-duration"
        },
        {
          "name": "--animation-easing",
          "description": "KNOWN ISSUE: Safari jumps through the exit animation but only when the ESC key is pressed."
        }
      ]
    },
    {
      "name": "cds-internal-overlay",
      "path": "./internal-components/overlay/register.d.ts",
      "description": "```typescript\nimport '@cds/core/internal-components/overlay/register.js';\n```\n\n```html\n<cds-internal-overlay>\n  <section cds-layout=\"vertical align:horizontal-stretch\">\n    <div cds-layout=\"vertical pad:md gap:md\">\n      <h2 cds-text=\"display\">A Title</h2>\n      <div>\n        <p cds-text=\"body\">\n          Content inside a generic overlay.\n        </p>\n      </div>\n    </div>\n  </section>\n</cds-internal-overlay>\n```",
      "properties": [
        {
          "name": "cdsMotion",
          "type": "string"
        },
        {
          "name": "cdsMotionChange"
        },
        {
          "name": "ariaModal",
          "type": "string"
        },
        {
          "name": "role",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "closeChange",
          "description": "Notify user when close event has occurred"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for the content inside the overlay's panel"
        }
      ],
      "cssProperties": [
        {
          "name": "--backdrop-background"
        },
        {
          "name": "--layered-backdrop-background"
        },
        {
          "name": "--animation-duration"
        },
        {
          "name": "--animation-easing",
          "description": "KNOWN ISSUE: Safari jumps through the exit animation but only when the ESC key is pressed."
        }
      ]
    },
    {
      "name": "cds-internal-panel",
      "path": "./internal-components/panel/panel.element.d.ts",
      "description": "```typescript\nimport '@cds/core/internal-components/panel/register.js';\n```\n\n```html\n<cds-internal-panel>\n  // content\n</cds-internal-panel>\n```",
      "slots": [
        {
          "name": "",
          "description": "Content slot for the content inside the panel"
        }
      ],
      "cssProperties": [
        {
          "name": "--width"
        },
        {
          "name": "--height"
        },
        {
          "name": "--color"
        },
        {
          "name": "--overflow"
        },
        {
          "name": "--overflow-x"
        },
        {
          "name": "--overflow-y"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--box-shadow"
        }
      ]
    },
    {
      "name": "cds-internal-panel",
      "path": "./internal-components/panel/register.d.ts",
      "description": "```typescript\nimport '@cds/core/internal-components/panel/register.js';\n```\n\n```html\n<cds-internal-panel>\n  // content\n</cds-internal-panel>\n```",
      "slots": [
        {
          "name": "",
          "description": "Content slot for the content inside the panel"
        }
      ],
      "cssProperties": [
        {
          "name": "--width"
        },
        {
          "name": "--height"
        },
        {
          "name": "--color"
        },
        {
          "name": "--overflow"
        },
        {
          "name": "--overflow-x"
        },
        {
          "name": "--overflow-y"
        },
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--box-shadow"
        }
      ]
    },
    {
      "name": "cds-modal-actions",
      "path": "./modal/modal-actions.element.d.ts",
      "description": "Web component modal actions to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal-content",
      "path": "./modal/modal-content.element.d.ts",
      "description": "Web component modal content to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal size='lg'>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n      <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal-header-actions",
      "path": "./modal/modal-header-actions.element.d.ts",
      "description": "Web component modal header actions to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal-header",
      "path": "./modal/modal-header.element.d.ts",
      "description": "Web component modal header to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal",
      "path": "./modal/modal.element.d.ts",
      "description": "Web component modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```",
      "properties": [
        {
          "name": "i18n",
          "type": "{ closeButtonAriaLabel: string; contentStart: string; contentBox: string; contentEnd: string; }"
        },
        {
          "name": "closable",
          "description": "If false, the modal will not render the close button.",
          "type": "boolean"
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the modal and icon based on value",
          "type": "\"default\" | \"sm\" | \"lg\" | \"xl\""
        }
      ],
      "events": [
        {
          "name": "closeChange",
          "description": "notify when the user has clicked the close button"
        }
      ],
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-modal-content"
        },
        {
          "name": "cds-modal-header"
        },
        {
          "name": "cds-modal-actions"
        }
      ],
      "cssProperties": [
        {
          "name": "--backdrop-background",
          "description": "inherited from the internal overlay component"
        },
        {
          "name": "--layered-backdrop-background",
          "description": "inherited from the internal overlay component"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--background"
        },
        {
          "name": "--box-shadow"
        },
        {
          "name": "--width"
        },
        {
          "name": "--content-overflow",
          "description": "set as { x, y }. take care when customizing because overflow settings can have unintended side effects."
        },
        {
          "name": "--max-height",
          "description": "sets hard limit on height of modal"
        },
        {
          "name": "--tablet-max-height",
          "description": "sets hard limit on height of modal when on a tablet in landscape mode"
        }
      ]
    },
    {
      "name": "cds-modal-content",
      "path": "./modal/register.d.ts",
      "description": "Web component modal content to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal size='lg'>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n      <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal-actions",
      "path": "./modal/register.d.ts",
      "description": "Web component modal actions to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal-header-actions",
      "path": "./modal/register.d.ts",
      "description": "Web component modal header actions to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal-header",
      "path": "./modal/register.d.ts",
      "description": "Web component modal header to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```"
    },
    {
      "name": "cds-modal",
      "path": "./modal/register.d.ts",
      "description": "Web component modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n   <cds-modal-header>\n      <h3 cds-text=\"title\">My Modal</h3>\n   </cds-modal-header>\n   <cds-modal-content>\n     <p>Lorem Ipsum</p>\n   </cds-modal-content>\n   <cds-modal-actions>\n       <cds-button>Ok</cds-button>\n   </cds-modal-actions>\n</cds-modal>\n```",
      "properties": [
        {
          "name": "i18n",
          "type": "{ closeButtonAriaLabel: string; contentStart: string; contentBox: string; contentEnd: string; }"
        },
        {
          "name": "closable",
          "description": "If false, the modal will not render the close button.",
          "type": "boolean"
        },
        {
          "name": "size",
          "description": "Sets the overall height and width of the modal and icon based on value",
          "type": "\"default\" | \"sm\" | \"lg\" | \"xl\""
        }
      ],
      "events": [
        {
          "name": "closeChange",
          "description": "notify when the user has clicked the close button"
        }
      ],
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-modal-content"
        },
        {
          "name": "cds-modal-header"
        },
        {
          "name": "cds-modal-actions"
        }
      ],
      "cssProperties": [
        {
          "name": "--backdrop-background",
          "description": "inherited from the internal overlay component"
        },
        {
          "name": "--layered-backdrop-background",
          "description": "inherited from the internal overlay component"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--background"
        },
        {
          "name": "--box-shadow"
        },
        {
          "name": "--width"
        },
        {
          "name": "--content-overflow",
          "description": "set as { x, y }. take care when customizing because overflow settings can have unintended side effects."
        },
        {
          "name": "--max-height",
          "description": "sets hard limit on height of modal"
        },
        {
          "name": "--tablet-max-height",
          "description": "sets hard limit on height of modal when on a tablet in landscape mode"
        }
      ]
    },
    {
      "name": "cds-pagination-button",
      "path": "./pagination/pagination-button.element.d.ts",
      "description": "Web component pagination button to be used inside pagination.\n\n```typescript\nimport '@cds/core/pagination/register.js';\n```\n\n```html\n<cds-pagination>\n   <cds-pagination-button action=\"first\" disabled></cds-pagination-button>\n   <cds-pagination-button action=\"prev\" disabled></cds-pagination-button>\n   <span aria-label=\"current page\">1 / 3</span>\n   <cds-pagination-button action=\"next\"></cds-pagination-button>\n   <cds-pagination-button action=\"last\"></cds-pagination-button>\n</cds-pagination>\n```",
      "properties": [
        {
          "name": "action",
          "type": "first | prev | next | last"
        },
        {
          "name": "cdsIcon",
          "type": "HTMLElement"
        }
      ],
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-icon"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--box-shadow"
        },
        {
          "name": "--min-height"
        },
        {
          "name": "--min-width"
        }
      ]
    },
    {
      "name": "cds-pagination",
      "path": "./pagination/pagination.element.d.ts",
      "description": "Web component pagination.\n\n```typescript\nimport '@cds/core/pagination/register.js';\n```\n\n```html\n<cds-pagination>\n   <cds-pagination-button action=\"first\" disabled></cds-pagination-button>\n   <cds-pagination-button action=\"prev\" disabled></cds-pagination-button>\n   <span aria-label=\"current page\">1 / 3</span>\n   <cds-pagination-button action=\"next\"></cds-pagination-button>\n   <cds-pagination-button action=\"last\"></cds-pagination-button>\n</cds-pagination>\n```",
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-pagination-button"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        }
      ]
    },
    {
      "name": "cds-pagination",
      "path": "./pagination/register.d.ts",
      "description": "Web component pagination.\n\n```typescript\nimport '@cds/core/pagination/register.js';\n```\n\n```html\n<cds-pagination>\n   <cds-pagination-button action=\"first\" disabled></cds-pagination-button>\n   <cds-pagination-button action=\"prev\" disabled></cds-pagination-button>\n   <span aria-label=\"current page\">1 / 3</span>\n   <cds-pagination-button action=\"next\"></cds-pagination-button>\n   <cds-pagination-button action=\"last\"></cds-pagination-button>\n</cds-pagination>\n```",
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-pagination-button"
        }
      ],
      "cssProperties": [
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        }
      ]
    },
    {
      "name": "cds-pagination-button",
      "path": "./pagination/register.d.ts",
      "description": "Web component pagination button to be used inside pagination.\n\n```typescript\nimport '@cds/core/pagination/register.js';\n```\n\n```html\n<cds-pagination>\n   <cds-pagination-button action=\"first\" disabled></cds-pagination-button>\n   <cds-pagination-button action=\"prev\" disabled></cds-pagination-button>\n   <span aria-label=\"current page\">1 / 3</span>\n   <cds-pagination-button action=\"next\"></cds-pagination-button>\n   <cds-pagination-button action=\"last\"></cds-pagination-button>\n</cds-pagination>\n```",
      "properties": [
        {
          "name": "action",
          "type": "first | prev | next | last"
        },
        {
          "name": "cdsIcon",
          "type": "HTMLElement"
        }
      ],
      "slots": [
        {
          "name": ""
        },
        {
          "name": "cds-icon"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--box-shadow"
        },
        {
          "name": "--min-height"
        },
        {
          "name": "--min-width"
        }
      ]
    },
    {
      "name": "cds-password",
      "path": "./password/password.element.d.ts",
      "description": "Password\n\n```typescript\nimport '@cds/core/password/register.js';\n```\n\n```html\n<cds-password>\n   <label>Password</label>\n   <input type=\"password\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-password>\n```",
      "properties": [
        {
          "name": "i18n",
          "type": "{ showButtonAriaLabel: string; hideButtonAriaLabel: string; }"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting password input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-password",
      "path": "./password/register.d.ts",
      "description": "Password\n\n```typescript\nimport '@cds/core/password/register.js';\n```\n\n```html\n<cds-password>\n   <label>Password</label>\n   <input type=\"password\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-password>\n```",
      "properties": [
        {
          "name": "i18n",
          "type": "{ showButtonAriaLabel: string; hideButtonAriaLabel: string; }"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting password input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-progress-circle",
      "path": "./progress-circle/progress-circle.element.d.ts",
      "description": "Circular progress indicators provide a method to track how close long-running tasks are to\ncompletion. Circular progress offer a compact way to track progress in a variety of situations.\n\n```typescript\nimport '@cds/core/progress-circle/register.js';\n```\n\n```html\n<cds-progress-circle status=\"info\" value=\"25\"></cds-progress-circle>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger"
        },
        {
          "name": "inverse",
          "description": "Inverts color of circular progress bar if `true`.\nUseful for displaying icons on a dark background.",
          "type": "boolean"
        },
        {
          "name": "value",
          "description": "Represents the percent completed from 0 to 100.\n\nIf undefined, the progress-circle will be represented as an indeterminate\nprogress indicator – a.k.a a \"spinner\".",
          "type": "number"
        },
        {
          "name": "line",
          "description": "Represents the thickness of the stroke of the circular progress.\n\nIf undefined, it defaults to 3.",
          "type": "number"
        },
        {
          "name": "size",
          "type": "string | sm | md | lg | xl | xxl"
        }
      ],
      "cssProperties": [
        {
          "name": "--ring-color"
        },
        {
          "name": "--ring-opacity"
        },
        {
          "name": "--fill-color"
        },
        {
          "name": "--fill-speed"
        }
      ]
    },
    {
      "name": "cds-progress-circle",
      "path": "./progress-circle/register.d.ts",
      "description": "Circular progress indicators provide a method to track how close long-running tasks are to\ncompletion. Circular progress offer a compact way to track progress in a variety of situations.\n\n```typescript\nimport '@cds/core/progress-circle/register.js';\n```\n\n```html\n<cds-progress-circle status=\"info\" value=\"25\"></cds-progress-circle>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger"
        },
        {
          "name": "inverse",
          "description": "Inverts color of circular progress bar if `true`.\nUseful for displaying icons on a dark background.",
          "type": "boolean"
        },
        {
          "name": "value",
          "description": "Represents the percent completed from 0 to 100.\n\nIf undefined, the progress-circle will be represented as an indeterminate\nprogress indicator – a.k.a a \"spinner\".",
          "type": "number"
        },
        {
          "name": "line",
          "description": "Represents the thickness of the stroke of the circular progress.\n\nIf undefined, it defaults to 3.",
          "type": "number"
        },
        {
          "name": "size",
          "type": "string | sm | md | lg | xl | xxl"
        }
      ],
      "cssProperties": [
        {
          "name": "--ring-color"
        },
        {
          "name": "--ring-opacity"
        },
        {
          "name": "--fill-color"
        },
        {
          "name": "--fill-speed"
        }
      ]
    },
    {
      "name": "cds-radio-group",
      "path": "./radio/radio-group.element.d.ts",
      "description": "Radio Group\n\n```typescript\nimport '@cds/core/radio/register.js';\n```\n\n```html\n<cds-radio-group>\n   <label>radio group</label>\n   <cds-radio>\n     <label>item 1</label>\n     <input type=\"radio\" />\n   </cds-radio>\n\n   <cds-radio>\n     <label>item 2</label>\n     <input type=\"radio\" />\n   </cds-radio>\n</cds-radio-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting cds-radio controls"
        }
      ]
    },
    {
      "name": "cds-radio",
      "path": "./radio/radio.element.d.ts",
      "description": "Radio\n\n```typescript\nimport '@cds/core/radio/register.js';\n```\n\n```html\n<cds-radio>\n   <label>Test</label>\n   <input type=\"radio\" />\n</cds-radio>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting radio input"
        }
      ],
      "cssProperties": [
        {
          "name": "--width"
        },
        {
          "name": "--height"
        },
        {
          "name": "--border"
        },
        {
          "name": "--fill-box-shadow"
        }
      ]
    },
    {
      "name": "cds-radio-group",
      "path": "./radio/register.d.ts",
      "description": "Radio Group\n\n```typescript\nimport '@cds/core/radio/register.js';\n```\n\n```html\n<cds-radio-group>\n   <label>radio group</label>\n   <cds-radio>\n     <label>item 1</label>\n     <input type=\"radio\" />\n   </cds-radio>\n\n   <cds-radio>\n     <label>item 2</label>\n     <input type=\"radio\" />\n   </cds-radio>\n</cds-radio-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting cds-radio controls"
        }
      ]
    },
    {
      "name": "cds-radio",
      "path": "./radio/register.d.ts",
      "description": "Radio\n\n```typescript\nimport '@cds/core/radio/register.js';\n```\n\n```html\n<cds-radio>\n   <label>Test</label>\n   <input type=\"radio\" />\n</cds-radio>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting radio input"
        }
      ],
      "cssProperties": [
        {
          "name": "--width"
        },
        {
          "name": "--height"
        },
        {
          "name": "--border"
        },
        {
          "name": "--fill-box-shadow"
        }
      ]
    },
    {
      "name": "cds-range",
      "path": "./range/range.element.d.ts",
      "description": "Range\n\n```typescript\nimport '@cds/core/range/register.js';\n```\n\n```html\n<cds-range>\n   <label>range</label>\n   <input type=\"range\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-range>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting range input"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--track-background"
        },
        {
          "name": "--track-fill-background"
        },
        {
          "name": "--track-height"
        },
        {
          "name": "--thumb-background"
        },
        {
          "name": "--thumb-width"
        },
        {
          "name": "--thumb-height"
        }
      ]
    },
    {
      "name": "cds-range",
      "path": "./range/register.d.ts",
      "description": "Range\n\n```typescript\nimport '@cds/core/range/register.js';\n```\n\n```html\n<cds-range>\n   <label>range</label>\n   <input type=\"range\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-range>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting range input"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--track-background"
        },
        {
          "name": "--track-fill-background"
        },
        {
          "name": "--track-height"
        },
        {
          "name": "--thumb-background"
        },
        {
          "name": "--thumb-width"
        },
        {
          "name": "--thumb-height"
        }
      ]
    },
    {
      "name": "cds-search",
      "path": "./search/register.d.ts",
      "description": "Search\n\n```typescript\nimport '@cds/core/search/register.js';\n```\n\n```html\n<cds-search>\n   <label>Search</label>\n   <input type=\"search\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-search>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting search input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-search",
      "path": "./search/search.element.d.ts",
      "description": "Search\n\n```typescript\nimport '@cds/core/search/register.js';\n```\n\n```html\n<cds-search>\n   <label>Search</label>\n   <input type=\"search\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-search>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting search input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-select",
      "path": "./select/register.d.ts",
      "description": "Select\n\n```typescript\nimport '@cds/core/select';\n```\n\n```html\n<cds-select>\n   <label>Test</label>\n   <select>\n    <option>Option One</option>\n    <option>Option Two</option>\n    <option>Option Three</option>\n   </select>\n</cds-select>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting select and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-select",
      "path": "./select/select.element.d.ts",
      "description": "Select\n\n```typescript\nimport '@cds/core/select';\n```\n\n```html\n<cds-select>\n   <label>Test</label>\n   <select>\n    <option>Option One</option>\n    <option>Option Two</option>\n    <option>Option Three</option>\n   </select>\n</cds-select>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting select and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-tag",
      "path": "./tag/register.d.ts",
      "description": "Tags show concise metadata in a compact format.\nTags are visually styled to differentiate them from buttons.\n\n```typescript\nimport '@cds/core/tag/register.js';\n```\n\n```html\n<cds-tag status=\"info\">Info</cds-tag>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger"
        },
        {
          "name": "color",
          "description": "Sets the color of the tag (and badge if present) from a predefined list of choices",
          "type": "\"gray\" | \"purple\" | \"blue\" | \"orange\" | \"light-blue\""
        },
        {
          "name": "closable",
          "description": "If present, shows a close icon to one side of the tag.\nNote that applications must wire up the action to remove the tag on click and also\nthat you cannot have a clickable AND closable tag. The closable attribute-property\nshows the close icon. What happens when the tag is clicked is for application developers\nto decide.\nIf closable is present, the tag will be considered \"clickable\".",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the tag"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--size"
        }
      ]
    },
    {
      "name": "cds-tag",
      "path": "./tag/tag.element.d.ts",
      "description": "Tags show concise metadata in a compact format.\nTags are visually styled to differentiate them from buttons.\n\n```typescript\nimport '@cds/core/tag/register.js';\n```\n\n```html\n<cds-tag status=\"info\">Info</cds-tag>\n```",
      "properties": [
        {
          "name": "status",
          "type": "neutral | info | success | warning | danger"
        },
        {
          "name": "color",
          "description": "Sets the color of the tag (and badge if present) from a predefined list of choices",
          "type": "\"gray\" | \"purple\" | \"blue\" | \"orange\" | \"light-blue\""
        },
        {
          "name": "closable",
          "description": "If present, shows a close icon to one side of the tag.\nNote that applications must wire up the action to remove the tag on click and also\nthat you cannot have a clickable AND closable tag. The closable attribute-property\nshows the close icon. What happens when the tag is clicked is for application developers\nto decide.\nIf closable is present, the tag will be considered \"clickable\".",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for inside the tag"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border-color"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--border-width"
        },
        {
          "name": "--color"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--size"
        }
      ]
    },
    {
      "name": "cds-test-dropdown",
      "path": "./test-dropdown/register.d.ts",
      "description": "Dropdown, example test component. Do not use in production.\n\n```typescript\nimport '@cds/core/test-dropdown';\n```\n\n```html\n<cds-test-dropdown title=\"click me!\">\n   Hello World\n</cds-test-dropdown>\n```",
      "properties": [
        {
          "name": "open",
          "description": "Set open to open or close the dropdown",
          "type": "boolean"
        },
        {
          "name": "title",
          "description": "Set the dropdown button text",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "openChange",
          "description": "notify open state change of dropdown"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "Content slot for dropdown content"
        }
      ],
      "cssProperties": [
        {
          "name": "--border-color"
        },
        {
          "name": "--background-color"
        },
        {
          "name": "--text-color"
        }
      ]
    },
    {
      "name": "cds-textarea",
      "path": "./textarea/register.d.ts",
      "description": "Form\n\n```typescript\nimport '@cds/core/textarea/register.js';\n```\n\n```html\n<cds-textarea>\n   <label>textarea</label>\n   <textarea></textarea>\n   <cds-control-message>message text</cds-control-message>\n</cds-textarea>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting cds-inputs"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-textarea",
      "path": "./textarea/textarea.element.d.ts",
      "description": "Form\n\n```typescript\nimport '@cds/core/textarea/register.js';\n```\n\n```html\n<cds-textarea>\n   <label>textarea</label>\n   <textarea></textarea>\n   <cds-control-message>message text</cds-control-message>\n</cds-textarea>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting cds-inputs"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--border-radius"
        }
      ]
    },
    {
      "name": "cds-time",
      "path": "./time/register.d.ts",
      "description": "Time Input\n\n```typescript\nimport '@cds/core/time/register.js';\n```\n\n```html\n<cds-time>\n   <label>time</label>\n   <input type=\"time\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-time>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting time input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-time",
      "path": "./time/time.element.d.ts",
      "description": "Time Input\n\n```typescript\nimport '@cds/core/time/register.js';\n```\n\n```html\n<cds-time>\n   <label>time</label>\n   <input type=\"time\" />\n   <cds-control-message>message text</cds-control-message>\n</cds-time>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting time input and label"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--background-size"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-bottom"
        },
        {
          "name": "--outline"
        },
        {
          "name": "--padding"
        },
        {
          "name": "--font-size"
        },
        {
          "name": "--color"
        },
        {
          "name": "--line-height"
        },
        {
          "name": "--transition"
        }
      ]
    },
    {
      "name": "cds-toggle-group",
      "path": "./toggle/register.d.ts",
      "description": "Toggle Group\n\n```typescript\nimport '@cds/core/toggle/register.js';\n```\n\n```html\n<cds-toggle-group>\n   <label>Select an item</label>\n   <cds-toggle>\n     <label>toggle</label>\n     <input type=\"checkbox\" />\n   </cds-toggle>\n\n   <cds-toggle>\n     <label>toggle</label>\n     <input type=\"checkbox\" />\n   </cds-toggle>\n</cds-toggle-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting toggle controls"
        }
      ]
    },
    {
      "name": "cds-toggle",
      "path": "./toggle/register.d.ts",
      "description": "Toggle\n\n```typescript\nimport '@cds/core/toggle/register.js';\n```\n\n```html\n<cds-toggle>\n   <label>Toggle</label>\n   <input type=\"checkbox\" />\n</cds-toggle>\n```",
      "properties": [
        {
          "name": "cdsMotion",
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting checkbox"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--height"
        },
        {
          "name": "--width"
        },
        {
          "name": "--anchor-background"
        },
        {
          "name": "--anchor-border-radius"
        },
        {
          "name": "--anchor-width"
        },
        {
          "name": "--anchor-height"
        },
        {
          "name": "--toggle-speed"
        }
      ]
    },
    {
      "name": "cds-toggle-group",
      "path": "./toggle/toggle-group.element.d.ts",
      "description": "Toggle Group\n\n```typescript\nimport '@cds/core/toggle/register.js';\n```\n\n```html\n<cds-toggle-group>\n   <label>Select an item</label>\n   <cds-toggle>\n     <label>toggle</label>\n     <input type=\"checkbox\" />\n   </cds-toggle>\n\n   <cds-toggle>\n     <label>toggle</label>\n     <input type=\"checkbox\" />\n   </cds-toggle>\n</cds-toggle-group>\n```",
      "slots": [
        {
          "name": "",
          "description": "For projecting toggle controls"
        }
      ]
    },
    {
      "name": "cds-toggle",
      "path": "./toggle/toggle.element.d.ts",
      "description": "Toggle\n\n```typescript\nimport '@cds/core/toggle/register.js';\n```\n\n```html\n<cds-toggle>\n   <label>Toggle</label>\n   <input type=\"checkbox\" />\n</cds-toggle>\n```",
      "properties": [
        {
          "name": "cdsMotion",
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "For projecting checkbox"
        }
      ],
      "cssProperties": [
        {
          "name": "--background"
        },
        {
          "name": "--border"
        },
        {
          "name": "--border-radius"
        },
        {
          "name": "--height"
        },
        {
          "name": "--width"
        },
        {
          "name": "--anchor-background"
        },
        {
          "name": "--anchor-border-radius"
        },
        {
          "name": "--anchor-width"
        },
        {
          "name": "--anchor-height"
        },
        {
          "name": "--toggle-speed"
        }
      ]
    }
  ]
}