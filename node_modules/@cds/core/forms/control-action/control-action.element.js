import{__decorate as t}from"tslib";import{html as i}from"lit";import{CdsBaseButton as a,baseStyles as e,hasAttributeAndIsNotEmpty as o,setOrRemoveAttribute as r,assignSlotNames as s,LogService as l,property as n,querySlot as c}from"@cds/core/internal";import d from"./control-action.element.scss.js";class p extends a{constructor(){super(...arguments),this.readonly=!1,this.ariaLabel=""}static get styles(){return[e,d]}render(){return i`<div class="private-host"><slot></slot></div>`}connectedCallback(){super.connectedCallback(),this.syncAria()}syncAria(){const t=this.readonly,i=o(this,"aria-label");r(this,["aria-hidden","true"],(()=>t&&!i))}updated(t){super.updated(t),t.has("action")&&this.setSlotLocation(),(t.has("readonly")||t.has("ariaLabel"))&&(this.validateAriaLabel(),this.syncAria())}setSlotLocation(){var t;s([this,null!==(t=this.action)&&void 0!==t&&t])}validateAriaLabel(){var t;this.readonly||(null===(t=this.getAttribute("aria-label"))||void 0===t?void 0:t.length)||l.warn("A aria-label is required for interactive cds-control-actions",this)}}t([n({type:String})],p.prototype,"action",void 0),t([n({type:Boolean})],p.prototype,"readonly",void 0),t([n({type:String})],p.prototype,"ariaLabel",void 0),t([c("cds-icon")],p.prototype,"icon",void 0);export{p as CdsControlAction};
//# sourceMappingURL=control-action.element.js.map
