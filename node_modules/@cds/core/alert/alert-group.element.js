import{__decorate as t}from"tslib";import{LitElement as s,html as e}from"lit";import{query as r}from"lit/decorators/query.js";import{syncProps as a,baseStyles as o,property as i,querySlotAll as p,querySlot as l}from"@cds/core/internal";import d from"./alert-group.element.scss.js";class n extends s{constructor(){super(...arguments),this.size="default",this.type="default",this.role="region",this.status="neutral"}render(){return e`<div cds-layout="${this.pager?"horizontal wrap:none":"horizontal"}" class="${this.pager?"private-host":"private-host no-pager"}"><div class="pager-wrapper" cds-layout="p-x:lg"><slot name="pager"></slot></div><div class="alert-group-wrapper"><div class="alerts" cds-layout="vertical wrap:none align:horizontal-stretch fill ${"sm"===this.size?"gap:none":"gap:sm"}"><slot></slot></div></div></div>`}firstUpdated(t){super.firstUpdated(t),this.setupAlertsUpdate()}setupAlertsUpdate(){var t;const s={status:!0,type:!0,size:!0};null===(t=this.alertSlot)||void 0===t||t.addEventListener("slotchange",(()=>this.syncAlerts(s)))}async syncAlerts(t){await Promise.all(Array.from(this.alerts).map((t=>t.updateComplete))),this.alerts.forEach((s=>a(s,this,{status:t.status&&"light"!==this.type&&"loading"!==s.status,type:t.type,size:t.size})))}updated(t){super.updated(t),this.syncAlerts({status:t.has("status"),type:t.has("type"),size:t.has("size")})}static get styles(){return[o,d]}}t([i({type:String})],n.prototype,"size",void 0),t([i({type:String})],n.prototype,"type",void 0),t([i({type:String})],n.prototype,"role",void 0),t([i({type:String})],n.prototype,"status",void 0),t([p("cds-alert")],n.prototype,"alerts",void 0),t([l(".pager",{assign:"pager"})],n.prototype,"pager",void 0),t([r(".alerts")],n.prototype,"alertSlot",void 0);export{n as CdsAlertGroup};
//# sourceMappingURL=alert-group.element.js.map
