/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, Optional } from '@angular/core';
import { LayoutService } from './layout.service';
import { CONTROL_STATE } from '../if-control-state/if-control-state.service';
const CLASS_ERROR = 'clr-error';
const CLASS_SUCCESS = 'clr-success';
export class ControlClassService {
    constructor(layoutService) {
        this.layoutService = layoutService;
        this.className = '';
    }
    controlClass(state = CONTROL_STATE.NONE, grid = false, additional = '') {
        const controlClasses = [this.className, additional];
        switch (state) {
            case CONTROL_STATE.VALID:
                controlClasses.push(CLASS_SUCCESS);
                break;
            case CONTROL_STATE.INVALID:
                controlClasses.push(CLASS_ERROR);
                break;
        }
        if (grid && this.layoutService && this.className.indexOf('clr-col') === -1) {
            controlClasses.push(`clr-col-md-${this.layoutService.maxLabelSize - this.layoutService.labelSize} clr-col-12`);
        }
        return controlClasses.join(' ').trim();
    }
    // We want to remove the column classes from the input up to the container
    initControlClass(renderer, element) {
        if (element && element.className) {
            this.className = element.className;
            const klasses = element.className.split(' ');
            klasses.forEach(klass => {
                if (klass.startsWith('clr-col')) {
                    renderer.removeClass(element, klass);
                }
            });
        }
    }
}
ControlClassService.decorators = [
    { type: Injectable }
];
ControlClassService.ctorParameters = () => [
    { type: LayoutService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1jbGFzcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvZm9ybXMvY29tbW9uL3Byb3ZpZGVycy9jb250cm9sLWNsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFN0UsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQ2hDLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQWdDLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBRjVELGNBQVMsR0FBRyxFQUFFLENBQUM7SUFFZ0QsQ0FBQztJQUVoRSxZQUFZLENBQUMsUUFBdUIsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFO1FBQ25GLE1BQU0sY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVwRCxRQUFRLEtBQUssRUFBRTtZQUNiLEtBQUssYUFBYSxDQUFDLEtBQUs7Z0JBQ3RCLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ25DLE1BQU07WUFDUixLQUFLLGFBQWEsQ0FBQyxPQUFPO2dCQUN4QixjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNO1NBQ1Q7UUFFRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsYUFBYSxDQUFDLENBQUM7U0FDaEg7UUFDRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELDBFQUEwRTtJQUMxRSxnQkFBZ0IsQ0FBQyxRQUFtQixFQUFFLE9BQW9CO1FBQ3hELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ25DLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDL0IsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ3RDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7OztZQW5DRixVQUFVOzs7WUFORixhQUFhLHVCQVVQLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjEgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExheW91dFNlcnZpY2UgfSBmcm9tICcuL2xheW91dC5zZXJ2aWNlJztcbmltcG9ydCB7IENPTlRST0xfU1RBVEUgfSBmcm9tICcuLi9pZi1jb250cm9sLXN0YXRlL2lmLWNvbnRyb2wtc3RhdGUuc2VydmljZSc7XG5cbmNvbnN0IENMQVNTX0VSUk9SID0gJ2Nsci1lcnJvcic7XG5jb25zdCBDTEFTU19TVUNDRVNTID0gJ2Nsci1zdWNjZXNzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRyb2xDbGFzc1NlcnZpY2Uge1xuICBjbGFzc05hbWUgPSAnJztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGxheW91dFNlcnZpY2U6IExheW91dFNlcnZpY2UpIHt9XG5cbiAgY29udHJvbENsYXNzKHN0YXRlOiBDT05UUk9MX1NUQVRFID0gQ09OVFJPTF9TVEFURS5OT05FLCBncmlkID0gZmFsc2UsIGFkZGl0aW9uYWwgPSAnJykge1xuICAgIGNvbnN0IGNvbnRyb2xDbGFzc2VzID0gW3RoaXMuY2xhc3NOYW1lLCBhZGRpdGlvbmFsXTtcblxuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgQ09OVFJPTF9TVEFURS5WQUxJRDpcbiAgICAgICAgY29udHJvbENsYXNzZXMucHVzaChDTEFTU19TVUNDRVNTKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENPTlRST0xfU1RBVEUuSU5WQUxJRDpcbiAgICAgICAgY29udHJvbENsYXNzZXMucHVzaChDTEFTU19FUlJPUik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChncmlkICYmIHRoaXMubGF5b3V0U2VydmljZSAmJiB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKCdjbHItY29sJykgPT09IC0xKSB7XG4gICAgICBjb250cm9sQ2xhc3Nlcy5wdXNoKGBjbHItY29sLW1kLSR7dGhpcy5sYXlvdXRTZXJ2aWNlLm1heExhYmVsU2l6ZSAtIHRoaXMubGF5b3V0U2VydmljZS5sYWJlbFNpemV9IGNsci1jb2wtMTJgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2xDbGFzc2VzLmpvaW4oJyAnKS50cmltKCk7XG4gIH1cblxuICAvLyBXZSB3YW50IHRvIHJlbW92ZSB0aGUgY29sdW1uIGNsYXNzZXMgZnJvbSB0aGUgaW5wdXQgdXAgdG8gdGhlIGNvbnRhaW5lclxuICBpbml0Q29udHJvbENsYXNzKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5jbGFzc05hbWUpIHtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWU7XG4gICAgICBjb25zdCBrbGFzc2VzID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICAgIGtsYXNzZXMuZm9yRWFjaChrbGFzcyA9PiB7XG4gICAgICAgIGlmIChrbGFzcy5zdGFydHNXaXRoKCdjbHItY29sJykpIHtcbiAgICAgICAgICByZW5kZXJlci5yZW1vdmVDbGFzcyhlbGVtZW50LCBrbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19