"use strict";
/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const schematics_1 = require("@angular-devkit/schematics");
const setup_project_1 = require("../utility/setup-project");
const get_file_content_1 = require("../utility/get-file-content");
const clarityCorePackageName = '@cds/core';
describe('Migration to version 5.0', () => {
    let runner;
    let workspaceTree;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        runner = new testing_1.SchematicTestRunner('migrations', require.resolve('../migration-collection.json'));
        workspaceTree = yield setup_project_1.setupProject(new testing_1.UnitTestTree(new schematics_1.HostTree()), runner, 'foo');
    }));
    it('should add the @cds/core package to the project dependencies', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const packageJsonPath = '/package.json';
        const packageJsonString = (_a = workspaceTree.read(packageJsonPath)) === null || _a === void 0 ? void 0 : _a.toString();
        if (packageJsonString === undefined) {
            fail('Could not read package.json');
        }
        const packageJson = JSON.parse(packageJsonString);
        packageJson.dependencies['@clr/angular'] = '4.0.0';
        workspaceTree.overwrite(packageJsonPath, JSON.stringify(packageJson));
        const tree = yield runner.runSchematicAsync('migration-5.0', {}, workspaceTree).toPromise();
        expect(tree.files).toContain(packageJsonPath);
        const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
        expect(dependencies).toBeDefined();
        expect(dependencies[clarityCorePackageName]).toEqual('^5.0.0');
    }));
    it('should not modify the project dependencies if @clr/angular is not a dependency', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = yield runner.runSchematicAsync('migration-5.0', {}, workspaceTree).toPromise();
        const packageJsonPath = '/package.json';
        expect(tree.files).toContain(packageJsonPath);
        const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
        expect(dependencies).toBeDefined();
        expect(dependencies[clarityCorePackageName]).not.toBeDefined();
    }));
    it('should not modify the project dependencies if @cds/core is already a dependency', () => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        const packageJsonPath = '/package.json';
        const predefinedClarityCoreVersion = 'latest';
        const packageJsonString = (_b = workspaceTree.read(packageJsonPath)) === null || _b === void 0 ? void 0 : _b.toString();
        if (packageJsonString === undefined) {
            fail('Could not read package.json');
        }
        const packageJson = JSON.parse(packageJsonString);
        packageJson.dependencies[clarityCorePackageName] = predefinedClarityCoreVersion;
        workspaceTree.overwrite(packageJsonPath, JSON.stringify(packageJson));
        const tree = yield runner.runSchematicAsync('migration-5.0', {}, workspaceTree).toPromise();
        expect(tree.files).toContain(packageJsonPath);
        const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
        expect(dependencies).toBeDefined();
        expect(dependencies[clarityCorePackageName]).toEqual(predefinedClarityCoreVersion);
    }));
});
//# sourceMappingURL=update-5.0.0.spec.js.map