{"version":3,"file":"datagrid-column.d.ts","sources":["datagrid-column.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnDestroy, OnInit, ViewContainerRef, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ClrDatagridSortOrder } from './enums/sort-order.enum';\nimport { ClrDatagridComparatorInterface } from './interfaces/comparator.interface';\nimport { FiltersProvider } from './providers/filters';\nimport { Sort } from './providers/sort';\nimport { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';\nimport { ClrDatagridFilterInterface } from './interfaces/filter.interface';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { DetailService } from './providers/detail.service';\nexport declare class ClrDatagridColumn<T = any> extends DatagridFilterRegistrar<T, ClrDatagridFilterInterface<T>> implements OnDestroy, OnInit, OnChanges {\n    private _sort;\n    private vcr;\n    private detailService;\n    private changeDetectorRef;\n    commonStrings: ClrCommonStringsService;\n    constructor(_sort: Sort<T>, filters: FiltersProvider<T>, vcr: ViewContainerRef, detailService: DetailService, changeDetectorRef: ChangeDetectorRef, commonStrings: ClrCommonStringsService);\n    showSeparator: boolean;\n    /**\n     * Subscription to the sort service changes\n     */\n    private subscriptions;\n    ngOnDestroy(): void;\n    private listenForDetailPaneChanges;\n    private listenForSortingChanges;\n    private _colType;\n    get colType(): 'string' | 'number';\n    set colType(value: 'string' | 'number');\n    private _field;\n    get field(): string;\n    set field(field: string);\n    private setupDefaultFilter;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * ClrDatagridComparatorInterface to use when sorting the column\n     */\n    private _sortBy;\n    get sortBy(): ClrDatagridComparatorInterface<T> | string;\n    set sortBy(comparator: ClrDatagridComparatorInterface<T> | string);\n    /**\n     * Indicates if the column is sortable\n     */\n    get sortable(): boolean;\n    /**\n     * Indicates if the column is currently sorted\n     *\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n    private _sorted;\n    get sorted(): boolean;\n    /**\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n    set sorted(value: boolean);\n    /**\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n    sortedChange: EventEmitter<boolean>;\n    /**\n     * Indicates how the column is currently sorted\n     */\n    private _sortOrder;\n    get sortOrder(): ClrDatagridSortOrder;\n    set sortOrder(value: ClrDatagridSortOrder);\n    get ariaSort(): \"none\" | \"ascending\" | \"descending\";\n    sortOrderChange: EventEmitter<ClrDatagridSortOrder>;\n    /**\n     * @deprecated\n     *\n     * Use `sortDirection` to indentify the sort direction\n     */\n    sortIcon: string | null;\n    private _sortDirection;\n    get sortDirection(): 'up' | 'down' | null;\n    /**\n     * Sorts the datagrid based on this column\n     */\n    sort(reverse?: boolean): void;\n    /**\n     * A custom filter for this column that can be provided in the projected content\n     */\n    customFilter: boolean;\n    set projectedFilter(custom: any);\n    set updateFilterValue(newValue: string | [number, number]);\n    private initFilterValue;\n    get filterValue(): any;\n    /**\n     * @NOTE type `any` here is to let us pass templateStrictMode, because in our code we try to handle\n     * two types of filters String and Number with the same variable but both of them work with different\n     * format we got an error for casting. We could not cast anything inside the template so to not mess the\n     * casting, the last type is set to `any`\n     *\n     * Orignial types: string | [number, number]\n     */\n    set filterValue(newValue: any);\n    filterValueChange: EventEmitter<any>;\n    private wrappedInjector;\n    ngOnInit(): void;\n    get _view(): any;\n}\n"]}