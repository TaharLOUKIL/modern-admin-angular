{"version":3,"file":"sidebar.component.d.ts","sources":["sidebar.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { SidebarContainer } from './sidebar-container.component';\nexport declare class Sidebar implements OnInit, OnChanges, OnDestroy {\n    private _container;\n    private _ref;\n    opened: boolean;\n    openedChange: EventEmitter<boolean>;\n    mode: 'over' | 'push' | 'slide';\n    dock: boolean;\n    dockedSize: string;\n    position: 'start' | 'end' | 'left' | 'right' | 'top' | 'bottom';\n    animate: boolean;\n    autoCollapseHeight: number;\n    autoCollapseWidth: number;\n    autoCollapseOnInit: boolean;\n    sidebarClass: string;\n    ariaLabel: string;\n    trapFocus: boolean;\n    autoFocus: boolean;\n    showBackdrop: boolean;\n    closeOnClickBackdrop: boolean;\n    closeOnClickOutside: boolean;\n    keyClose: boolean;\n    keyCode: number;\n    onOpenStart: EventEmitter<null>;\n    onOpened: EventEmitter<null>;\n    onCloseStart: EventEmitter<null>;\n    onClosed: EventEmitter<null>;\n    onTransitionEnd: EventEmitter<null>;\n    onModeChange: EventEmitter<string>;\n    onPositionChange: EventEmitter<string>;\n    /** @internal */\n    _onRerender: EventEmitter<null>;\n    /** @internal */\n    _elSidebar: ElementRef;\n    private _focusableElementsString;\n    private _focusableElements;\n    private _focusedBeforeOpen;\n    private _tabIndexAttr;\n    private _tabIndexIndicatorAttr;\n    private _wasCollapsed;\n    private _shouldAnimate;\n    private _clickEvent;\n    private _onClickOutsideAttached;\n    private _onKeyDownAttached;\n    private _onResizeAttached;\n    private _isBrowser;\n    constructor(_container: SidebarContainer, _ref: ChangeDetectorRef, platformId: Object);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * Opens the sidebar and emits the appropriate events.\n     */\n    open(): void;\n    /**\n     * Closes the sidebar and emits the appropriate events.\n     */\n    close(): void;\n    /**\n     * Manually trigger a re-render of the container. Useful if the sidebar contents might change.\n     */\n    triggerRerender(): void;\n    /**\n     * @internal\n     *\n     * Computes the transform styles for the sidebar template.\n     *\n     * @return {CSSStyleDeclaration} The transform styles, with the WebKit-prefixed version as well.\n     */\n    _getStyle(): CSSStyleDeclaration;\n    /**\n     * @internal\n     *\n     * Handles the `transitionend` event on the sidebar to emit the onOpened/onClosed events after the transform\n     * transition is completed.\n     */\n    _onTransitionEnd(e: TransitionEvent): void;\n    /**\n     * Returns whether focus should be trapped within the sidebar.\n     *\n     * @return {boolean} Trap focus inside sidebar.\n     */\n    private readonly _shouldTrapFocus;\n    /**\n     * Sets focus to the first focusable element inside the sidebar.\n     */\n    private _focusFirstItem;\n    /**\n     * Loops focus back to the start of the sidebar if set to do so.\n     */\n    private _onFocusTrap;\n    /**\n     * Handles the ability to focus sidebar elements when it's open/closed to ensure that the sidebar is inert when\n     * appropriate.\n     */\n    private _setFocused;\n    /**\n     * Initializes event handlers for the closeOnClickOutside and keyClose options.\n     */\n    private _initCloseListeners;\n    private _initCloseClickListener;\n    private _initCloseKeyDownListener;\n    /**\n     * Destroys all event handlers from _initCloseListeners.\n     */\n    private _destroyCloseListeners;\n    private _destroyCloseClickListener;\n    private _destroyCloseKeyDownListener;\n    /**\n     * Handles `click` events on anything while the sidebar is open for the closeOnClickOutside option.\n     * Programatically closes the sidebar if a click occurs outside the sidebar.\n     *\n     * @param e {MouseEvent} Mouse click event.\n     */\n    private _onClickOutside;\n    /**\n     * Handles the `keydown` event for the keyClose option.\n     *\n     * @param e {KeyboardEvent} Normalized keydown event.\n     */\n    private _onKeyDown;\n    private _initCollapseListeners;\n    private _destroyCollapseListeners;\n    private _collapse;\n    /**\n     * @internal\n     *\n     * Returns the rendered height of the sidebar (or the docked size).\n     * This is used in the sidebar container.\n     *\n     * @return {number} Height of sidebar.\n     */\n    readonly _height: number;\n    /**\n     * @internal\n     *\n     * Returns the rendered width of the sidebar (or the docked size).\n     * This is used in the sidebar container.\n     *\n     * @return {number} Width of sidebar.\n     */\n    readonly _width: number;\n    /**\n     * @internal\n     *\n     * Returns the docked size as a number.\n     *\n     * @return {number} Docked size.\n     */\n    readonly _dockedSize: number;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is over mode.\n     *\n     * @return {boolean} Sidebar's mode is \"over\".\n     */\n    readonly _isModeOver: boolean;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is push mode.\n     *\n     * @return {boolean} Sidebar's mode is \"push\".\n     */\n    readonly _isModePush: boolean;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is slide mode.\n     *\n     * @return {boolean} Sidebar's mode is \"slide\".\n     */\n    readonly _isModeSlide: boolean;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is \"docked\" -- i.e. it is closed but in dock mode.\n     *\n     * @return {boolean} Sidebar is docked.\n     */\n    readonly _isDocked: boolean;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is positioned at the left or top.\n     *\n     * @return {boolean} Sidebar is positioned at the left or top.\n     */\n    readonly _isLeftOrTop: boolean;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is positioned at the left or right.\n     *\n     * @return {boolean} Sidebar is positioned at the left or right.\n     */\n    readonly _isLeftOrRight: boolean;\n    /**\n     * @internal\n     *\n     * Returns whether the sidebar is inert -- i.e. the contents cannot be focused.\n     *\n     * @return {boolean} Sidebar is inert.\n     */\n    readonly _isInert: boolean;\n    /**\n     * \"Normalizes\" position. For example, \"start\" would be \"left\" if the page is LTR.\n     */\n    private _normalizePosition;\n}\n"]}