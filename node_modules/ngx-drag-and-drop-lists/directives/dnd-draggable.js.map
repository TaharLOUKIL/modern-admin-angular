{"version":3,"file":"dnd-draggable.js","sources":["dnd-draggable.js"],"names":[],"mappingsoBAAqB;AACrB;AACA;AACA;AACA","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, Input, Output, ElementRef, HostListener, EventEmitter } from '@angular/core';\nimport { DndState } from '../services';\nimport { ALL_EFFECTS, MIME_TYPE, EDGE_MIME_TYPE, MSIE_MIME_TYPE, } from '../index';\nimport { dropAccepted } from './dnd-list';\nvar DndDraggable = (function () {\n    function DndDraggable(element, dndState) {\n        this.element = element;\n        this.dndState = dndState;\n        this.option = { draggable: true };\n        this.dndDragStart = new EventEmitter();\n        this.dndDragEnd = new EventEmitter();\n        this.dndCopied = new EventEmitter();\n        this.dndLinked = new EventEmitter();\n        this.dndMoved = new EventEmitter();\n        this.dndCanceled = new EventEmitter();\n        this.dndSelected = new EventEmitter();\n        this.draggableString = 'draggable';\n        this.dragState = dndState.dragState;\n        this.element.nativeElement.setAttribute(this.draggableString, 'true');\n        this.element.nativeElement.onselectstart = function () {\n            if (this.dragDrop)\n                this.dragDrop();\n        };\n    }\n    Object.defineProperty(DndDraggable.prototype, \"disableDrag\", {\n        set: function (disable) {\n            if (disable !== undefined) {\n                this.element.nativeElement.setAttribute(this.draggableString, (!disable).toString());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DndDraggable.prototype.ngOnInit = function () {\n        var _this = this;\n        this.dropSubscription = dropAccepted.subscribe(function (_a) {\n            var item = _a.item, list = _a.list;\n            if (JSON.stringify(_this.dndObject) === JSON.stringify(item)) {\n                var cb = { copy: 'dndCopied', link: 'dndLinked', move: 'dndMoved', none: 'dndCanceled' };\n                if (_this.dragState) {\n                    _this[cb[_this.dragState.effectAllowed]].emit();\n                }\n                _this.dndDragEnd.emit();\n            }\n        });\n    };\n    DndDraggable.prototype.ngOnDestroy = function () {\n        this.dropSubscription.unsubscribe();\n    };\n    DndDraggable.prototype.handleDragStart = function (event) {\n        var _this = this;\n        if (this.element.nativeElement.getAttribute(this.draggableString) === 'false')\n            return;\n        this.dragState.isDragging = true;\n        this.dragState.itemType = this.dndType;\n        this.dragState.dropEffect = 'none';\n        if (!this.option) {\n            this.option = { draggable: true };\n        }\n        this.dragState.effectAllowed = this.option.effectAllowed || ALL_EFFECTS[0];\n        event.dataTransfer.effectAllowed = this.dragState.effectAllowed;\n        var mimeType = MIME_TYPE + (this.dragState.itemType ? ('-' + this.dragState.itemType) : '');\n        try {\n            event.dataTransfer.setData(mimeType, JSON.stringify(this.dndObject));\n        }\n        catch (e) {\n            var data = JSON.stringify({ item: this.dndObject, type: this.dragState.itemType });\n            try {\n                event.dataTransfer.setData(EDGE_MIME_TYPE, data);\n            }\n            catch (e) {\n                var effectsAllowed = this.dndState.filterEffects(ALL_EFFECTS, this.dragState.effectAllowed);\n                event.dataTransfer.effectAllowed = effectsAllowed[0];\n                event.dataTransfer.setData(MSIE_MIME_TYPE, data);\n            }\n        }\n        this.element.nativeElement.classList.add('dndDragging');\n        setTimeout(function () {\n            if (_this.dragState.effectAllowed === 'move') {\n                _this.element.nativeElement.style.display = 'none';\n            }\n        });\n        if (event._dndHandle && event.dataTransfer.setDragImage) {\n            event.dataTransfer.setDragImage(this.element.nativeElement, 0, 0);\n        }\n        this.dndDragStart.emit();\n        event.stopPropagation();\n    };\n    DndDraggable.prototype.handleDragEnd = function (event) {\n        var _this = this;\n        this.dragState.isDragging = false;\n        this.element.nativeElement.classList.remove('dndDragging');\n        this.element.nativeElement.style.removeProperty('display');\n        event.stopPropagation();\n        setTimeout((function () { return _this.element.nativeElement.classList.remove('dndDraggingSource'); }), 0);\n    };\n    DndDraggable.prototype.handleClick = function (event) {\n        if (this.element.nativeElement.hasAttribute('dndSelected'))\n            return;\n        event = event['originalEvent'] || event;\n        this.dndSelected.emit();\n        event.stopPropagation();\n    };\n    DndDraggable.prototype.findElementWithAttribute = function (element, attr) {\n        if (element.hasAttribute(attr))\n            return element;\n        if (element.parentElement === null)\n            return;\n        return this.findElementWithAttribute(element.parentElement, attr);\n    };\n    __decorate([\n        Input('dndDraggable'),\n        __metadata(\"design:type\", Object)\n    ], DndDraggable.prototype, \"option\", void 0);\n    __decorate([\n        Input('dndType'),\n        __metadata(\"design:type\", String)\n    ], DndDraggable.prototype, \"dndType\", void 0);\n    __decorate([\n        Input('dndObject'),\n        __metadata(\"design:type\", HTMLElement)\n    ], DndDraggable.prototype, \"dndObject\", void 0);\n    __decorate([\n        Input('dndDragDisabled'),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], DndDraggable.prototype, \"disableDrag\", null);\n    __decorate([\n        Output('dndDragStart'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndDragStart\", void 0);\n    __decorate([\n        Output('dndDragEnd'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndDragEnd\", void 0);\n    __decorate([\n        Output('dndCopied'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndCopied\", void 0);\n    __decorate([\n        Output('dndLinked'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndLinked\", void 0);\n    __decorate([\n        Output('dndMoved'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndMoved\", void 0);\n    __decorate([\n        Output('dndCanceled'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndCanceled\", void 0);\n    __decorate([\n        Output('dndSelected'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndDraggable.prototype, \"dndSelected\", void 0);\n    __decorate([\n        HostListener('dragstart', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [DragEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], DndDraggable.prototype, \"handleDragStart\", null);\n    __decorate([\n        HostListener('dragend', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [DragEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], DndDraggable.prototype, \"handleDragEnd\", null);\n    __decorate([\n        HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], DndDraggable.prototype, \"handleClick\", null);\n    DndDraggable = __decorate([\n        Directive({\n            selector: '[dndDraggable]',\n        }),\n        __metadata(\"design:paramtypes\", [ElementRef,\n            DndState])\n    ], DndDraggable);\n    return DndDraggable;\n}());\nexport { DndDraggable };\n"]}