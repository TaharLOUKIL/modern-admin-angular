{"version":3,"file":"dnd-list.js","sources":["dnd-list.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAIO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAgB;AAChB;AACA;AACA;AACA","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Directive, Input, Output, ElementRef, HostListener, EventEmitter } from '@angular/core';\nimport { DndState, ALL_EFFECTS, MIME_TYPE, EDGE_MIME_TYPE, MSIE_MIME_TYPE, } from '../services';\nimport { Subject } from 'rxjs';\nexport var dropAccepted = new Subject();\nvar DndList = (function () {\n    function DndList(element, dndState) {\n        this.element = element;\n        this.dndState = dndState;\n        this.option = {\n            disabled: false,\n            effectAllowed: 'move',\n            allowedTypes: undefined,\n        };\n        this.dndDragOver = new EventEmitter();\n        this.dndDrop = new EventEmitter();\n        this.dndInserted = new EventEmitter();\n        this.listSettings = {};\n        this.dragState = dndState.dragState;\n        this.nativeElement = element.nativeElement;\n        this.placeholder = this.getPlaceholderElement();\n    }\n    Object.defineProperty(DndList.prototype, \"dndPlaceholder\", {\n        set: function (placeholder) {\n            this.placeholder = placeholder;\n            placeholder.remove();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DndList.prototype.ngOnInit = function () {\n    };\n    DndList.prototype.ngOnDestroy = function () {\n    };\n    DndList.prototype.handleDragEnter = function (event) {\n        event = event['originalEvent'] || event;\n        var mimeType = this.getMimeType(event.dataTransfer.types);\n        if (!mimeType || !this.isDropAllowed(this.getItemType(mimeType))) {\n            return true;\n        }\n        event.preventDefault();\n        return false;\n    };\n    DndList.prototype.handleDragOver = function (event) {\n        event = event['originalEvent'] || event;\n        var mimeType = this.getMimeType(event.dataTransfer.types);\n        var itemType = this.getItemType(mimeType);\n        if (!mimeType || !this.isDropAllowed(itemType)) {\n            return true;\n        }\n        if (this.placeholder.parentNode !== this.nativeElement) {\n            this.nativeElement.appendChild(this.placeholder);\n        }\n        if (event.target !== this.nativeElement) {\n            var listItemNode = event.target;\n            while (listItemNode.parentNode !== this.nativeElement && listItemNode.parentNode) {\n                listItemNode = listItemNode.parentNode;\n            }\n            if (listItemNode.parentNode === this.nativeElement && listItemNode !== this.placeholder) {\n                var isFirstHalf = void 0;\n                var rect = listItemNode.getBoundingClientRect();\n                if (this.option && this.option.horizontal) {\n                    isFirstHalf = event.clientX < rect.left + rect.width / 2;\n                }\n                else {\n                    isFirstHalf = event.clientY < rect.top + rect.height / 2;\n                }\n                this.nativeElement.insertBefore(this.placeholder, isFirstHalf ? listItemNode : listItemNode.nextSibling);\n            }\n        }\n        var ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;\n        var dropEffect = this.getDropEffect(event, ignoreDataTransfer);\n        if (dropEffect === 'none')\n            return this.stopDragOver();\n        event.preventDefault();\n        if (!ignoreDataTransfer) {\n            event.dataTransfer.dropEffect = dropEffect;\n        }\n        this.nativeElement.classList.add('dndDragover');\n        event.stopPropagation();\n        return false;\n    };\n    DndList.prototype.handleDrop = function (event) {\n        event = event['originalEvent'] || event;\n        var mimeType = this.getMimeType(event.dataTransfer.types);\n        var itemType = this.getItemType(mimeType);\n        if (!mimeType || !this.isDropAllowed(itemType))\n            return true;\n        event.preventDefault();\n        var data = undefined;\n        try {\n            data = JSON.parse(event.dataTransfer.getData(mimeType));\n        }\n        catch (e) {\n            return this.stopDragOver();\n        }\n        if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE) {\n            itemType = data.type || undefined;\n            data = data.item;\n            if (!this.isDropAllowed(itemType))\n                return this.stopDragOver();\n        }\n        var ignoreDataTransfer = mimeType === MSIE_MIME_TYPE;\n        var dropEffect = this.getDropEffect(event, ignoreDataTransfer);\n        if (dropEffect === 'none')\n            return this.stopDragOver();\n        var index = this.getPlaceholderIndex();\n        var offset = this.nativeElement.children.length - 1 - this.dndModel.length;\n        if (this.dndDrop) {\n            this.invokeCallback(this.dndDrop, event, dropEffect, itemType, index, data);\n            if (!data)\n                return this.stopDragOver();\n        }\n        this.dragState.dropEffect = dropEffect;\n        if (!ignoreDataTransfer) {\n            event.dataTransfer.dropEffect = dropEffect;\n        }\n        if (data !== true) {\n            var insertionPoint = index - offset;\n            if (insertionPoint < 0) {\n                insertionPoint = 0;\n            }\n            this.dndModel.splice(insertionPoint, 0, data);\n        }\n        this.invokeCallback(this.dndInserted, event, dropEffect, itemType, index, data);\n        dropAccepted.next({ item: data, list: this.dndModel });\n        this.stopDragOver();\n        event.stopPropagation();\n        return false;\n    };\n    DndList.prototype.handleDragLeave = function (event) {\n        event = event['originalEvent'] || event;\n        var newTarget = document.elementFromPoint(event.clientX, event.clientY);\n        if (this.nativeElement.contains(newTarget) && !event['_dndPhShown']) {\n            event['_dndPhShown'] = true;\n        }\n        else {\n            this.stopDragOver();\n        }\n    };\n    DndList.prototype.getPlaceholderElement = function () {\n        var placeholder = undefined;\n        if (this.nativeElement.children) {\n            for (var i = 1; i < this.nativeElement.children.length; i++) {\n                var child = this.nativeElement.children.item(i);\n                if (child.classList.contains('dndPlaceholder')) {\n                    placeholder = child;\n                }\n            }\n        }\n        var placeholderDefault = document.createElement('li');\n        placeholderDefault.classList.add('dndPlaceholder');\n        return placeholder || placeholderDefault;\n    };\n    DndList.prototype.getMimeType = function (types) {\n        if (!types)\n            return MSIE_MIME_TYPE;\n        for (var i = 0; i < types.length; i++) {\n            if (types[i] === MSIE_MIME_TYPE || types[i] === EDGE_MIME_TYPE ||\n                types[i].substr(0, MIME_TYPE.length) === MIME_TYPE) {\n                return types[i];\n            }\n        }\n        return null;\n    };\n    DndList.prototype.getItemType = function (mimeType) {\n        if (this.dragState.isDragging)\n            return this.dragState.itemType || undefined;\n        if (mimeType === MSIE_MIME_TYPE || mimeType === EDGE_MIME_TYPE)\n            return null;\n        return (mimeType && mimeType.substr(MIME_TYPE.length + 1)) || undefined;\n    };\n    DndList.prototype.isDropAllowed = function (itemType) {\n        if (this.option) {\n            if (this.option.disabled)\n                return false;\n            if (this.option.max && this.dndModel.length === this.option.max)\n                return false;\n            if (!this.option.externalSources && !this.dragState.isDragging)\n                return false;\n            if (!this.option.allowedTypes || itemType === null)\n                return true;\n        }\n        return itemType && this.option.allowedTypes.indexOf(itemType) !== -1;\n    };\n    DndList.prototype.getDropEffect = function (event, ignoreDataTransfer) {\n        var effects = Object.assign([], ALL_EFFECTS);\n        if (!ignoreDataTransfer) {\n            effects = this.dndState.filterEffects(effects, event.dataTransfer.effectAllowed);\n        }\n        if (this.dragState.isDragging) {\n            effects = this.dndState.filterEffects(effects, this.dragState.effectAllowed);\n        }\n        if (this.option && this.option.effectAllowed) {\n            effects = this.dndState.filterEffects(effects, this.option.effectAllowed);\n        }\n        if (!effects.length) {\n            return 'none';\n        }\n        else if (event.ctrlKey && effects.indexOf('copy') !== -1) {\n            return 'copy';\n        }\n        else if (event.altKey && effects.indexOf('link') !== -1) {\n            return 'link';\n        }\n        else {\n            return effects[0];\n        }\n    };\n    DndList.prototype.stopDragOver = function () {\n        this.placeholder.remove();\n        this.nativeElement.classList.remove('dndDragover');\n        return true;\n    };\n    DndList.prototype.invokeCallback = function (eventEmitter, event, dropEffect, itemType, index, item) {\n        eventEmitter.emit({\n            dropEffect: dropEffect,\n            event: event,\n            external: !this.dragState.isDragging,\n            index: index !== undefined ? index : this.getPlaceholderIndex(),\n            item: item || undefined,\n            type: itemType,\n        });\n        return true;\n    };\n    DndList.prototype.getPlaceholderIndex = function () {\n        for (var i = 0; i < this.nativeElement.children.length; i++) {\n            if (this.nativeElement.children[i].classList.contains('dndDragging')) {\n                this.nativeElement.children[i].remove();\n                break;\n            }\n        }\n        return Array.prototype.indexOf.call(this.nativeElement.children, this.placeholder);\n    };\n    __decorate([\n        Input('dndList'),\n        __metadata(\"design:type\", Object)\n    ], DndList.prototype, \"option\", void 0);\n    __decorate([\n        Input('dndModel'),\n        __metadata(\"design:type\", Array)\n    ], DndList.prototype, \"dndModel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Element),\n        __metadata(\"design:paramtypes\", [Element])\n    ], DndList.prototype, \"dndPlaceholder\", null);\n    __decorate([\n        Output('dndDragOver'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndList.prototype, \"dndDragOver\", void 0);\n    __decorate([\n        Output('dndDrop'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndList.prototype, \"dndDrop\", void 0);\n    __decorate([\n        Output('dndInserted'),\n        __metadata(\"design:type\", EventEmitter)\n    ], DndList.prototype, \"dndInserted\", void 0);\n    __decorate([\n        HostListener('dragenter', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [DragEvent]),\n        __metadata(\"design:returntype\", Boolean)\n    ], DndList.prototype, \"handleDragEnter\", null);\n    __decorate([\n        HostListener('dragover', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [DragEvent]),\n        __metadata(\"design:returntype\", Boolean)\n    ], DndList.prototype, \"handleDragOver\", null);\n    __decorate([\n        HostListener('drop', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [DragEvent]),\n        __metadata(\"design:returntype\", Boolean)\n    ], DndList.prototype, \"handleDrop\", null);\n    __decorate([\n        HostListener('dragleave', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [DragEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], DndList.prototype, \"handleDragLeave\", null);\n    DndList = __decorate([\n        Directive({\n            selector: '[dndList]',\n        }),\n        __metadata(\"design:paramtypes\", [ElementRef,\n            DndState])\n    ], DndList);\n    return DndList;\n}());\nexport { DndList };\n"]}